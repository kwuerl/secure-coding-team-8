diff --git a/.gitignore b/.gitignore
index 1cd6449..1a2e10f 100644
diff --git a/SmartCardSimulator/.classpath b/SmartCardSimulator/.classpath
new file mode 100644
index 0000000..5c59d7a
--- /dev/null
+++ b/SmartCardSimulator/.classpath
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="src" path="src"/>
+	<classpathentry kind="src" path="resources"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8"/>
+	<classpathentry kind="output" path="bin"/>
+</classpath>
diff --git a/SmartCardSimulator/.project b/SmartCardSimulator/.project
new file mode 100644
index 0000000..2070ffc
--- /dev/null
+++ b/SmartCardSimulator/.project
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>SmartCardSimulator</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+	</natures>
+</projectDescription>
diff --git a/SmartCardSimulator/.settings/org.eclipse.jdt.core.prefs b/SmartCardSimulator/.settings/org.eclipse.jdt.core.prefs
new file mode 100644
index 0000000..3a21537
--- /dev/null
+++ b/SmartCardSimulator/.settings/org.eclipse.jdt.core.prefs
@@ -0,0 +1,11 @@
+eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.8
+org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
+org.eclipse.jdt.core.compiler.compliance=1.8
+org.eclipse.jdt.core.compiler.debug.lineNumber=generate
+org.eclipse.jdt.core.compiler.debug.localVariable=generate
+org.eclipse.jdt.core.compiler.debug.sourceFile=generate
+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+org.eclipse.jdt.core.compiler.source=1.8
diff --git a/SmartCardSimulator/bin/.gitignore b/SmartCardSimulator/bin/.gitignore
new file mode 100644
index 0000000..251080c
--- /dev/null
+++ b/SmartCardSimulator/bin/.gitignore
@@ -0,0 +1 @@
+/securebank/
diff --git a/SmartCardSimulator/bin/images/batch-transfer.png b/SmartCardSimulator/bin/images/batch-transfer.png
new file mode 100644
index 0000000..542538b
Binary files /dev/null and b/SmartCardSimulator/bin/images/batch-transfer.png differ
diff --git a/SmartCardSimulator/bin/images/single-transfer.png b/SmartCardSimulator/bin/images/single-transfer.png
new file mode 100644
index 0000000..8fa5eb0
Binary files /dev/null and b/SmartCardSimulator/bin/images/single-transfer.png differ
diff --git a/SmartCardSimulator/bin/securebank/scs/helpers/TanGenerator.class b/SmartCardSimulator/bin/securebank/scs/helpers/TanGenerator.class
new file mode 100644
index 0000000..77af611
Binary files /dev/null and b/SmartCardSimulator/bin/securebank/scs/helpers/TanGenerator.class differ
diff --git a/SmartCardSimulator/bin/securebank/scs/ui/application/Main$1.class b/SmartCardSimulator/bin/securebank/scs/ui/application/Main$1.class
new file mode 100644
index 0000000..f52b0bf
Binary files /dev/null and b/SmartCardSimulator/bin/securebank/scs/ui/application/Main$1.class differ
diff --git a/SmartCardSimulator/bin/securebank/scs/ui/application/Main.class b/SmartCardSimulator/bin/securebank/scs/ui/application/Main.class
new file mode 100644
index 0000000..cceb694
Binary files /dev/null and b/SmartCardSimulator/bin/securebank/scs/ui/application/Main.class differ
diff --git a/SmartCardSimulator/bin/securebank/scs/ui/application/SmartCardSimulator$1.class b/SmartCardSimulator/bin/securebank/scs/ui/application/SmartCardSimulator$1.class
new file mode 100644
index 0000000..5bc0434
Binary files /dev/null and b/SmartCardSimulator/bin/securebank/scs/ui/application/SmartCardSimulator$1.class differ
diff --git a/SmartCardSimulator/bin/securebank/scs/ui/application/SmartCardSimulator$2.class b/SmartCardSimulator/bin/securebank/scs/ui/application/SmartCardSimulator$2.class
new file mode 100644
index 0000000..f9d190d
Binary files /dev/null and b/SmartCardSimulator/bin/securebank/scs/ui/application/SmartCardSimulator$2.class differ
diff --git a/SmartCardSimulator/bin/securebank/scs/ui/application/SmartCardSimulator.class b/SmartCardSimulator/bin/securebank/scs/ui/application/SmartCardSimulator.class
new file mode 100644
index 0000000..464d737
Binary files /dev/null and b/SmartCardSimulator/bin/securebank/scs/ui/application/SmartCardSimulator.class differ
diff --git a/SmartCardSimulator/bin/securebank/scs/ui/components/FileTypeFilter.class b/SmartCardSimulator/bin/securebank/scs/ui/components/FileTypeFilter.class
new file mode 100644
index 0000000..bf24c72
Binary files /dev/null and b/SmartCardSimulator/bin/securebank/scs/ui/components/FileTypeFilter.class differ
diff --git a/SmartCardSimulator/bin/securebank/scs/ui/components/JFilePicker$1.class b/SmartCardSimulator/bin/securebank/scs/ui/components/JFilePicker$1.class
new file mode 100644
index 0000000..375c2e6
Binary files /dev/null and b/SmartCardSimulator/bin/securebank/scs/ui/components/JFilePicker$1.class differ
diff --git a/SmartCardSimulator/bin/securebank/scs/ui/components/JFilePicker.class b/SmartCardSimulator/bin/securebank/scs/ui/components/JFilePicker.class
new file mode 100644
index 0000000..3b7490d
Binary files /dev/null and b/SmartCardSimulator/bin/securebank/scs/ui/components/JFilePicker.class differ
diff --git a/SmartCardSimulator/resources/images/batch-transfer.png b/SmartCardSimulator/resources/images/batch-transfer.png
new file mode 100644
index 0000000..542538b
Binary files /dev/null and b/SmartCardSimulator/resources/images/batch-transfer.png differ
diff --git a/SmartCardSimulator/resources/images/single-transfer.png b/SmartCardSimulator/resources/images/single-transfer.png
new file mode 100644
index 0000000..8fa5eb0
Binary files /dev/null and b/SmartCardSimulator/resources/images/single-transfer.png differ
diff --git a/SmartCardSimulator/src/securebank/scs/helpers/TanGenerator.java b/SmartCardSimulator/src/securebank/scs/helpers/TanGenerator.java
new file mode 100644
index 0000000..09dd472
--- /dev/null
+++ b/SmartCardSimulator/src/securebank/scs/helpers/TanGenerator.java
@@ -0,0 +1,48 @@
+/**
+ * TanGenerator class
+ *
+ * @author Swathi Shyam Sunder <swathi.ssunder@tum.de>
+ */
+
+package securebank.scs.helpers;
+
+import java.io.UnsupportedEncodingException;
+import java.security.MessageDigest;
+import java.security.NoSuchAlgorithmException;
+
+public class TanGenerator {
+	public TanGenerator() {
+		
+	}
+	
+	public String getTan(String input) {
+		input = input.replaceAll("\\s+","") + System.currentTimeMillis()/100000;
+		String hash = generateHash(input);
+		return getTanFromHash(hash);
+	}
+	
+	private static String getTanFromHash(String hash) {
+		hash = hash.substring(0, 15);
+		return hash;
+	}
+
+	private String generateHash(String toHash) {
+		/*Create MD5 Hash*/
+		MessageDigest digest = null;
+		try {
+			digest = MessageDigest.getInstance("SHA-512");
+			digest.update(toHash.getBytes("UTF-8"));
+		} catch (NoSuchAlgorithmException e) {
+			e.printStackTrace();
+		} catch (UnsupportedEncodingException e) {
+			e.printStackTrace();
+		}
+		byte messageDigest[] = digest.digest();
+		/*Create Hex String*/
+		StringBuffer hexString = new StringBuffer();
+		for (int i = 0; i < messageDigest.length; i++) {
+			hexString.append(String.format("%02x", 0xFF & messageDigest[i]));
+		}
+		return hexString.toString();
+	}
+}
\ No newline at end of file
diff --git a/SmartCardSimulator/src/securebank/scs/ui/application/Main.java b/SmartCardSimulator/src/securebank/scs/ui/application/Main.java
new file mode 100644
index 0000000..26957fa
--- /dev/null
+++ b/SmartCardSimulator/src/securebank/scs/ui/application/Main.java
@@ -0,0 +1,28 @@
+/**
+ * Main class
+ *
+ * @author Swathi Shyam Sunder <swathi.ssunder@tum.de>
+ */
+
+package securebank.scs.ui.application;
+
+import java.awt.EventQueue;
+
+public class Main {
+	/**
+	 * Launch the application.
+	 */
+	public static void main(String[] args) {
+		EventQueue.invokeLater(new Runnable() {
+			@Override
+			public void run() {
+				try {
+					SmartCardSimulator window = new SmartCardSimulator();
+					window.frmSecureBank.setVisible(true);
+				} catch (Exception e) {
+					e.printStackTrace();
+				}
+			}
+		});
+	}
+}
\ No newline at end of file
diff --git a/SmartCardSimulator/src/securebank/scs/ui/application/SmartCardSimulator.java b/SmartCardSimulator/src/securebank/scs/ui/application/SmartCardSimulator.java
new file mode 100644
index 0000000..eab2fb0
--- /dev/null
+++ b/SmartCardSimulator/src/securebank/scs/ui/application/SmartCardSimulator.java
@@ -0,0 +1,361 @@
+/**
+ * SmartCardSimulator class
+ *
+ * @author Swathi Shyam Sunder <swathi.ssunder@tum.de>
+ */
+
+package securebank.scs.ui.application;
+
+import javax.swing.UIManager;
+import javax.swing.JFrame;
+import javax.swing.JTabbedPane;
+import javax.swing.JPanel;
+import javax.swing.JPasswordField;
+import javax.swing.JLabel;
+import javax.swing.JTextField;
+import javax.swing.SwingConstants;
+import javax.swing.ImageIcon;
+import javax.swing.JButton;
+import java.awt.event.ActionListener;
+import java.io.BufferedReader;
+import java.io.FileNotFoundException;
+import java.io.FileReader;
+import java.io.IOException;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+import java.awt.event.ActionEvent;
+import javax.swing.border.LineBorder;
+import securebank.scs.helpers.TanGenerator;
+import securebank.scs.ui.components.JFilePicker;
+
+import java.awt.Color;
+import javax.swing.JTextPane;
+
+public class SmartCardSimulator {
+
+	public JFrame frmSecureBank;
+	private JTextField fieldRecipientAccountId;
+	private JTextField fieldAmount;
+	private JPasswordField fieldScsPin;
+	private JTextPane textPaneSingle;
+	private JTextPane textPaneBatch;
+	private TanGenerator tanGenerator;
+	private JPasswordField fieldScsPinBatch;
+	
+	/**
+	 * Initialize the smart card simulator.
+	 */
+	public SmartCardSimulator() {
+		initialize();
+	}
+
+	/**
+	 * Initialize the contents of the frame.
+	 */
+	private void initialize() {
+		frmSecureBank = new JFrame();
+		frmSecureBank.setTitle("SecureBank - Smart Card Simulator");
+		frmSecureBank.getContentPane().setBackground(new Color(102, 102, 102));
+		frmSecureBank.setBackground(Color.WHITE);
+		frmSecureBank.setBounds(100, 100, 450, 300);
+		frmSecureBank.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
+		frmSecureBank.getContentPane().setLayout(null);
+		
+		UIManager.put("TabbedPane.contentAreaColor", Color.BLACK);
+		UIManager.put("TabbedPane.light", Color.BLACK);
+		UIManager.put("TabbedPane.highlight", Color.BLACK);
+		UIManager.put("TabbedPane.shadow", Color.BLACK);
+		UIManager.put("TabbedPane.darkShadow", Color.BLACK);
+		UIManager.put("TabbedPane.selected", Color.BLACK);
+		UIManager.put("TabbedPane.borderHightlightColor", Color.BLACK);
+		
+		
+		JTabbedPane tabbedPane = new JTabbedPane(SwingConstants.TOP);
+		tabbedPane.setBackground(Color.GRAY);
+		tabbedPane.setForeground(Color.WHITE);
+		tabbedPane.setBounds(12, 12, 426, 248);
+		
+		frmSecureBank.getContentPane().add(tabbedPane);
+
+		JPanel panelSingle = new JPanel();
+		panelSingle.setBackground(Color.WHITE);
+		ImageIcon iconBatch2 = createImageIcon("/images/single-transfer.png");
+		tabbedPane.addTab("Single Transaction", iconBatch2 , panelSingle, "Single Transaction");
+		panelSingle.setLayout(null);
+		
+		JLabel lblRecipientAccountId = new JLabel("Recipient Account ID*");
+		lblRecipientAccountId.setBounds(23, 26, 165, 25);
+		panelSingle.add(lblRecipientAccountId);
+		
+		JLabel lblAmount = new JLabel("Amount*");
+		lblAmount.setBounds(23, 66, 140, 25);
+		panelSingle.add(lblAmount);
+		
+		JLabel lblScsPin = new JLabel("SCS Pin*");
+		lblScsPin.setBounds(23, 106, 140, 25);
+		panelSingle.add(lblScsPin);
+		
+		fieldRecipientAccountId = new JTextField();
+		fieldRecipientAccountId.setBounds(224, 26, 140, 25);
+		panelSingle.add(fieldRecipientAccountId);
+		fieldRecipientAccountId.setColumns(10);
+		
+		fieldAmount = new JTextField();
+		fieldAmount.setBounds(224, 66, 140, 25);
+		panelSingle.add(fieldAmount);
+		fieldAmount.setColumns(10);
+		
+		fieldScsPin = new JPasswordField();
+		fieldScsPin.setBounds(224, 106, 140, 25);
+		panelSingle.add(fieldScsPin);
+		fieldScsPin.setColumns(10);
+		
+		JButton btnGenerateTanForSingle = new JButton("Generate TAN");
+		btnGenerateTanForSingle.setForeground(Color.WHITE);
+		btnGenerateTanForSingle.setBackground(Color.DARK_GRAY);
+		btnGenerateTanForSingle.addActionListener(new ActionListener() {
+			@Override
+			public void actionPerformed(ActionEvent e) {
+				if (isValidSingleTransaction()) {
+					tanGenerator = new TanGenerator();
+					String tan = tanGenerator.getTan(fieldRecipientAccountId.getText() + fieldAmount.getText() + new String(fieldScsPin.getPassword()));
+					displayTan("_SINGLE", tan);
+				}				
+			}
+		});
+		btnGenerateTanForSingle.setBounds(130, 155, 154, 25);
+		panelSingle.add(btnGenerateTanForSingle);
+		
+		textPaneSingle = new JTextPane();
+		textPaneSingle.setText("");
+		textPaneSingle.setBounds(23, 192, 386, 20);
+		textPaneSingle.setContentType("text/html");
+		textPaneSingle.setEditable(false);
+		panelSingle.add(textPaneSingle);
+		
+		JPanel panelBatch = new JPanel();
+		ImageIcon iconBatch = createImageIcon("/images/batch-transfer.png");
+		panelBatch.setBackground(Color.WHITE);
+		tabbedPane.addTab("Batch Transactions", iconBatch, panelBatch, "Batch Transactions");
+		panelBatch.setLayout(null);
+
+		JFilePicker filePicker = new JFilePicker("Choose a file* ", "Browse");
+		filePicker.setBackground(Color.WHITE);
+        filePicker.setMode(JFilePicker.MODE_OPEN);
+        filePicker.setBounds(12, 72, 409, 71);
+        
+        filePicker.addFileTypeFilter(".txt", "Text Files");
+        panelBatch.add(filePicker);
+        
+        JButton btnGenerateTanForBatch = new JButton("Generate TAN");
+        btnGenerateTanForBatch.setForeground(Color.WHITE);
+        btnGenerateTanForBatch.setBackground(Color.DARK_GRAY);
+        btnGenerateTanForBatch.addActionListener(new ActionListener() {
+        	@Override
+			public void actionPerformed(ActionEvent e) {
+        		LineBorder errorField;
+        		String scsPin = new String(fieldScsPinBatch.getPassword()).trim();
+        		String filePath = filePicker.getSelectedFilePath().trim();
+
+        		/*Check if the SCS Pin entered is empty*/
+        		if (scsPin.isEmpty()) {
+        			errorField = new LineBorder(Color.RED, 1, true);		
+        			textPaneBatch.setText("Please enter a valid SCS pin.");
+        			fieldScsPinBatch.setBorder(errorField);
+        			return;
+        		}        		
+        		/*Check if SCS Pin entered is valid*/
+        		if (!isValidScsPin(scsPin)) {
+        			errorField = new LineBorder(Color.RED, 1, true);
+        			textPaneBatch.setText("Incorrect SCS Pin for the transfer.");
+        			fieldScsPinBatch.setBorder(errorField);
+        			return;
+        		}
+        		
+        		fieldScsPinBatch.setBorder(new LineBorder(Color.DARK_GRAY, 1, true));
+
+        		/*Check if no file is provided*/	
+        		if (filePath.isEmpty()) {
+        			textPaneBatch.setText("Please choose a file.");
+        			return;
+        		} 
+        		        		
+    			textPaneBatch.setText("");    			
+    			
+    			try {
+					BufferedReader reader = new BufferedReader(new FileReader(filePath));
+					String fileContent = "", line;
+					while((line = reader.readLine()) != null) {						
+						fileContent += line;
+					}
+					if (reader != null) {
+						reader.close();
+					}
+					tanGenerator = new TanGenerator();
+					String tan = tanGenerator.getTan(scsPin + fileContent.trim());
+					displayTan("_BATCH", tan);
+				} catch (FileNotFoundException e1) {					
+					e1.printStackTrace();
+				} catch (IOException e1) {
+					e1.printStackTrace();
+				}        		
+        	}
+        });        
+        btnGenerateTanForBatch.setBounds(130, 155, 154, 25);
+        panelBatch.add(btnGenerateTanForBatch);
+        
+        textPaneBatch = new JTextPane();
+        textPaneBatch.setText("");
+        textPaneBatch.setBounds(23, 192, 386, 20);
+        textPaneBatch.setContentType("text/html");
+		textPaneBatch.setEditable(false);
+        panelBatch.add(textPaneBatch);
+        
+        JLabel lblScsPinBatch = new JLabel("SCS Pin*");
+        lblScsPinBatch.setBounds(18, 35, 129, 25);
+        panelBatch.add(lblScsPinBatch);
+        
+        fieldScsPinBatch = new JPasswordField();
+        fieldScsPinBatch.setBounds(125, 35, 125, 25);
+        panelBatch.add(fieldScsPinBatch);
+        fieldScsPinBatch.setColumns(10);
+	}
+	
+	private ImageIcon createImageIcon(String path) {
+		java.net.URL imgUrl = getClass().getResource(path);
+		if (imgUrl != null) {
+			return new ImageIcon(imgUrl);
+		} else {
+			System.err.println("Error in loading icon.");
+			return null;
+		}
+	}
+
+	/**
+	 * Verifies if the all the required fields in the form are filled. 
+	 */
+	private Boolean isFormFilled() {
+		String msgRequiredFields = "Please fill all the required fields.";		
+		Boolean isFormFilled = true;
+		LineBorder border = new LineBorder(Color.DARK_GRAY, 1, true);
+		
+		fieldAmount.setBorder(border);
+		fieldRecipientAccountId.setBorder(border);
+		fieldScsPin.setBorder(border);
+		
+		/*Check if the Amount entered is empty*/
+		if (fieldAmount.getText().trim().isEmpty()) {
+			markFieldForError(fieldAmount);
+			isFormFilled = false;
+		}		
+		
+		/*Check if the Recipient Account Id entered is empty*/
+		if (fieldRecipientAccountId.getText().trim().isEmpty()) {
+			markFieldForError(fieldRecipientAccountId);
+			isFormFilled = false;
+		}
+				
+		/*Check if the SCS Pin entered is empty*/
+		if (new String(fieldScsPin.getPassword()).trim().isEmpty()) {
+			markFieldForError(fieldScsPin);
+			isFormFilled = false;
+		}
+		/*Set appropriate error message*/ 
+		if (!isFormFilled) {
+			setMessage(msgRequiredFields);
+		}
+		return isFormFilled;				
+	}
+	
+	/**
+	 * Highlights a field to indicate error.
+	 */
+	private void markFieldForError(JTextField field) {
+		LineBorder errorField = new LineBorder(Color.RED, 1, true);		
+		field.setBorder(errorField);
+	}
+	
+	/**
+	 * Highlights a field to indicate error and also displays the message specified.
+	 */
+	private void markFieldForError(JTextField field, String message) {
+		LineBorder errorField = new LineBorder(Color.RED, 1, true);		
+		setMessage(message);
+		field.setBorder(errorField);
+	}
+	
+	/**
+	 * Displays the specified message.
+	 */
+	private void setMessage(String message) {
+		textPaneSingle.setText(message);
+	}
+	/**
+	 * Displays the tan.
+	 */
+	private void displayTan(String mode, String tan) {
+		String message = "Your TAN is <b>" + tan + "</b>";
+		if (mode == "_SINGLE") 
+			textPaneSingle.setText(message);
+		else if (mode == "_BATCH")
+			textPaneBatch.setText(message);
+	}
+	
+	/**
+	 * Verifies if the data for the single transaction is valid.
+	 */
+	private Boolean isValidSingleTransaction() {						
+		Pattern numeric = Pattern.compile("[0-9]*\\.?[0-9]+");
+		Matcher matcher;
+		LineBorder border = new LineBorder(Color.DARK_GRAY, 1, true);
+		
+		if (isFormFilled()) {
+			fieldAmount.setBorder(border);
+			fieldRecipientAccountId.setBorder(border);
+			fieldScsPin.setBorder(border);
+			
+			matcher = numeric.matcher(fieldAmount.getText().trim());
+			if (matcher.matches()) {
+				Float amount = Float.parseFloat(matcher.group(0));
+				/*Return if the amount entered is invalid(i.e., negative or 0)*/
+				if (amount <= 0) {
+					markFieldForError(fieldAmount, "Incorrect Amount for the transfer");					
+					return false;	
+				}	
+			} else {
+				markFieldForError(fieldAmount, "Incorrect Amount for the transfer");
+				return false;
+			}
+			
+			matcher = numeric.matcher(fieldRecipientAccountId.getText().trim());
+			if (matcher.matches()) {
+				Integer recipientAccountId = Integer.parseInt(matcher.group(0));
+				/*Return if the recipient account id entered is invalid(i.e., negative or 0)*/
+				if (recipientAccountId <= 0) {
+					markFieldForError(fieldRecipientAccountId, "Incorrect Recipient Account Id for the transfer");
+					return false;
+				}
+			} else {
+				markFieldForError(fieldRecipientAccountId, "Incorrect Recipient Account Id for the transfer");				
+				return false;
+			}
+			
+			if (!isValidScsPin(new String(fieldScsPin.getPassword()).trim())) {
+				markFieldForError(fieldScsPin, "Incorrect SCS Pin for the transfer");				
+				return false;
+			} else {
+				setMessage("");
+				return true;
+			}			
+		}
+		return false;
+	}
+	
+	private Boolean isValidScsPin(String scsPin) {		
+		/*Return if the SCS Pin entered does not contain 6 characters.*/
+		if (scsPin.length() != 6) {							
+			return false;
+		}
+		return true;
+	}
+}
\ No newline at end of file
diff --git a/SmartCardSimulator/src/securebank/scs/ui/components/FileTypeFilter.java b/SmartCardSimulator/src/securebank/scs/ui/components/FileTypeFilter.java
new file mode 100644
index 0000000..020d109
--- /dev/null
+++ b/SmartCardSimulator/src/securebank/scs/ui/components/FileTypeFilter.java
@@ -0,0 +1,35 @@
+/**
+ * FileTypePicker class
+ *
+ * @author Swathi Shyam Sunder <swathi.ssunder@tum.de>
+ *
+ * Part of code taken from http://www.codejava.net/java-se/swing/file-picker-component-in-swing
+ */
+
+package securebank.scs.ui.components;
+import java.io.File;
+import javax.swing.filechooser.FileFilter;
+ 
+public class FileTypeFilter extends FileFilter {
+ 
+    private String extension;
+    private String description;
+     
+    public FileTypeFilter(String extension, String description) {
+        this.extension = extension;
+        this.description = description;
+    }
+     
+    @Override
+    public boolean accept(File file) {
+        if (file.isDirectory()) {
+            return true;
+        }
+        return file.getName().toLowerCase().endsWith(extension);
+    }
+     
+    @Override
+	public String getDescription() {
+        return description + String.format(" (*%s)", extension);
+    }
+}
\ No newline at end of file
diff --git a/SmartCardSimulator/src/securebank/scs/ui/components/JFilePicker.java b/SmartCardSimulator/src/securebank/scs/ui/components/JFilePicker.java
new file mode 100644
index 0000000..3b4d43d
--- /dev/null
+++ b/SmartCardSimulator/src/securebank/scs/ui/components/JFilePicker.java
@@ -0,0 +1,88 @@
+/**
+ * FilePicker class
+ *
+ * @author Swathi Shyam Sunder <swathi.ssunder@tum.de>
+ *
+ * Part of code taken from http://www.codejava.net/java-se/swing/file-picker-component-in-swing
+ */
+
+package securebank.scs.ui.components;
+import java.awt.Color;
+import java.awt.FlowLayout;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+ 
+import javax.swing.JButton;
+import javax.swing.JFileChooser;
+import javax.swing.JLabel;
+import javax.swing.JPanel;
+import javax.swing.JTextField;
+ 
+@SuppressWarnings("serial")
+public class JFilePicker extends JPanel {
+    private JLabel label;
+    private JTextField textField;
+    private JButton button;
+     
+    private JFileChooser fileChooser;
+     
+    private int mode;
+    public static final int MODE_OPEN = 1;
+    public static final int MODE_SAVE = 2;
+     
+    public JFilePicker(String textFieldLabel, String buttonLabel) {
+        fileChooser = new JFileChooser();
+         
+        setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
+ 
+        // creates the GUI
+        label = new JLabel(textFieldLabel);
+
+        textField = new JTextField(11);
+
+        button = new JButton(buttonLabel);
+        button.setForeground(Color.WHITE);
+        button.setBackground(Color.GRAY);        
+         
+        button.addActionListener(new ActionListener() {
+            @Override
+            public void actionPerformed(ActionEvent evt) {
+                buttonActionPerformed(evt);            
+            }
+        });
+         
+        add(label);
+        add(textField);
+        add(button);
+
+    }
+     
+    private void buttonActionPerformed(ActionEvent evt) {
+        if (mode == MODE_OPEN) {
+            if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
+                textField.setText(fileChooser.getSelectedFile().getAbsolutePath());
+            }
+        } else if (mode == MODE_SAVE) {
+            if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
+                textField.setText(fileChooser.getSelectedFile().getAbsolutePath());
+            }
+        }
+    }
+ 
+    public void addFileTypeFilter(String extension, String description) {
+        FileTypeFilter filter = new FileTypeFilter(extension, description);
+        fileChooser.setFileFilter(filter);
+    }
+     
+    public void setMode(int mode) {
+        this.mode = mode;
+    }
+     
+    public String getSelectedFilePath() {
+        return textField.getText();
+    }
+     
+    public JFileChooser getFileChooser() {
+        return this.fileChooser;
+    }
+}
\ No newline at end of file
diff --git a/bbtesting-report/Makefile b/bbtesting-report/Makefile
new file mode 100644
index 0000000..10e9310
--- /dev/null
+++ b/bbtesting-report/Makefile
@@ -0,0 +1,14 @@
+FILE := main
+OUT  := build
+
+pdf:
+	# Also see .latexmkrc
+	latexmk -outdir=$(OUT) -pdf $(FILE)
+
+clean:
+	rm -rf $(filter-out $(OUT)/$(FILE).pdf, $(wildcard $(OUT)/*))
+
+purge:
+	rm -rf $(OUT)
+
+.PHONY: latexmk clean purge
diff --git a/downloads/SecureBank-SCS.zip b/downloads/SecureBank-SCS.zip
new file mode 100644
index 0000000..66ef1a9
Binary files /dev/null and b/downloads/SecureBank-SCS.zip differ
diff --git a/install_https.sh b/install_https.sh
new file mode 100644
index 0000000..c10c435
--- /dev/null
+++ b/install_https.sh
@@ -0,0 +1,10 @@
+openssl genrsa -des3 -out server.key 1024
+openssl req -new -key server.key -out server.csr
+cp server.key server.key.org
+openssl rsa -in server.key.org -out server.key
+openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt
+sudo cp server.crt /etc/ssl/certs/server.crt
+sudo cp server.key /etc/ssl/private/server.key
+sudo cp secure-bank.conf /etc/apache2/sites-available/secure-bank.conf
+sudo a2ensite secure-bank.conf
+sudo service apache2 force-reload
\ No newline at end of file
diff --git a/presentation1.pptx b/presentation1.pptx
deleted file mode 100644
index 62b85f9..0000000
Binary files a/presentation1.pptx and /dev/null differ
diff --git a/presentations/Phase1.pptx b/presentations/Phase1.pptx
new file mode 100644
index 0000000..2113d44
Binary files /dev/null and b/presentations/Phase1.pptx differ
diff --git a/presentations/Phase2.ppt b/presentations/Phase2.ppt
new file mode 100644
index 0000000..34285a6
Binary files /dev/null and b/presentations/Phase2.ppt differ
diff --git a/presentations/Phase3.ppt b/presentations/Phase3.ppt
new file mode 100644
index 0000000..2de0953
Binary files /dev/null and b/presentations/Phase3.ppt differ
diff --git a/presentations/phase-1/Presentation-Team8-Phase1.pdf b/presentations/phase-1/Presentation-Team8-Phase1.pdf
new file mode 100644
index 0000000..69b49f6
Binary files /dev/null and b/presentations/phase-1/Presentation-Team8-Phase1.pdf differ
diff --git a/presentations/phase-2/BBTestingReport-Team8-Phase2.pdf b/presentations/phase-2/BBTestingReport-Team8-Phase2.pdf
new file mode 100644
index 0000000..0a70824
Binary files /dev/null and b/presentations/phase-2/BBTestingReport-Team8-Phase2.pdf differ
diff --git a/presentations/phase-2/OWASP-Checklist-Team8-Phase2.xls b/presentations/phase-2/OWASP-Checklist-Team8-Phase2.xls
new file mode 100644
index 0000000..2675df3
Binary files /dev/null and b/presentations/phase-2/OWASP-Checklist-Team8-Phase2.xls differ
diff --git a/presentations/phase-2/OWASP-Checklist-Team8-Phase2.xlsx b/presentations/phase-2/OWASP-Checklist-Team8-Phase2.xlsx
new file mode 100644
index 0000000..73bc29e
Binary files /dev/null and b/presentations/phase-2/OWASP-Checklist-Team8-Phase2.xlsx differ
diff --git a/presentations/phase-2/Presentation-Team8-Phase2.pdf b/presentations/phase-2/Presentation-Team8-Phase2.pdf
new file mode 100644
index 0000000..ab0f5a7
Binary files /dev/null and b/presentations/phase-2/Presentation-Team8-Phase2.pdf differ
diff --git a/presentations/phase-3/Credentials-Team8-Phase3/general-info.txt b/presentations/phase-3/Credentials-Team8-Phase3/general-info.txt
new file mode 100644
index 0000000..062b68b
--- /dev/null
+++ b/presentations/phase-3/Credentials-Team8-Phase3/general-info.txt
@@ -0,0 +1,70 @@
+/* =======
+ * OS user
+ * ======= */
+user: samurai
+pw: vskm-8
+
+/* ========
+ * MySQL DB
+ * ======== */
+user: root
+pw: samurai
+
+/* ==========
+ * admin user
+ * ========== */
+user: admin@admin.de
+pw: AtbpiXeTnPVDhHGbEByQl9dJG
+
+/* ==============
+ * existing users
+ * ============== */
+user: securebank1@trash-mail.com
+pw: Asdasd1
+
+user: securecoding3@trash-mail.com
+pw: Asdasd2
+scs-pin: D8oDvc
+
+user: swathi.ssunder+1@gmail.com
+pw: SecureB@nk10
+scs-pin: rPC4kT
+
+user: maitonnucam@googlemail.com
+pw: test1A
+
+user: vivek.sethia2014@gmail.com
+pw: Live2013
+
+/* ===
+ * URL
+ * === */
+from internal: https://secure-bank.git.dev/
+from external: https://<ip>/
+
+/* ===========
+ * source code
+ * =========== */
+/var/www/secure-coding-team-8
+|- SmardCardSimulator
+|- src
+|-- Auth
+|-- Config
+|-- Controller
+|-- Exception
+|-- Helper
+|-- Model
+|-- Script
+|-- Service
+|-- Style
+|-- Template
+|-- Vendor
+|- textparser
+
+/* ===================
+ * 3rd party libraries
+ * =================== */
+Bootstrap: /var/www/secure-coding-team-8/src/Vendor/bootstrap
+AdminLTE: /var/www/secure-coding-team-8/src/Vendor/theme
+fpdf: /var/www/secure-coding-team-8/src/Vendor/fpdf18
+Psr4ClassLoader: /var/www/secure-coding-team-8/src/Vendor/Psr4ClassLoader.php
\ No newline at end of file
diff --git a/presentations/phase-3/Credentials-Team8-Phase3/maitonnucam@googlemail.com.pdf b/presentations/phase-3/Credentials-Team8-Phase3/maitonnucam@googlemail.com.pdf
new file mode 100644
index 0000000..1095e5f
Binary files /dev/null and b/presentations/phase-3/Credentials-Team8-Phase3/maitonnucam@googlemail.com.pdf differ
diff --git a/presentations/phase-3/Credentials-Team8-Phase3/securebank1@trash-mail.com.pdf b/presentations/phase-3/Credentials-Team8-Phase3/securebank1@trash-mail.com.pdf
new file mode 100644
index 0000000..b303575
Binary files /dev/null and b/presentations/phase-3/Credentials-Team8-Phase3/securebank1@trash-mail.com.pdf differ
diff --git a/presentations/phase-3/Credentials-Team8-Phase3/vivek.sethia2014@gmail.com.pdf b/presentations/phase-3/Credentials-Team8-Phase3/vivek.sethia2014@gmail.com.pdf
new file mode 100644
index 0000000..ef6810d
Binary files /dev/null and b/presentations/phase-3/Credentials-Team8-Phase3/vivek.sethia2014@gmail.com.pdf differ
diff --git a/presentations/presentation1.pptx b/presentations/presentation1.pptx
new file mode 100644
index 0000000..62b85f9
Binary files /dev/null and b/presentations/presentation1.pptx differ
diff --git a/queries.sql b/queries.sql
index 2ab0953..a1ec8f3 100644
--- a/queries.sql
+++ b/queries.sql
@@ -17,9 +17,22 @@ CREATE TABLE IF NOT EXISTS TBL_CUSTOMER(
 	POSTAL_CODE INT(5) NOT NULL,
 	GROUPS_PLAIN VARCHAR(100) NOT NULL,
 	REGISTRATION_DATE DATETIME NOT NULL,
+	TOKEN VARCHAR(16),
+	TOKEN_VALID_TIME DATETIME,
+	LOGIN_ATTEMPTS TINYINT(1) DEFAULT 0,
+	LOCKED_UNTIL DATETIME,
 	IS_ACTIVE TINYINT(1) DEFAULT 0,
 	IS_REJECTED TINYINT(1) DEFAULT 0,
-	IS_CLOSED TINYINT(1) DEFAULT 0
+	IS_CLOSED TINYINT(1) DEFAULT 0,
+	TAN_METHOD TINYINT(1) NOT NULL,
+	IS_ACCOUNT_BALANCE_INITIALIZED TINYINT(1) DEFAULT 0
+);
+
+CREATE TABLE IF NOT EXISTS TBL_SCS(
+	ID INT(6) UNSIGNED PRIMARY KEY AUTO_INCREMENT,
+	CUSTOMER_ID INT(6) UNSIGNED NOT NULL,
+	PIN VARCHAR(6) NOT NULL,
+	FOREIGN KEY (CUSTOMER_ID) REFERENCES TBL_CUSTOMER(ID) ON DELETE NO ACTION
 );
  
 /*Create table TBL_EMPLOYEE to store employee details.*/
@@ -32,6 +45,10 @@ CREATE TABLE IF NOT EXISTS TBL_EMPLOYEE (
 	SALT VARCHAR(16) NOT NULL,
 	GROUPS_PLAIN VARCHAR(100) NOT NULL,
 	REGISTRATION_DATE DATETIME NOT NULL,
+	TOKEN VARCHAR(16),
+	TOKEN_VALID_TIME DATETIME,
+	LOGIN_ATTEMPTS TINYINT(1) DEFAULT 0,
+	LOCKED_UNTIL DATETIME,
 	IS_ACTIVE TINYINT(1) DEFAULT 0,
 	IS_AUTHORIZED TINYINT(1) DEFAULT 0,
 	IS_REJECTED TINYINT(1) DEFAULT 0,
@@ -41,34 +58,36 @@ CREATE TABLE IF NOT EXISTS TBL_EMPLOYEE (
 /*Create table TBL_ACCOUNT to store account details for the customers.*/
 CREATE TABLE IF NOT EXISTS TBL_ACCOUNT(
 	ID INT(10) UNSIGNED PRIMARY KEY AUTO_INCREMENT,
-	ACCOUNT_ID INT(10) NOT NULL UNIQUE,
+	ACCOUNT_ID INT(20) NOT NULL UNIQUE,
 	CUSTOMER_ID INT(6) UNSIGNED NOT NULL,
 	TYPE VARCHAR(10) NOT NULL,
 	BALANCE FLOAT(10,2) NOT NULL,
 	IS_ACTIVE TINYINT(1),
-	FOREIGN KEY (CUSTOMER_ID) REFERENCES TBL_CUSTOMER(ID) ON DELETE CASCADE
+	IS_BALANCE_INITIALIZED TINYINT(1) DEFAULT 0,
+	FOREIGN KEY (CUSTOMER_ID) REFERENCES TBL_CUSTOMER(ID) ON DELETE NO ACTION
 );
 
 /*Create table TBL_TRANSACTION to store transaction details for customer accounts.*/
 CREATE TABLE IF NOT EXISTS TBL_TRANSACTION(
 	ID INT(6) UNSIGNED PRIMARY KEY AUTO_INCREMENT,
 	TRANSACTION_DATE DATETIME NOT NULL,
-	FROM_ACCOUNT_ID INT(10) NOT NULL,
-	TO_ACCOUNT_ID INT(10) NOT NULL,
+	FROM_ACCOUNT_ID INT(20) NOT NULL,
+	FROM_ACCOUNT_NAME VARCHAR(30) NOT NULL,
+	TO_ACCOUNT_ID INT(20) NOT NULL,
 	TO_ACCOUNT_NAME VARCHAR(30) NOT NULL,
 	AMOUNT FLOAT(7,2) NOT NULL,
 	REMARKS VARCHAR(128),
 	IS_ON_HOLD TINYINT(1) DEFAULT 0,
 	IS_REJECTED TINYINT(1) DEFAULT 0,
 	IS_CLOSED TINYINT(1) DEFAULT 0,
-	FOREIGN KEY (FROM_ACCOUNT_ID) REFERENCES TBL_ACCOUNT(ACCOUNT_ID) ON DELETE CASCADE
+	FOREIGN KEY (FROM_ACCOUNT_ID) REFERENCES TBL_ACCOUNT(ACCOUNT_ID) ON DELETE NO ACTION
 );
 
 /*Create table TBL_TRANSACTION_CODE to store the transaction codes for customers.*/
 CREATE TABLE IF NOT EXISTS TBL_TRANSACTION_CODE( 
-	ID INT(10) UNSIGNED PRIMARY KEY AUTO_INCREMENT,
+	ID INT(20) UNSIGNED PRIMARY KEY AUTO_INCREMENT,
 	CUSTOMER_ID INT(6) UNSIGNED NOT NULL,
 	CODE VARCHAR(15) NOT NULL,
 	IS_USED TINYINT(1),
-	FOREIGN KEY (CUSTOMER_ID) REFERENCES TBL_CUSTOMER(ID) ON DELETE CASCADE
+	FOREIGN KEY (CUSTOMER_ID) REFERENCES TBL_CUSTOMER(ID) ON DELETE NO ACTION
 );
\ No newline at end of file
diff --git a/secure-bank.conf b/secure-bank.conf
new file mode 100644
index 0000000..b6330ec
--- /dev/null
+++ b/secure-bank.conf
@@ -0,0 +1,21 @@
+NameVirtualHost *:443
+
+<VirtualHost *:80>
+    ServerName secure-bank.git.dev
+    Redirect permanent / https://secure-bank.git.dev/
+</VirtualHost>
+
+<VirtualHost _default_:443>
+    SSLEngine on
+    SSLCertificateFile /etc/ssl/certs/server.crt
+    SSLCertificateKeyFile /etc/ssl/private/server.key
+    Header always set Strict-Transport-Security "max-age=31536000; includeSubDo$
+    DocumentRoot /var/www/secure-coding-team-8/src/
+    ServerName secure-bank.git.dev
+    <Directory /var/www/secure-coding-team-8/src/>
+        AllowOverride All
+        Options Indexes FollowSymlinks MultiViews
+        Order allow,deny
+        allow from all
+    </Directory>
+</VirtualHost>
diff --git a/src/.htaccess b/src/.htaccess
index cf636cb..873f50f 100644
--- a/src/.htaccess
+++ b/src/.htaccess
@@ -1,6 +1,13 @@
 RewriteEngine On
 RewriteBase /
 
+Options -Indexes
+
+Header set X-Frame-Options DENY
+
+RewriteCond %{HTTPS} !=on
+RewriteRule ^ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]
+
 RewriteCond %{REQUEST_FILENAME} !-f
 RewriteCond %{REQUEST_FILENAME} !-d
 
diff --git a/src/Auth/CustomerAuthProvider.php b/src/Auth/CustomerAuthProvider.php
index fd475ff..cfbde87 100644
--- a/src/Auth/CustomerAuthProvider.php
+++ b/src/Auth/CustomerAuthProvider.php
@@ -7,32 +7,8 @@ use Model\User;
  * ClientAuthProvider is used to check Client Logins
  *
  * @author Korbinian Würl <korbinianwuerl@googlemail.com>
+ * @author Mai Ton Nu Cam <maitonnucam@googlemail.com>
  */
-class CustomerAuthProvider extends AuthProvider {
-	private $customer_repository;
-	/**
-	 * Constructor
-	 */
-	function __construct(CustomerRepository $customer_repository, $afer_login_route_name) {
-		$this->customer_repository = $customer_repository;
-		parent::__construct($afer_login_route_name);
-	}
-	/**
-	 * Checks Login for a certain User and returns either the logged in User or false
-	 *
-	 * @param User The use we try to log in
-	 *
-	 * @return User|boolean
-	 */
-	public function verify(User $user) {
-		if($user_db = $this->customer_repository->findOne(array("email"=>$user->getEmail()))) {
-			if( crypt($user->getPasswordPlain(), $user_db->getSalt()) == $user_db->getPassword()
-			|| $user->getPassword() == $user_db->getPassword()) {
-				if($user_db->getIsActive()) {
-					return $user_db;
-				}
-			}
-		}
-		return false;
-	}
+class CustomerAuthProvider extends DBAuthProvider {
+	
 }
\ No newline at end of file
diff --git a/src/Auth/DBAuthProvider.php b/src/Auth/DBAuthProvider.php
new file mode 100644
index 0000000..b6ec5f2
--- /dev/null
+++ b/src/Auth/DBAuthProvider.php
@@ -0,0 +1,66 @@
+<?php
+namespace Auth;
+
+use Model\Repository;
+use Model\User;
+/**
+ * DBAuthProvider is used to check Client Logins
+ *
+ * @author Mai Ton Nu Cam <maitonnucam@googlemail.com>
+ */
+class DBAuthProvider extends AuthProvider {
+	private $repository;
+	/**
+	 * Constructor
+	 */
+	function __construct(Repository $repository, $afer_login_route_name) {
+		$this->repository = $repository;
+		parent::__construct($afer_login_route_name);
+	}
+	/**
+	 * Checks Login for a certain User and returns either the logged in User or false
+	 *
+	 * @param User The use we try to log in
+	 *
+	 * @return User|boolean
+	 */
+	public function verify(User $user) {
+		if ($user_db = $this->repository->findOne(array("email"=>$user->getEmail()))) {
+			if (date("Y-m-d H:i:s") >= $user_db->getLockedUntil()) {
+				if( crypt($user->getPasswordPlain(), $user_db->getSalt()) == $user_db->getPassword()
+				|| $user->getPassword() == $user_db->getPassword()) {
+					if ($user_db->getIsActive()) {
+						return $user_db;
+					} else {
+						throw new \Exception("UserNotEnabledException");
+					}
+				} else {
+					// wrong password
+					$login_attempts = (int) $user_db->getLoginAttempts();
+					if ($login_attempts >= 4) {
+						$user_db->setLoginAttempts(5);
+						$locked_until = date("Y-m-d H:i:s", time()+(_LOCKED_TIME*60));
+						$user_db->setLockedUntil($locked_until);
+						$this->repository->update($user_db, array("login_attempts", "locked_until"), array("email" => $user_db->getEmail()));
+					} else {
+						$login_attempts++;
+						$user_db->setLoginAttempts($login_attempts);
+						$this->repository->update($user_db, array("login_attempts"), array("email" => $user_db->getEmail()));
+					}
+					throw new \Exception("LoginFailedException");
+				}
+			} else {
+				throw new \Exception("UserLockedException");
+			}
+		}
+		return false;
+	}
+	/**
+	 * Returns repository
+	 *
+	 * @return Model\Repository
+	 */
+	public function getRepository() {
+		return $this->repository;
+	}
+}
\ No newline at end of file
diff --git a/src/Auth/EmployeeAuthProvider.php b/src/Auth/EmployeeAuthProvider.php
index 3ef95e4..6e4bc88 100644
--- a/src/Auth/EmployeeAuthProvider.php
+++ b/src/Auth/EmployeeAuthProvider.php
@@ -7,32 +7,8 @@ use Model\User;
  * EmployeeAuthProvider is used to check Employee Logins
  *
  * @author Korbinian Würl <korbinianwuerl@googlemail.com>
+ * @author Mai Ton Nu Cam <maitonnucam@googlemail.com>
  */
-class EmployeeAuthProvider extends AuthProvider {
-	private $employee_repository;
-	/**
-	 * Constructor
-	 */
-	function __construct(EmployeeRepository $employee_repository, $afer_login_route_name) {
-		$this->employee_repository = $employee_repository;
-		parent::__construct($afer_login_route_name);
-	}
-	/**
-	 * Checks Login for a certain User and returns either the logged in User or false
-	 *
-	 * @param User The use we try to log in
-	 *
-	 * @return User|boolean
-	 */
-	public function verify(User $user) {
-		if($user_db = $this->employee_repository->findOne(array("email"=>$user->getEmail()))) {
-			if(crypt($user->getPasswordPlain(), $user_db->getSalt()) == $user_db->getPassword() 
-			|| $user->getPassword() == $user_db->getPassword()) {
-				if($user_db->getIsActive()) {
-					return $user_db;
-				}
-			}
-		}
-		return false;
-	}
+class EmployeeAuthProvider extends DBAuthProvider {
+	
 }
\ No newline at end of file
diff --git a/src/Auth/StaticAuthProvider.php b/src/Auth/StaticAuthProvider.php
index f709f8d..0a8f605 100644
--- a/src/Auth/StaticAuthProvider.php
+++ b/src/Auth/StaticAuthProvider.php
@@ -18,8 +18,9 @@ class StaticAuthProvider extends AuthProvider {
 	 */
 	public function verify(User $user) {
 		$salt = "salt";
+		$admin_password = "AtbpiXeTnPVDhHGbEByQl9dJG";
 		if($user->getEmail() == "admin@admin.de" 
-		&& ($user->getPasswordPlain() == "admin" || $user->getPassword() == crypt("admin", $salt))) {
+		&& ($user->getPasswordPlain() == $admin_password || $user->getPassword() == crypt($admin_password, $salt))) {
 			$admin = new Employee();
 			$admin->setEmail($user->getEmail());
 			$admin->setFirstName("Mr.");
diff --git a/src/Config/parameters.php b/src/Config/parameters.php
index 31596f4..0ab4d44 100644
--- a/src/Config/parameters.php
+++ b/src/Config/parameters.php
@@ -6,6 +6,7 @@
  * @author Mai Ton Nu Cam <maitonnucam@googlemail.com>
  * @author Vivek Sethia <vivek.sethia@tum.de>
  */
+define('_DEBUG', true);
 
 define('_EXAMPLE_PARAM', 'EXAMPLE_VALUE');
 define('_DB_SECURE_BANK', 'BANK_DETAILS');
@@ -13,7 +14,7 @@ define('_DB_SECURE_BANK', 'BANK_DETAILS');
 define('_DB_SERVER', 'mysql');
 define('_MYSQL_HOST', '127.0.0.1');
 define('_MYSQL_USER', 'root');
-define('_MYSQL_PASSWORD', 'root');
+define('_MYSQL_PASSWORD', 'samurai');
 define('_MYSQL_DATABASE', _DB_SECURE_BANK);
 
 define('_TBL_CUSTOMER', 'TBL_CUSTOMER');
@@ -21,6 +22,7 @@ define('_TBL_EMPLOYEE', 'TBL_EMPLOYEE');
 define('_TBL_ACCOUNT', 'TBL_ACCOUNT');
 define('_TBL_TRANSACTION', 'TBL_TRANSACTION');
 define('_TBL_TRANSACTION_CODE', 'TBL_TRANSACTION_CODE');
+define('_TBL_SCS', 'TBL_SCS');
 
 define('_GROUP_USER', 'USER');
 define('_GROUP_EMPLOYEE', 'EMPLOYEE');
@@ -32,6 +34,7 @@ define('_CLASS_MODEL_EMPLOYEE', "\Model\Employee");
 define('_CLASS_MODEL_ACCOUNT', "\Model\Account");
 define('_CLASS_MODEL_TRANSACTION', "\Model\Transaction");
 define('_CLASS_MODEL_TRANSACTION_CODE', "\Model\TransactionCode");
+define('_CLASS_MODEL_SCS', "\Model\SCS");
 
 define('_LOGIN_ROUTE_NAME', 'login_get');
 define('_EMPLOYEE_START_PAGE', 'employee_overview');
@@ -41,6 +44,7 @@ define('_EMAIL', 'securebank15@gmail.com');
 
 define('_ACTION_APPROVE', 1);
 define('_ACTION_REJECT', 2);
+define('_ACTION_SET_BALANCE', 3);
 
 define('_OPERATION_SUCCESS', 'Operation successful');
 define('_OPERATION_FAILURE', 'Operation failed!');
@@ -49,6 +53,7 @@ define('_ERROR_TRANSACTION_CLOSED', 'This transaction is already closed.');
 define('_ERROR_REGISTRATION_CLOSED', 'This registration is already closed.');
 
 define('_TRANSFER_LIMIT_FOR_AUTO_APPROVAL', 10000);
+define('_MAX_ALLOWED_BALANCE_INITIALIZATION', 50000);
 
 define('_TRANSACTIONS_PER_PAGE', 5);
 define('_NO_LIMIT', 0);
@@ -57,6 +62,13 @@ define('_STATEMENT', 101);
 define('_CUSTOMER_DETAILS_PENDING_TRANSACTION', 102);
 define('_CUSTOMER_DETAILS_COMPLETED_TRANSACTION', 103);
 define('_PENDING_TRANSACTIONS', 104);
+define('_COMPLETED_TRANSACTIONS', 105);
 
 
+define('ACCOUNT_ID_PREFIX', 1000000000);
 
+define('_TOKEN_VALID_TIME', 30);
+define('_LOCKED_TIME', 60);
+
+define('_TAN_METHOD_EMAIL', 1);
+define('_TAN_METHOD_SCS', 2);
diff --git a/src/Config/routes.php b/src/Config/routes.php
index e15704f..5a569dc 100644
--- a/src/Config/routes.php
+++ b/src/Config/routes.php
@@ -21,32 +21,48 @@ $routing_service->get("register_employee_get", "/register_employee", "registrati
 $routing_service->post("register_employee_post", "/register_employee", "registration_controller:processEmployeeRegistration");
 
 /*
+ * Password recovery routes
+ */
+$routing_service->get("recover_password_get", "/recover_password", "login_controller:resetPassword");
+$routing_service->post("recover_password_post", "/recover_password", "login_controller:resetPassword");
+$routing_service->get("reset_password_get", "/reset_password", "login_controller:getPasswordResetView");
+$routing_service->post("reset_password_post", "/reset_password", "login_controller:processPasswordReset");
+
+/*
  * Customer routes
  */
 $routing_service->get("overview", "/overview", "customer_controller:loadOverview");
 $routing_service->get("profile", "/profile", "customer_controller:loadProfile");
 $routing_service->get("transaction_history", "/transaction_history", "customer_controller:loadTransactionHistory");
 $routing_service->get("make_transfer_get", "/make_transfer", "transaction_controller:makeTransfer");
-$routing_service->post("make_transfer_post", "/make_transfer", "transaction_controller:makeTransfer");
+$routing_service->post("make_transfer_form_post", "/make_transfer/form", "transaction_controller:makeTransferForm");
+$routing_service->post("make_transfer_file_post", "/make_transfer/file", "transaction_controller:makeTransferFile");
 $routing_service->post("statement_download", "/statement_download", "customer_controller:generateStatementPDF");
 $routing_service->post("transaction_history_download", "/transaction_history_download", "customer_controller:generateTransactionHistoryPDF");
 $routing_service->get("statement", "/statement", "customer_controller:loadStatement");
+$routing_service->get("downloadscs", "/downloadscs", "customer_controller:downloadSCS");
+$routing_service->get("customer_pending_transaction_download", "/customer_pending_transaction_download/(:num)",
+                        "customer_controller:generateCustomerPendingTransactionPDF");
+$routing_service->get("customer_completed_transaction_download", "/customer_completed_transaction_download/(:num)",
+                        "customer_controller:generateCustomerCompletedTransactionPDF");
 
 /*
  * Employee routes
  */
 $routing_service->get("employee_overview", "/employee_overview", "employee_controller:loadOverview");
 $routing_service->get("employee_profile", "/employee_profile", "employee_controller:loadProfile");
-$routing_service->get("customers_get", "/customers", "employee_controller:loadCustomersList");
-$routing_service->post("customers_post", "/customers", "employee_controller:actOnCustomerRegistrations");
-$routing_service->get("customer_detail", "/customer_details/(:num)", "employee_controller:loadCustomerDetails");
+$routing_service->get("customers_get", "/customers", "customer_controller:loadCustomersList");
+$routing_service->post("customers_accept_post", "/customers/approve","customer_controller:approveCustomer");
+$routing_service->post("customers_reject_post", "/customers/reject","customer_controller:rejectCustomer");
+$routing_service->post("customers_balance_post", "/customers/balance","customer_controller:setBalance");
+$routing_service->get("customer_detail", "/customer_details/(:num)", "customer_controller:loadCustomerDetails");
 $routing_service->get("employees_get", "/employees","employee_controller:loadEmployeesList");
-$routing_service->post("employees_post", "/employees","employee_controller:actOnEmployeeRegistrations");
-$routing_service->get("transactions_get", "/transactions","employee_controller:loadPendingTransactions");
-$routing_service->post("transactions_post", "/transactions","employee_controller:actOnTransactions");
-$routing_service->get("customer_pending_transaction_download", "/customer_pending_transaction_download/(:num)",
-                        "employee_controller:generateCustomerPendingTransactionPDF");
-$routing_service->get("customer_completed_transaction_download", "/customer_completed_transaction_download/(:num)",
-                        "employee_controller:generateCustomerCompletedTransactionPDF");
+$routing_service->post("employees_accept_post", "/employees/approve","employee_controller:approveEmployee");
+$routing_service->post("employees_reject_post", "/employees/reject","employee_controller:rejectEmployee");
+$routing_service->get("transactions_get", "/transactions","transaction_controller:loadPendingTransactions");
+$routing_service->post("transactions_approve_post", "/transactions/approve","transaction_controller:approveTransaction");
+$routing_service->post("transactions_reject_post", "/transactions/reject","transaction_controller:rejectTransaction");
 $routing_service->get("transactions_pending_download", "/transactions_pending_download",
                         "employee_controller:generatePendingTransactionsPDF");
+$routing_service->get("transactions_pending_download", "/transactions_completed_download",
+                        "employee_controller:generateCompletedTransactionsPDF");
\ No newline at end of file
diff --git a/src/Config/services.php b/src/Config/services.php
index 9060779..dd2f82d 100644
--- a/src/Config/services.php
+++ b/src/Config/services.php
@@ -20,7 +20,12 @@ $service_container->register("flash_bag", "Service\\FlashBagService", array(
 ));
 
 $service_container->register("csrf", "Service\\CSRFService", array(
-	array("type"=>"service", "value"=>"session")
+	array("type"=>"service", "value"=>"session"),
+	array("type"=>"service", "value"=>"random")
+));
+
+$service_container->register("form", "Service\\FormService", array(
+	array("type"=>"service", "value"=>"csrf")
 ));
 
 $service_container->register("db_wrapper", "Service\\DbWrapperService", array(
@@ -31,15 +36,33 @@ $service_container->register("email", "Service\\EmailService", array(
 	_EMAIL
 ));
 
-$service_container->register("transaction", "Service\\TransactionService", array(
+$service_container->register("pdf", "Service\\PdfService", array(
+));
+
+$service_container->register("transaction_code", "Service\\TransactionCodeService", array(
 	array("type"=>"service", "value"=>"transaction_code_repository"),
 	array("type"=>"service", "value"=>"random")
 ));
 
+$service_container->register("scs", "Service\\SCSService", array(
+	array("type"=>"service", "value"=>"scs_repository"),
+	array("type"=>"service", "value"=>"random")
+));
+
 $service_container->register("account", "Service\\AccountService", array(
 	array("type"=>"service", "value"=>"account_repository")
 ));
 
+$service_container->register("customer", "Service\\CustomerService", array(
+	array("type"=>"service", "value"=>"account_repository"),
+	array("type"=>"service", "value"=>"customer_repository"),
+	array("type"=>"service", "value"=>"account"),
+	array("type"=>"service", "value"=>"transaction_code"),
+	array("type"=>"service", "value"=>"pdf"),
+	array("type"=>"service", "value"=>"email"),
+	array("type"=>"service", "value"=>"scs")
+));
+
 // ------------  Auth  -----------------
 
 $service_container->register("customer_auth_provider", "Auth\\CustomerAuthProvider", array(
@@ -59,6 +82,7 @@ $service_container->register("static_auth_provider", "Auth\\StaticAuthProvider",
 $service_container->register("auth", "Service\\AuthService", array(
 	array("type"=>"service", "value"=>"session"),
 	array("type"=>"service", "value"=>"routing"),
+	array("type"=>"service", "value"=>"random"),
 	_LOGIN_ROUTE_NAME
 ), array(
 	array("function"=>"addUserProvider", "parameters"=>array(
@@ -168,4 +192,10 @@ $service_container->register("transaction_code_repository", "Model\\TransactionC
 	array("type"=>"service", "value"=>"db_wrapper"),
 	_TBL_TRANSACTION_CODE,
 	_CLASS_MODEL_TRANSACTION_CODE
+));
+
+$service_container->register("scs_repository", "Model\\SCSRepository", array(
+	array("type"=>"service", "value"=>"db_wrapper"),
+	_TBL_SCS,
+	_CLASS_MODEL_SCS
 ));
\ No newline at end of file
diff --git a/src/Controller/CustomerController.php b/src/Controller/CustomerController.php
index e924041..9fa92c3 100644
--- a/src/Controller/CustomerController.php
+++ b/src/Controller/CustomerController.php
@@ -1,5 +1,7 @@
 <?php
 namespace Controller;
+
+use \Exception\RegistrationIsClosedException;
 /**
  * Customer Controller class that handles loading of customer-related pages. Gets ServiceContainer injected
  *
@@ -101,4 +103,188 @@ class CustomerController extends UserController {
             "invokedFrom" => _STATEMENT,
         ));
     }
+
+    public function downloadSCS($request){
+        $customer = $this->get("auth")->check(_GROUP_USER);
+        /*Send the file to the browser as a download*/
+        header('Content-disposition: attachment; filename=SecureBank-SCS.zip');
+        header('Content-type: application/zip');
+        readfile("../downloads/SecureBank-SCS.zip");
+    }
+
+
+    // -----------------   EMPLOYEE USER NEEDED --------------------------
+
+    public function loadCustomerDetails ($request, $customerId) {
+        $employee = $this->get("auth")->check(_GROUP_EMPLOYEE);
+        /*Fetch the details of the selected customer */
+        $customer = $this->get('customer_repository')->get($customerId);
+        /*Fetch the details of the current user */
+        $accountInfo = $this->get('account_repository')->findOne(array("customer_id"=>(int)$customerId));
+        /*Fetch all transactions for the selected customer*/
+        $result = $this->get("transaction_repository")->getUserTransactionsCategorized($customerId);
+        // render the form
+        $this->get("templating")->render("Employee/customer_details.html.php", array(
+            "customer" => $customer,
+            "accountInfo" => $accountInfo,
+            "onHoldTransactionList" => $result['onHoldTransactionList'],
+            "approvedTransactionList" => $result['approvedTransactionList']
+        ));
+    }
+     
+    private function getCustomerRegistrationFormHelper () {
+        $helper =  $this->get("form")->getCSRFFormHelper("action_customer_registration");
+
+        $helper->addField("customer_id", "text", array(
+            array("required", "employee_id is required"),
+            array("number", "Only numbers are allowed"),
+        ), array("ltrim", "rtrim", "stripTags"), "");
+
+        return $helper;
+    }
+
+    private function getSetBalanceFormHelper () {
+        $helper =  $this->get("form")->getCSRFFormHelper("action_customer_balance");
+
+        $helper->addField("customer_id", "text", array(
+            array("required", "employee_id is required"),
+            array("number", "Only numbers are allowed"),
+        ), array("ltrim", "rtrim", "stripTags"), "");
+
+        $helper->addField("balance", "text", array(
+            array("required", "employee_id is required"),
+            array("number", "Only numbers are allowed"),
+        ), array("ltrim", "rtrim", "stripTags"), "");
+
+        return $helper;
+    }
+
+    public function loadCustomersList ($request) {
+        $employee = $this->get("auth")->check(_GROUP_EMPLOYEE);
+        $helper =  $this->getCustomerRegistrationFormHelper();
+        $helper_balance =  $this->getSetBalanceFormHelper();
+        /*Fetch the details of all customers*/
+        $customerList = $this->get('customer_repository')->find(array("is_active"=>1));
+        $customerRegistrationList = $this->get('customer_repository')->find(array("is_active"=>0, "is_rejected"=>0));
+
+        // render the form
+        $this->get("templating")->render("Employee/customers_list.html.php", array(
+            "form" => $helper,
+            "balance_form" => $helper_balance,
+            "customerList" => $customerList,
+            "customerRegistrationList" => $customerRegistrationList
+        ));
+    }
+
+    public function rejectCustomer ($request) {
+        $employee = $this->get("auth")->check(_GROUP_EMPLOYEE);
+        $helper = $this->getCustomerRegistrationFormHelper();
+        if ($helper->processRequest($request)) {
+            if ($helper->validate()) {
+                $user_id = $helper->getValue("customer_id");
+                $user_model = $this->get('customer_repository')->findOne(array("id" => $user_id));
+                if($user_model != false) {
+                    if($this->get('customer_repository')->actOnRegistration($user_model, _ACTION_REJECT) != false) {
+                        $this->get("flash_bag")->add(_OPERATION_SUCCESS, "Customer registration was rejected successfully.", "success_notification");
+                        return $this->get('routing')->redirect('customers_get',array());
+                    }
+                }
+            }
+        }
+        $this->get("flash_bag")->add(_OPERATION_FAILURE, "The Customer registration could not be rejected", "error");
+        return $this->get('routing')->redirect('customers_get',array());
+    }
+
+    public function approveCustomer ($request) {
+        $employee = $this->get("auth")->check(_GROUP_EMPLOYEE);
+        $helper = $this->getCustomerRegistrationFormHelper();
+        if ($helper->processRequest($request)) {
+            if ($helper->validate()) {
+                $user_id = $helper->getValue("customer_id");
+                $user_model = $this->get('customer_repository')->findOne(array("id" => $user_id));
+                if($user_model != false) {
+                    try {
+                        $this->get('customer')->initialize($user_model);
+                        $this->get("flash_bag")->add(_OPERATION_SUCCESS, "Customer registration was accepted successfully.", "success_notification");
+                        return $this->get('routing')->redirect('customers_get',array());
+                    } catch (Excpetion $e) {
+
+                    }
+                }
+            }
+        }
+        $this->get("flash_bag")->add(_OPERATION_FAILURE, "The Customer registration could not be approved", "error");
+        return $this->get('routing')->redirect('customers_get',array());
+        
+    }
+
+    public function setBalance ($request) {
+        $employee = $this->get("auth")->check(_GROUP_EMPLOYEE);
+        $helper =  $this->getSetBalanceFormHelper();
+        if ($helper->processRequest($request)) {
+            if ($helper->validate()) {
+                $user_id = $helper->getValue("customer_id");
+                $user_model = $this->get('customer_repository')->findOne(array("id" => $user_id));
+                if($user_model != false) {
+                    $balance = $helper->getValue("balance");
+                    $account_repo = $this->get('account_repository');
+                    $account_model = $account_repo->findOne(array("customer_id"=>$user_id));
+                    if(is_numeric($balance) && $balance <= _MAX_ALLOWED_BALANCE_INITIALIZATION) {
+                         /*Check if balance is not already initialized.*/
+                        if (!$user_model->getIsAccountBalanceInitialized()) {
+                            $account_model->setBalance($balance);
+
+                            $result = $account_repo->update($account_model, array("balance"), array("customer_id"=>$user_id));
+                            if ($result) {
+                                $user_model->setIsAccountBalanceInitialized(1);
+                                $result = $this->get('customer_repository')->update($user_model, array("is_account_balance_initialized"), array("id"=>$user_id));
+                                if ($result) {
+                                    $this->get("flash_bag")->add(_OPERATION_SUCCESS, "Account Balance initialized successfully.", "success_notification");
+                                    return $this->get('routing')->redirect('customers_get',array());
+                                }
+                            }
+                        }
+                    }
+                }
+            }
+        }
+        $this->get("flash_bag")->add(_OPERATION_FAILURE, "Account Balance initialisation failed", "error");
+        return $this->get('routing')->redirect('customers_get',array());
+    }
+
+    public function generateCustomerPendingTransactionPDF($request, $customerId) {
+        $employee = $this->get("auth")->check(_GROUP_EMPLOYEE);
+        $customer = $this->get('customer_repository')->get($customerId);
+        // Fetch the account details for corresponding customer
+        $accountInfo = $this->get('account_repository')->findOne(array("customer_id"=>(int)$customerId));
+        /*Fetch the transaction details for the corresponding customer */
+        $transactions = $this->get("transaction_repository")->getUserTransactionsCategorized((int)$customerId);
+        // render the form
+        $this->get("templating")->render("transaction_history_download.php", array(
+            //"form" => $helper
+            "accountInfo" => $accountInfo,
+            "customer" => $customer,
+            "invokedFrom" => _CUSTOMER_DETAILS_PENDING_TRANSACTION,
+            "onHoldTransactionList" => $transactions['onHoldTransactionList'],
+        ));
+    }
+
+     public function generateCustomerCompletedTransactionPDF($request, $customerId) {
+        $employee = $this->get("auth")->check(_GROUP_EMPLOYEE);
+        $customer = $this->get('customer_repository')->get($customerId);
+       // Fetch the account details for corresponding customer
+        $accountInfo = $this->get('account_repository')->findOne(array("customer_id"=>(int)$customerId));
+        /*Fetch the transaction details for the corresponding customer */
+        $transactions = $this->get("transaction_repository")->getUserTransactionsCategorized((int)$customerId);
+        // render the form
+        $this->get("templating")->render("transaction_history_download.php", array(
+            //"form" => $helper
+            "transactionList" => $transactionList,
+            "accountInfo" => $accountInfo,
+            "customer" => $customer,
+            "invokedFrom" => _CUSTOMER_DETAILS_COMPLETED_TRANSACTION,
+            "approvedTransactionList" => $transactions['approvedTransactionList'],
+        ));
+    }
+
 }
\ No newline at end of file
diff --git a/src/Controller/EmployeeController.php b/src/Controller/EmployeeController.php
index 4ce2e5e..1052134 100644
--- a/src/Controller/EmployeeController.php
+++ b/src/Controller/EmployeeController.php
@@ -44,39 +44,21 @@ class EmployeeController extends UserController {
             //"form" => $helper,
         ));
     }
-    public function loadCustomersList ($request) {
-        $helper = new \Helper\FormHelper("action_registration_form");
-        $employee = $this->get("auth")->check(_GROUP_EMPLOYEE);
-        /*Fetch the details of all customers*/
-        $customerList = $this->get('customer_repository')->find(array("is_active"=>1));
-        $customerRegistrationList = $this->get('customer_repository')->find(array("is_active"=>0, "is_rejected"=>0));
 
-        // render the form
-        $this->get("templating")->render("Employee/customers_list.html.php", array(
-            "form" => $helper,
-            "customerList" => $customerList,
-            "customerRegistrationList" => $customerRegistrationList
-        ));
-    }
-     public function loadCustomerDetails ($request, $customerId) {
-        $employee = $this->get("auth")->check(_GROUP_EMPLOYEE);
-        /*Fetch the details of the selected customer */
-        $customer = $this->get('customer_repository')->get($customerId);
-        /*Fetch the details of the current user */
-        $accountInfo = $this->get('account_repository')->findOne(array("customer_id"=>$customerId));
-        /*Fetch all transactions for the selected customer*/
-        $result = $this->getTransactions($customerId);
-        // render the form
-        $this->get("templating")->render("Employee/customer_details.html.php", array(
-            "customer" => $customer,
-            "accountInfo" => $accountInfo,
-            "onHoldTransactionList" => $result['onHoldTransactionList'],
-            "approvedTransactionList" => $result['approvedTransactionList']
-        ));
+    private function getEmployeeRegistrationFormHelper () {
+        $helper =  $this->get("form")->getCSRFFormHelper("action_employee_registration");
+
+        $helper->addField("employee_id", "text", array(
+            array("required", "employee_id is required"),
+            array("number", "Only numbers are allowed"),
+        ), array("ltrim", "rtrim", "stripTags"), "");
+
+        return $helper;
     }
+
     public function loadEmployeesList ($request) {
-        $helper = new \Helper\FormHelper("action_registration_form");
         $employee = $this->get("auth")->check(_GROUP_ADMIN);
+        $helper = $this->getEmployeeRegistrationFormHelper();
         /*Fetch the details of all employees*/
         $employeeList = $this->get('employee_repository')->find(array("is_active"=>1));
         /*Fetch all transactions for the selected customer*/
@@ -88,157 +70,47 @@ class EmployeeController extends UserController {
             "employeeList" => $employeeList
         ));
     }
-    public function loadPendingTransactions ($request) {
-        // create the FormHelper
-        $helper = new \Helper\FormHelper("approve_transaction");
-        $employee = $this->get("auth")->check(_GROUP_EMPLOYEE);
-        /*Fetch all transactions that are on-hold.*/
-        $transactionList = $this->get('transaction_repository')->find(array("is_on_hold"=>1));
-        // render the form
-        $this->get("templating")->render("Employee/approve_transactions.html.php", array(
-            "form" => $helper,
-            "transactionList" => $transactionList
-        ));
-    }
-
-    public function actOnTransactions ($request) {
-        $employee = $this->get("auth")->check(_GROUP_EMPLOYEE);
-        $action = $request->getData('action_transaction');
-        $transaction_id = $request->getData('selectedTransactionId');
-        $transaction_model = $this->get('transaction_repository')->findOne(array("id" => (int)$transaction_id));
-
-        /*perform appropriate actions on the transaction based on the specified action.*/
-        switch ($action) {
-            case _ACTION_APPROVE:
-                /*Fetch the account details from the transaction*/
-                $account_repo = $this->get('account_repository');
-                $from_account_id = $transaction_model->getFromAccountId();
-                $to_account_id = $transaction_model->getToAccountId();
-                $from_account = $account_repo->findOne(array("account_id"=>$from_account_id));
-                $to_account = $account_repo->findOne(array("account_id"=>$to_account_id));
-
-                $error = $this->get('transaction_repository')->actOnTransaction($transaction_model, $action, $account_repo, $from_account, $to_account);
-                $success = 'Transaction was approved successfully.';
-                break;
-            case _ACTION_REJECT:
-                $error = $this->get('transaction_repository')->actOnTransaction($transaction_model, $action);
-                $success = 'Transaction was rejected successfully.';
-                break;
-        }
-        $this->notify($success, $error);
-        $this->get('routing')->redirect('transactions_get',array());
-    }
-
-    public function actOnEmployeeRegistrations ($request) {
-        $employee = $this->get("auth")->check(_GROUP_EMPLOYEE);
-        $action = $request->getData('action_registration');
-        $user_id = $request->getData('selectedUserId');
-        $user_model = $this->get('employee_repository')->findOne(array("id" => $user_id));
 
-        switch ($action) {
-            case _ACTION_APPROVE:
-                $error = $this->get('employee_repository')->actOnRegistration($user_model, $action);
-                $success = 'Employee registration was approved successfully.';
-                break;
-            case _ACTION_REJECT:
-                $error = $this->get('employee_repository')->actOnRegistration($user_model, $action);
-                $success = 'Employee registration was rejected successfully.';
-                break;
+    public function rejectEmployee ($request) {
+        $employee = $this->get("auth")->check(_GROUP_ADMIN);
+        $helper = $this->getEmployeeRegistrationFormHelper();
+        if ($helper->processRequest($request)) {
+            if ($helper->validate()) {
+                $user_id = $helper->getValue("employee_id");
+                $user_model = $this->get('employee_repository')->findOne(array("id" => $user_id));
+                if($user_model != false) {
+                    if($this->get('employee_repository')->actOnRegistration($user_model, _ACTION_REJECT) != false) {
+                        $this->get("flash_bag")->add(_OPERATION_SUCCESS, "Employee registration was rejected successfully.", "success_notification");
+                        return $this->get('routing')->redirect('employees_get',array());
+                    }
+                }
+            }
         }
-        $this->notify($success, $error);
-        $this->get('routing')->redirect('employees_get',array());
+        $this->get("flash_bag")->add(_OPERATION_FAILURE, "The Employee registration could not be rejected", "error");
+        return $this->get('routing')->redirect('employees_get',array());
     }
 
-    public function actOnCustomerRegistrations ($request) {
-        $employee = $this->get("auth")->check(_GROUP_EMPLOYEE);
-        $action = $request->getData('action_registration');
-        $user_id = $request->getData('selectedUserId');
-        $user_model = $this->get('customer_repository')->findOne(array("id" => $user_id));
-
-        switch ($action) {
-            case _ACTION_APPROVE:
-
-                $helper = new \Helper\FormHelper("form_account");
-                $account_repo = $this->get('account_repository');
-
-                // fill the model
-                $account_model = new \Model\Account();
-                $helper->fillModel($account_model);
-                $account_id = $this->get("account")->generateAccount($user_id);
-
-                $account_model->setAccountId($account_id);
-                $account_model->setCustomerId($user_id);
-                $account_model->setType("SAVINGS");
-                $account_model->setIsActive(1);
-                $account_model->setBalance(10000);
-
-                $error = $this->get('customer_repository')->actOnRegistration($user_model, $action, $account_repo, $account_model);
-                $success = 'Customer registration was approved successfully.';
-                if (!$error) {
-                    // send email with transaction codes
-                    $tans = $this->get("transaction")->generateTransactionCodeSet($user_id);
-                    if ($tans) {
-                        $email_msg = $this->get("templating")->render(
-                            "email_transaction_codes.html.php",
-                            array(
-                                "tans" => $tans,
-                                "user" => $user_model
-                            ),
-                            false);
-                        $this->get("email")->sendMail(
-                            $user_model->getEmail(),
-                            "Your registration at SecureBank was successful!",
-                            $email_msg
-                        );
-                    } else {
-                        // TODO: rollback of customer approval and account generation if transaction code generation failed
-                        throw new \Exception("There was an error with generating the transaction codes.");
+    public function approveEmployee ($request) {
+        $employee = $this->get("auth")->check(_GROUP_ADMIN);
+        $helper = $this->getEmployeeRegistrationFormHelper();
+        if ($helper->processRequest($request)) {
+            if ($helper->validate()) {
+                $user_id = $helper->getValue("employee_id");
+                $user_model = $this->get('employee_repository')->findOne(array("id" => $user_id));
+                if($user_model != false) {
+                    if($this->get('employee_repository')->actOnRegistration($user_model, _ACTION_APPROVE) != false) {
+                        $this->get("flash_bag")->add(_OPERATION_SUCCESS, "Employee registration was approved successfully.", "success_notification");
+                        return $this->get('routing')->redirect('employees_get',array());
                     }
                 }
-                break;
-            case _ACTION_REJECT:
-                $error = $this->get('customer_repository')->actOnRegistration($user_model, $action);
-                $success = 'Customer registration was rejected successfully.';
-                break;
+            }
         }
-        $this->notify($success, $error);
-        $this->get('routing')->redirect('customers_get',array());
-    }
-
-    public function generateCustomerPendingTransactionPDF($request, $customerId) {
-        $employee = $this->get("auth")->check(_GROUP_EMPLOYEE);
-        $customer = $this->get('customer_repository')->get($customerId);
-        // Fetch the account details for corresponding customer
-        $accountInfo = $this->get('account_repository')->findOne(array("customer_id"=>$customerId));
-        /*Fetch the transaction details for the corresponding customer */
-        $transactions = $this->getTransactions($customerId);
-        // render the form
-        $this->get("templating")->render("transaction_history_download.php", array(
-            //"form" => $helper
-            "accountInfo" => $accountInfo,
-            "customer" => $customer,
-            "invokedFrom" => _CUSTOMER_DETAILS_PENDING_TRANSACTION,
-            "onHoldTransactionList" => $transactions['onHoldTransactionList'],
-        ));
+        $this->get("flash_bag")->add(_OPERATION_FAILURE, "The Employee registration could not be approved", "error");
+        return $this->get('routing')->redirect('employees_get',array());
+        
     }
 
-     public function generateCustomerCompletedTransactionPDF($request, $customerId) {
-        $employee = $this->get("auth")->check(_GROUP_EMPLOYEE);
-        $customer = $this->get('customer_repository')->get($customerId);
-       // Fetch the account details for corresponding customer
-        $accountInfo = $this->get('account_repository')->findOne(array("customer_id"=>$customerId));
-        /*Fetch the transaction details for the corresponding customer */
-        $transactions = $this->getTransactions($customerId);
-        // render the form
-        $this->get("templating")->render("transaction_history_download.php", array(
-            //"form" => $helper
-            "transactionList" => $transactionList,
-            "accountInfo" => $accountInfo,
-            "customer" => $customer,
-            "invokedFrom" => _CUSTOMER_DETAILS_COMPLETED_TRANSACTION,
-            "approvedTransactionList" => $transactions['approvedTransactionList'],
-        ));
-    }
+    
 
     public function generatePendingTransactionsPDF($request) {
             $employee = $this->get("auth")->check(_GROUP_EMPLOYEE);
@@ -253,30 +125,17 @@ class EmployeeController extends UserController {
             ));
         }
 
-    private function notify($success, $error) {
-        if (!$error) {
-            $this->get("flash_bag")->add(_OPERATION_SUCCESS, $success, "success_notification");
-        } else {
-            $this->get("flash_bag")->add(_OPERATION_FAILURE, $error, "error");
-        }
-    }
+    public function generateCompletedTransactionsPDF($request){
+			$employee = $this->get("auth")->check(_GROUP_EMPLOYEE);
+            /*Fetch the transaction details for the corresponding customer */
+            $transactionList = $this->get('transaction_repository')->find(array("is_on_hold"=>0));
 
-    private function getTransactions($customerId){
-        $transactionList = $this->get('transaction_repository')->getByCustomerId($customerId);
-        /*Separate the transactions into completed and on-hold transactions.*/
-        $onHoldTransactionList = array();
-        $approvedTransactionList = array();
-        foreach ($transactionList as $transaction) {
-            $onHold = $transaction->getIsOnHold();
-            if ($onHold)
-                $onHoldTransactionList[] = $transaction;
-            else
-                $approvedTransactionList[] = $transaction;
-        }
-        return array(
-            'onHoldTransactionList' => $onHoldTransactionList,
-            'approvedTransactionList' => $approvedTransactionList
-            );
-    }
+            // render the form
+            $this->get("templating")->render("transaction_history_download.php", array(
+                //"form" => $helper
+                "transactionList" => $transactionList,
+                "invokedFrom" => _COMPLETED_TRANSACTIONS,
+            ));
+	}
 
 }
\ No newline at end of file
diff --git a/src/Controller/ExampleController.php b/src/Controller/ExampleController.php
index 974cfad..186d1e1 100644
--- a/src/Controller/ExampleController.php
+++ b/src/Controller/ExampleController.php
@@ -43,14 +43,14 @@ class ExampleController extends Controller {
 	}
 
 	public function testTransactionCode($request) {
-		$set = $this->get("transaction")->generateTransactionCodeSet(1);
+		$set = $this->get("transaction_code")->generateTransactionCodeSet(1);
 		$this->get("templating")->render("test_transaction_codes.html.php", array(
 			"transaction_codes" => $set
 		));
 	}
 
 	public function testEmailTemplate($request) {
-		$tans = $this->get("transaction")->generateTransactionCodeSet(1);
+		$tans = $this->get("transaction_code")->generateTransactionCodeSet(1);
 		$user_model = $this->get('customer_repository')->findOne(array("id" => 7));
 		$this->get("templating")->render("email_transaction_codes.html.php", array(
             "tans" => $tans,
diff --git a/src/Controller/LoginController.php b/src/Controller/LoginController.php
index b5a026e..86dd6bc 100644
--- a/src/Controller/LoginController.php
+++ b/src/Controller/LoginController.php
@@ -13,17 +13,17 @@ class LoginController extends Controller {
 		if($this->get("auth")->redirectCurrentUserToUserHome()) return;
 		if($msg = $this->get("auth")->getLastMessage()) $this->get("flash_bag")->add("Authentification failed", $msg, "error");
 		// create the FormHelper
-		$helper = new \Helper\FormHelper("form_login");
+		$helper = $this->get("form")->getCSRFFormHelper("form_login");
 
 		//add one field
 		$helper->addField("email", "text", array(
 			array("required", "Email is required"),
 			array("email", "Please input a valid e-mail")
-		), array("ltrim", "rtrim"), "");
+		), array("ltrim", "rtrim", "stripTags"), "");
 
 		$helper->addField("_password_plain", "text", array(
 			array("required", "Password is required")
-		), array("ltrim", "rtrim"), "");
+		), array("ltrim", "rtrim", "stripTags"), "");
 
 		// try to process the request
 		if($helper->processRequest($request)) {
@@ -36,9 +36,31 @@ class LoginController extends Controller {
 				$helper->fillModel($model);
 
 				// AuthService
-				if (!$this->get("auth")->login($model)) {
-					$this->get("flash_bag")->add("Login failed", "Unfortunately the Login failed", "error");
-				} 
+				try {
+					$login = $this->get("auth")->login($model);
+				} catch (\Exception $e) {
+					switch ($e->getMessage()) {
+						case 'UserLockedException':
+							$this->get("flash_bag")->add("Account locked", "Your account is currently locked.", "error");
+							break;
+						
+						case 'UserNotFoundException':
+							$this->get("flash_bag")->add("Login failed", "There is no account with this e-mail.", "error");
+							break;
+
+						case 'LoginFailedException':
+							$this->get("flash_bag")->add("Login failed", "Either the e-mail or the password is wrong.", "error");
+							break;
+
+						case 'UserNotEnabledException':
+							$this->get("flash_bag")->add("Login failed", "Your account is not approved yet.", "error");
+							break;
+						
+						default:
+							$this->get("flash_bag")->add("Login failed", "An error occurred. Please try again later.", "error");
+							break;
+					}
+				}
 			}
 		} 
 		// render the form
@@ -46,7 +68,129 @@ class LoginController extends Controller {
 			"form" => $helper
 		));
 	}
+
 	public function logout($request) {
 		$this->get("auth")->logout();
 	}
+
+	public function resetPassword($request) {
+		$helper =  $this->get("form")->getCSRFFormHelper("recover_password");
+
+		$helper->addField("email", "text", array(
+			array("required", "Email is required"),
+			array("email", "Please input a valid e-mail")
+		), array("ltrim", "rtrim", "stripTags"), "");
+
+		$helper->addField("employee", "checkbox", array(), array(), "");
+
+		if ($helper->processRequest($request)) {
+			if ($helper->validate()) {
+				$email = $helper->getValue("email");
+				$employee = $helper->getValue("employee");
+
+				if ($employee == "on") {
+					$model = $this->get("employee_repository")->findOne(array("email" => $email));
+					$e = "y";
+				} else {
+					$model = $this->get("customer_repository")->findOne(array("email" => $email));
+					$e = "n";
+				}
+
+				if ($model !== false) {
+					$user = $this->get("auth")->createToken($model);
+
+					if ($user !== false) {
+						$url = $_SERVER['SERVER_NAME'].$this->get("routing")->url("reset_password_get", array())."?token=".$user->getToken();
+						$token = $user->getToken();
+
+						// send email with pw reset link
+						$this->get("email")->sendMail(
+							$user->getEmail(),
+							"Password reset for your account at SecureBank",
+							"Dear ".$user->getFirstName()." ".$user->getLastName().",<br/><br/> Click on the link to reset the password for your account at SecureBank:<br/><a href='".$url."' target='_blank'>".$url."</a><br/><br/>Have a nice day.<br/><br/> Your SecureBank"
+						);
+
+						$this->get("flash_bag")->add("Reset successful", "You will get an e-mail with further information soon.", "success");
+						$this->get("routing")->redirect("login_get", array());
+						return;
+					} else {
+						$this->get("flash_bag")->add("An error occurred", "Please try again later.", "error");
+					}				
+				} else {
+					// there is no account with this email
+					$this->get("flash_bag")->add("Reset failed", "There is no account with this e-mail.", "error");
+				}
+			}
+		}
+
+		$this->get("templating")->render("form_recover_password.html.php", array(
+			"form" => $helper
+		));
+	}
+
+	public function getPasswordResetView($request) {
+		$helper =  $this->get("form")->getCSRFFormHelper("reset_password");
+
+		$helper->addField("_password_plain", "password", array(
+			array("required", "Password is required"),
+			array("minLength", "Has to be at least 6 characters long", array(6)),
+			array("password", "Must contain at least one lowercase character, one uppercase character and at least one digit.")
+		), array("ltrim", "rtrim", "stripTags"), "");
+
+		$helper->addField("password_repeat", "password", array(
+			array("required", "Please repeat your password"),
+			array("equal", "Passwords do not match", array("_password_plain"))
+		), array("ltrim", "rtrim", "stripTags"), "");
+
+		$helper->addField("token", "text", array(
+			array("required", "Token has to be set")
+		), array("ltrim", "rtrim", "stripTags"), "");
+
+		if ($token = $request->getQuery("token")) {
+			if ($user = $this->get("auth")->getUserFromToken($token)) {
+				$this->get("templating")->render("form_reset_password.html.php", array(
+					"form" => $helper,
+					"token" => $token
+				));
+				return;
+			}
+		}
+		$this->get("flash_bag")->add("Token invalid", "The token is either invalid or has expired.", "error");
+		$this->get("routing")->redirect("recover_password_get", array());
+	}
+
+	public function processPasswordReset($request) {
+		$helper =  $this->get("form")->getCSRFFormHelper("reset_password");
+
+		$helper->addField("_password_plain", "password", array(
+			array("required", "Password is required"),
+			array("minLength", "Has to be at least 6 characters long", array(6)),
+			array("password", "Must contain at least one lowercase character, one uppercase character and at least one digit.")
+		), array("ltrim", "rtrim", "stripTags"), "");
+
+		$helper->addField("password_repeat", "password", array(
+			array("required", "Please repeat your password"),
+			array("equal", "Passwords do not match", array("_password_plain"))
+		), array("ltrim", "rtrim", "stripTags"), "");
+
+		$helper->addField("token", "text", array(
+			array("required", "Token has to be set")
+		), array("ltrim", "rtrim", "stripTags"), "");
+
+		if ($helper->processRequest($request)) {
+			if ($helper->validate()) {
+				if ($user = $this->get("auth")->setNewPassword($helper->getValue("token"), $helper->getValue("_password_plain"))) {
+					$this->get("flash_bag")->add("Reset successful", "Your password has been changed.", "success");
+					$this->get("routing")->redirect("login_get", array());
+					return;
+				} else {
+					$this->get("flash_bag")->add("An error occurred", "Please try again later.", "error");
+				}
+			}
+		}
+		$this->get("templating")->render("form_reset_password.html.php", array(
+			"form" => $helper,
+			"token" => $helper->getValue("token")
+		));
+	}
 }
\ No newline at end of file
diff --git a/src/Controller/RegistrationController.php b/src/Controller/RegistrationController.php
index 411dd5a..4d64c1f 100644
--- a/src/Controller/RegistrationController.php
+++ b/src/Controller/RegistrationController.php
@@ -15,50 +15,55 @@ class RegistrationController extends Controller {
 	public function processRegistration($request) {
 		if($this->get("auth")->redirectCurrentUserToUserHome()) return;
 		// create the FormHelper
-		$helper = new \Helper\FormHelper("form_registration");
+		$helper =  $this->get("form")->getCSRFFormHelper("form_registration");
 
 		//add one field
 		$helper->addField("first_name", "name", array(
 			array("required", "First name is required"),
 			array("name", "Only letters, '-' and white space allowed and must be at least 2 characters")
-		), array("ltrim", "rtrim"), "");
+		), array("ltrim", "rtrim", "stripTags"), "");
 
 		$helper->addField("last_name", "name", array(
 			array("required", "Last name is required"),
 			array("name", "Only letters, '-' and white space allowed and must be at least 2 characters")
-		), array("ltrim", "rtrim"), "");
+		), array("ltrim", "rtrim", "stripTags"), "");
 
 		$helper->addField("address", "text", array(
 			array("required", "Address is required"),
-			array("maxLength", "Max. 60 characters allowed", array(60))
-		), array("ltrim", "rtrim"), "");
+			array("maxLength", "Max. 60 characters allowed", array(60)),
+			array("address", "Please input a valid address, e.g. Example St. 1a")
+		), array("ltrim", "rtrim", "stripTags"), "");
 
 		$helper->addField("postal_code", "text", array(
 			array("required", "Postal code is required"),
 			array("number", "Only numbers are allowed"),
 			array("maxLength", "Max. 5 numbers allowed", array(5))
-		), array("ltrim", "rtrim"), "");
+		), array("ltrim", "rtrim", "stripTags"), "");
 
 		$helper->addField("city", "text", array(
 			array("required", "City is required"),
 			array("maxLength", "Max. 20 characters allowed", array(20))
-		), array("ltrim", "rtrim"), "");
+		), array("ltrim", "rtrim", "stripTags"), "");
 
 		$helper->addField("email", "email", array(
 			array("required", "E-Mail is required"),
 			array("email", "Please input a valid e-mail")
-		), array("ltrim", "rtrim"), "");
+		), array("ltrim", "rtrim", "stripTags"), "");
 
 		$helper->addField("_password_plain", "password", array(
 			array("required", "Password is required"),
-			array("password", "Only letters, numbers and '-_$^?\+#' allowed")
-		), array("ltrim", "rtrim"), "");
+			array("minLength", "Has to be at least 6 characters long", array(6)),
+			array("password", "Must contain at least one lowercase character, one uppercase character and at least one digit.")
+		), array("ltrim", "rtrim", "stripTags"), "");
 
 		$helper->addField("password_repeat", "password", array(
 			array("required", "Please repeat your password"),
-			array("password", "Only letters, numbers and '-_$^?\+#' allowed"),
 			array("equal", "Passwords do not match", array("_password_plain"))
-		), array("ltrim", "rtrim"), "");
+		), array("ltrim", "rtrim", "stripTags"), "");
+
+		$helper->addField("tan_method", "radio", array(
+		   array("maxLength", "Max. 1 character allowed", array(1))
+        		), array("ltrim", "rtrim", "stripTags"), "");
 
 		// try to process the request
 		if ($helper->processRequest($request)) {
@@ -87,8 +92,8 @@ class RegistrationController extends Controller {
 						// send confirmation email
 						$this->get("email")->sendMail(
 							$model->getEmail(),
-							"Thank you for your registration",
-							"Dear ".$model->getFirstName()." ".$model->getLastName().",\nthank you for your registration at SecureBank.\nAs soon as our employees have checked your registration, you will get another e-mail containing further information on how to proceed.\n\nHave a nice day,\nyour SecureBank"
+							"Thank you for your registration at SecureBank",
+							"Dear ".$model->getFirstName()." ".$model->getLastName().",<br/><br/>Thank you for your registration at SecureBank.<br/>As soon as our employees have checked your registration, you will get another e-mail containing further information on how to proceed.<br/><br/>Have a nice day.<br/><br/> Your SecureBank"
 						);
 
 						// set flash message and redirect
@@ -115,34 +120,34 @@ class RegistrationController extends Controller {
 	 */
 	public function processEmployeeRegistration($request) {
 		// create the FormHelper
-		$helper = new \Helper\FormHelper("form_registration");
+		$helper = $this->get("form")->getCSRFFormHelper("form_registration");
 
 		//add one field
 		$helper->addField("first_name", "name", array(
 			array("required", "First name is required"),
 			array("name", "Only letters, '-' and white space allowed and must be at least 2 characters")
-		), array("ltrim", "rtrim"), "");
+		), array("ltrim", "rtrim", "stripTags"), "");
 
 		$helper->addField("last_name", "name", array(
 			array("required", "Last name is required"),
 			array("name", "Only letters, '-' and white space allowed and must be at least 2 characters")
-		), array("ltrim", "rtrim"), "");
+		), array("ltrim", "rtrim", "stripTags"), "");
 
 		$helper->addField("email", "email", array(
 			array("required", "E-Mail is required"),
 			array("email", "Please input a valid e-mail")
-		), array("ltrim", "rtrim"), "");
+		), array("ltrim", "rtrim", "stripTags"), "");
 
 		$helper->addField("_password_plain", "password", array(
 			array("required", "Password is required"),
-			array("password", "Only letters, numbers and '-_$^?\+#' allowed")
-		), array("ltrim", "rtrim"), "");
+			array("minLength", "Has to be at least 6 characters long", array(6)),
+			array("password", "Must contain at least one lowercase character, one uppercase character and at least one digit.")
+		), array("ltrim", "rtrim", "stripTags"), "");
 
 		$helper->addField("password_repeat", "password", array(
 			array("required", "Please repeat your password"),
-			array("password", "Only letters, numbers and '-_$^?\+#' allowed"),
 			array("equal", "Passwords do not match", array("_password_plain"))
-		), array("ltrim", "rtrim"), "");
+		), array("ltrim", "rtrim", "stripTags"), "");
 
 		// try to process the request
 		if ($helper->processRequest($request)) {
@@ -175,8 +180,8 @@ class RegistrationController extends Controller {
 						// send confirmation email
 						$this->get("email")->sendMail(
 							$model->getEmail(),
-							"Thank you for your application",
-							"Dear ".$model->getFirstName()." ".$model->getLastName().",\nthank you for your application for a job at SecureBank.\nWe will look into your application as soon as possible and we will get back to you.\n\nHave a nice day,\nyour SecureBank"
+							"Thank you for your application at SecureBank",
+							"Dear ".$model->getFirstName()." ".$model->getLastName().",<br/><br/>Thank you for your application for a job at SecureBank.<br/>We will look into your application as soon as possible and get back to you.<br/><br/>Have a nice day.<br/><br/>Your SecureBank"
 						);
 
 						// set flash message and redirect
diff --git a/src/Controller/TransactionController.php b/src/Controller/TransactionController.php
index 4e9adbb..e45fcd7 100644
--- a/src/Controller/TransactionController.php
+++ b/src/Controller/TransactionController.php
@@ -6,166 +6,392 @@ namespace Controller;
  *
  * @author Vivek Sethia <vivek.sethia@tum.de>
  * @author Mai Ton Nu Cam <maitonnucam@googlemail.com>
+ * @author Swathi Shyam Sunder<swathi.ssunder@tum.de>
  */
 class TransactionController extends Controller {
 
-	public function makeTransfer($request) {
-		$customer = $this->get("auth")->check(_GROUP_USER);
+    private function getFormTransferHelper() {
+        $helper =  $this->get("form")->getCSRFFormHelper("make_transfer");
 
-		// create the FormHelper
-        $helper = new \Helper\FormHelper("make_transfer");
-		//add one field
-		$helper->addField("to_account_id", "text", array(
-			array("required", "Beneficiary Account No. is required"),
-		    array("number", "Only numbers are allowed"),
-		), array("ltrim", "rtrim"), "");
-
-		$helper->addField("to_account_name", "name", array(
-			array("required", "Account Holder Name is required"),
-			array("name", "Only letters, '-' and white space allowed and must be at least 2 characters")
-		), array("ltrim", "rtrim"), "");
-
-		$helper->addField("amount", "text", array(
-			array("required", "Amount to be transfered should be specified"),
-			//array("name", "Max. 50000 per day allowed"),
-			array("maxLength", "Enter 15 digit transaction code", array(15))
-		), array("ltrim", "rtrim"), "");
-
-		$helper->addField("transaction_code", "text", array(
-			array("required", "Transaction code is required"),
-			array("maxLength", "Enter 15 digit transaction code", array(15))
-		), array("ltrim", "rtrim"), "");
-
-		$helper->addField("remarks", "text", array(
-			array("required", "Remarks is required"),
-			array("maxLength", "Max. 100 characters allowed", array(100))
-		), array("ltrim", "rtrim"), "");
-
-		// process the request
-		if ($helper->processRequest($request)) {
-			//try to validate
-			if ($helper->validate()) {
-			    $requestVar = $request->getData('make_transfer');
-			    $transaction_code = $requestVar['transaction_code'];
-			    $amount = $requestVar['amount'];
-			    if( $amount < 0 ){
-			    	$this->get("flash_bag")->add(_OPERATION_FAILURE, "Please enter the correct amount.", "error");
-					$this->get("routing")->redirect("make_transfer_get", array("form" => $helper));
-					return;
-			    }
-			    $customer_id = $customer->getId();
-			    $account_repo = $this->get('account_repository');
-			    $transaction_code_repo = $this->get('transaction_code_repository');
-				$is_valid_transaction = $transaction_code_repo->findOne(array("customer_id" => $customer_id, "code" => $transaction_code, "is_used" => 0));
-
-				// Checking whether the transaction is valid , then proceed further
-				if (!empty($is_valid_transaction)) {
-					// fill the model
-					$model = new \Model\Transaction();
-					$helper->fillModel($model);
-
-					$model->setTransactionDate(date("Y-m-d H:i:s"));
-					$from_account = $account_repo->findOne(array("customer_id" => $customer_id));
-					$to_account = $account_repo->findOne(array("account_id" => $model->getToAccountId()));
-					$from_account_id = $from_account->getAccountId();
-					$model->setFromAccountId($from_account_id);
-
-					// check whether the amount > 10000
-					if ($amount > _TRANSFER_LIMIT_FOR_AUTO_APPROVAL ){
-						$model->setIsOnHold(1);
-					}
-
-					// add to transaction repository
-					if ($this->get('transaction_repository')->makeTransfer($model, $account_repo, $from_account, $to_account, $transaction_code_repo, $is_valid_transaction)) {
-						// after successful transfer , redirect to make_transfer page
-						$this->get("flash_bag")->add(_OPERATION_SUCCESS, "Your transaction has been processed.", "success_notification");
-						$this->get("routing")->redirect("make_transfer_get", array("form" => $helper));
-						return;
-					}
-				}
-				else{
-					$this->get("flash_bag")->add(_OPERATION_FAILURE, "Please enter the correct transaction code.", "error");
-					$this->get("routing")->redirect("make_transfer_get", array("form" => $helper));
-                    return;
-				}
-			}
-		}
+        //add one field
+        $helper->addField("to_account_id", "text", array(
+            array("required", "Recipient Account No. is required"),
+            array("number", "Only numbers are allowed"),
+        ), array("ltrim", "rtrim", "stripTags"), "");
+
+        $helper->addField("to_account_name", "name", array(
+            array("required", "Recipient Name is required"),
+            array("name", "Only letters, '-' and white space allowed and must be at least 2 characters")
+        ), array("ltrim", "rtrim", "stripTags"), "");
+
+        $helper->addField("amount", "text", array(
+            array("required", "Amount to be transfered should be specified"),
+            //array("name", "Max. 50000 per day allowed"),
+            array("maxLength", "Enter 15 digit transaction code", array(15))
+        ), array("ltrim", "rtrim", "stripTags"), "");
+
+        $helper->addField("transaction_code", "text", array(
+            array("required", "Transaction code is required"),
+            array("maxLength", "Enter 15 digit transaction code", array(15))
+        ), array("ltrim", "rtrim", "stripTags"), "");
 
-		// make transfer via file upload
-		$helper2 = new \Helper\FormHelper("make_transfer_via_file_upload");
+        $helper->addField("remarks", "text", array(
+            array("required", "Remarks is required"),
+            array("maxLength", "Max. 100 characters allowed", array(100))
+        ), array("ltrim", "rtrim", "stripTags"), "");
 
-		$helper2->addField("file", "", array(
-		), array("ltrim", "rtrim"), "");
+        return $helper;
+    }
+    private function getFileTransferHelper() {
+        $helper2 =  $this->get("form")->getCSRFFormHelper("make_transfer_via_file_upload");
+
+        $helper2->addField("transaction_code", "text", array(
+            array("required", "Transaction code is required"),
+            array("maxLength", "Enter 15 digit transaction code", array(15))
+        ), array("ltrim", "rtrim", "stripTags"), "");
+
+        $helper2->addField("file", "", array(
+        ), array("ltrim", "rtrim"), "");
+
+        return $helper2;
+    }
+    public function makeTransfer($request) {
+        $helper = $this->getFormTransferHelper();
+        $helper2 = $this->getFileTransferHelper();
+        $this->get("templating")->render("Customer/make_transfer.html.php", array(
+            "form" => $helper,
+            "form2" => $helper2,
+        ));
+    }
+
+	public function makeTransferForm($request) {
+        $customer = $this->get("auth")->check(_GROUP_USER);
+        // create the FormHelper
+        $helper = $this->getFormTransferHelper();
+        $helper2 = $this->getFileTransferHelper();
+        // process the request
+        if ($helper->processRequest($request)) {
+            //try to validate
+            if ($helper->validate()) {
+                return $this->processSingleTransfer($request, $helper, $helper2, $customer);
+            }
+        }
+        $this->get("templating")->render("Customer/make_transfer.html.php", array(
+            "form" => $helper,
+            "form2" => $helper2,
+        ));
+    }
+    public function makeTransferFile($request) {
+		$customer = $this->get("auth")->check(_GROUP_USER);
+        // make transfer via file upload
+        $helper2 = $this->getFileTransferHelper();
+        $helper = $this->getFormTransferHelper();
 
 		if ($helper2->processRequest($request)) {
+			//try to validate
 			if ($helper2->validate()) {
-				$upload_dir = $_SERVER['DOCUMENT_ROOT'].'/tmp/';
-				$file = $request->getFile('make_transfer_via_file_upload', 'file');
-				if ($file['type'] != "text/plain") {
-					$this->get("flash_bag")->add(_OPERATION_FAILURE, "The uploaded file must be a plain text file", "error");
-					$this->get("routing")->redirect("make_transfer_get", array("form" => $helper, "form2" => $helper2));
-                    return;
-				} else if ($file['error'] == 2) {
-					$this->get("flash_bag")->add(_OPERATION_FAILURE, "The uploaded file size exceeds the maximum of 1 MB", "error");
-					$this->get("routing")->redirect("make_transfer_get", array("form" => $helper, "form2" => $helper2));
-                    return;
-				}
-				$random_file_name = str_replace("/", "", \Service\RandomSequenceGeneratorService::getString(10));
-				$uploaded_file_name = $upload_dir.$random_file_name.".txt";
-
-				// rename uploaded file name if already exists
-				$i = 1;
-				do {
-					if ($i == 1) {
-						$pos = strrpos($uploaded_file_name, ".txt");
-						$uploaded_file_name = substr_replace($uploaded_file_name, "_".$i, $pos, 0);
-					} else {
-						$pos = strrpos($uploaded_file_name, "_".($i-1).".txt");
-						$uploaded_file_name = substr_replace($uploaded_file_name, "_".$i, $pos, strlen((string)$i)+1);
-					}
-					$i++;
-				} while (file_exists($uploaded_file_name));
-
-				if ($file['tmp_name'] !== "" && move_uploaded_file($file['tmp_name'], $uploaded_file_name)) {
-					// file was uploaded successfully
-					$customer_id = $customer->getId();
-			    	$customer_account_id = $this->get('account_repository')->findOne(array("customer_id" => $customer_id))->getAccountId();
-					$shell_command = $_SERVER['DOCUMENT_ROOT'] .
-						"/../textparser/textparser " .
-						escapeshellarg($uploaded_file_name) . " " .
-						escapeshellarg($customer_id) . " " .
-						escapeshellarg($customer_account_id) . " " .
-						escapeshellarg(_MYSQL_HOST) . " " .
-						escapeshellarg(_MYSQL_USER) . " " .
-						escapeshellarg(_MYSQL_PASSWORD) . " " .
-						escapeshellarg(_MYSQL_DATABASE);
-					exec($shell_command, $output, $return_var);
-					if ($return_var == 0) {
-						$this->get("flash_bag")->add(_OPERATION_SUCCESS, "Your transaction has been processed.", "success_notification");
-					} else {
-						if (in_array("Incorrect transaction code.", $output)) {
-							$this->get("flash_bag")->add(_OPERATION_FAILURE, "Incorrect transaction code(s).", "error");
-						} else if (in_array("Error in connecting to the database.", $output)) {
-							$this->get("flash_bag")->add(_OPERATION_FAILURE, "There was an error with connecting to the database. Please try again later.", "error");
-						} else {
-							$this->get("flash_bag")->add(_OPERATION_FAILURE, "There was an error with your transaction. Please try again later.", "error");
-						}
-					}
-					unlink($uploaded_file_name);
-					$this->get("routing")->redirect("make_transfer_get", array("form" => $helper, "form2" => $helper2));
-                	return;
-				} else {
-					$this->get("flash_bag")->add(_OPERATION_FAILURE, "There was an error with uploading the file. Please try again later.", "error");
-					$this->get("routing")->redirect("make_transfer_get", array("form" => $helper));
-                    return;
-				}
+				return $this->processBatchTransfer($request, $helper, $helper2, $customer);
 			}
 		}
+        $this->get("templating")->render("Customer/make_transfer.html.php", array(
+            "form" => $helper,
+            "form2" => $helper2,
+        ));
+	}
+
+	private function processSingleTransfer($request, $helper, $helper2, $customer) {
+        $requestVar = $request->getData('make_transfer');
+        $transaction_code = $requestVar['transaction_code'];
+        $amount = $requestVar['amount'];
+
+        /*Return if the amount entered is invalid(i.e., negative or 0)*/
+        if( $amount <= 0 ){
+            $this->get("flash_bag")->add(_OPERATION_FAILURE, "Incorrect amount for the transfer.", "error");
+            $this->get("routing")->redirect("make_transfer_get", array("form" => $helper, "form2" => $helper2));
+            return;
+        }
+
+        $customer_id = $customer->getId();
+        $customer_name = $customer->getFirstName() . " " . $customer->getLastName();
+        $account_repo = $this->get('account_repository');
+        $transaction_code_repo = $this->get('transaction_code_repository');
+
+        // fill the model
+        $model = new \Model\Transaction();
+        $helper->fillModel($model);
+
+        $from_account = $account_repo->findOne(array("customer_id" => $customer_id));
+        $to_account = $account_repo->findOne(array("account_id" => $model->getToAccountId()));
+        $from_account_id = $from_account->getAccountId();
+        $from_account_balance = $from_account->getBalance();
+
+        /*Return if recipient account is same as own account.*/
+        if ($model->getToAccountId() === $from_account_id) {
+            $this->get("flash_bag")->add(_OPERATION_FAILURE, "Recipient Account same as own account.", "error");
+            $this->get("routing")->redirect("make_transfer_get", array("form" => $helper, "form2" => $helper2));
+            return;
+        }
+        /*Return if recipient account does not exist*/
+        if (!$to_account) {
+            $this->get("flash_bag")->add(_OPERATION_FAILURE, "Recipient Account does not exist.", "error");
+            $this->get("routing")->redirect("make_transfer_get", array("form" => $helper, "form2" => $helper2));
+            return;
+        }
+        /*Return if customer account does not have sufficient funds*/
+        if ($amount > $from_account_balance) {
+            $this->get("flash_bag")->add(_OPERATION_FAILURE, "Insufficient funds for the transfer.", "error");
+            $this->get("routing")->redirect("make_transfer_get", array("form" => $helper, "form2" => $helper2));
+            return;
+        }
+
+        /*Check if SCS is enabled for the customer*/
+        if ((int)$customer->getTanMethod() === _TAN_METHOD_SCS) {
+            $scs_pin = $this->get("scs")->getPin($customer_id);
+
+            /*Generate the TAN for the transaction based on the entered details and the customer's SCS pin*/
+            $scs_transaction_code = $this->get("scs")->generateTan(strval($model->getToAccountId()) . strval($model->getAmount()) . strval($scs_pin));
+            $is_valid_transaction_code = ($scs_transaction_code === $transaction_code) ? $transaction_code : false;
+
+            /*Return if the SCS pin or transaction code is invalid*/
+            if (!$is_valid_transaction_code) {
+                $this->get("flash_bag")->add(_OPERATION_FAILURE, "Incorrect SCS pin or TAN (transaction code).", "error");
+                $this->get("routing")->redirect("make_transfer_get", array("form" => $helper, "form2" => $helper2));
+                return;
+            }
+
+            $code_exists = $this->get("transaction_code")->isCodeExists($transaction_code);
+
+            /*Return if the transaction code is already used*/
+            if ($code_exists) {
+                $this->get("flash_bag")->add(_OPERATION_FAILURE, "Incorrect TAN (transaction code).", "error");
+                $this->get("routing")->redirect("make_transfer_get", array("form" => $helper, "form2" => $helper2));
+                return;
+            }
+        } else {
+            $is_valid_transaction_code = $this->get("transaction_code")->isCodePristine($customer_id, $transaction_code);
+
+            /*Return if the transaction code is invalid*/
+            if (!$is_valid_transaction_code) {
+                $this->get("flash_bag")->add(_OPERATION_FAILURE, "Incorrect TAN (transaction code).", "error");
+                $this->get("routing")->redirect("make_transfer_get", array("form" => $helper, "form2" => $helper2));
+                return;
+            }
+        }
+        $model->setTransactionDate(date("Y-m-d H:i:s"));
+        $model->setFromAccountId($from_account_id);
+        $model->setFromAccountName($customer_name);
+
+        /*Put the transaction on hold if the transfer amount > 10000.*/
+        if ($amount > _TRANSFER_LIMIT_FOR_AUTO_APPROVAL ){
+            $model->setIsOnHold(1);
+        } else { /*Else, close the transaction by auto-approval.*/
+            $model->setIsClosed(1);
+        }
 
-		// render the form
-		$this->get("templating")->render("Customer/make_transfer.html.php", array(
-			"form" => $helper,
-			"form2" => $helper2,
-		));
+        // add to transaction repository
+        if ($this->get('transaction_repository')->makeTransfer($model, $account_repo, $from_account, $to_account, $transaction_code_repo, $is_valid_transaction_code)) {
+            // after successful transfer , redirect to make_transfer page
+            $this->get("flash_bag")->add(_OPERATION_SUCCESS, "Your transaction has been processed.", "success_notification");
+            $this->get("routing")->redirect("make_transfer_get", array("form" => $helper, "form2" => $helper2));
+            return;
+        }
 	}
+
+	private function processBatchTransfer($request, $helper, $helper2, $customer) {
+	    $requestVar = $request->getData('make_transfer_via_file_upload');
+        $transaction_code = $requestVar['transaction_code'];
+
+        $upload_dir = $_SERVER['DOCUMENT_ROOT'].'/tmp/';
+        $file = $request->getFile('make_transfer_via_file_upload', 'file');
+        if ($file['type'] != "text/plain") {
+            $this->get("flash_bag")->add(_OPERATION_FAILURE, "The uploaded file must be a plain text file", "error");
+            $this->get("routing")->redirect("make_transfer_get", array("form" => $helper, "form2" => $helper2));
+            return;
+        } else if ($file['error'] == 2) {
+            $this->get("flash_bag")->add(_OPERATION_FAILURE, "The uploaded file size exceeds the maximum of 1 MB", "error");
+            $this->get("routing")->redirect("make_transfer_get", array("form" => $helper, "form2" => $helper2));
+            return;
+        }
+
+        $customer_id = $customer->getId();
+        $customer_name = $customer->getFirstName() . " " . $customer->getLastName();
+
+        $random_file_name = str_replace("/", "", $this->get("random")->getString(10));
+        $uploaded_file_name = $upload_dir.$random_file_name.".txt";
+
+        // rename uploaded file name if already exists
+        $i = 1;
+        do {
+            if ($i == 1) {
+                $pos = strrpos($uploaded_file_name, ".txt");
+                $uploaded_file_name = substr_replace($uploaded_file_name, "_".$i, $pos, 0);
+            } else {
+                $pos = strrpos($uploaded_file_name, "_".($i-1).".txt");
+                $uploaded_file_name = substr_replace($uploaded_file_name, "_".$i, $pos, strlen((string)$i)+1);
+            }
+            $i++;
+        } while (file_exists($uploaded_file_name));
+
+        /*Return if the file was not uploaded successfully.*/
+        if (($file['tmp_name'] === "") || !move_uploaded_file($file['tmp_name'], $uploaded_file_name)) {
+            $this->get("flash_bag")->add(_OPERATION_FAILURE, "There was an error with uploading the file. Please try again later.", "error");
+            $this->get("routing")->redirect("make_transfer_get", array("form" => $helper, "form2" => $helper2));
+            return;
+        }
+
+        /*Get contents of the file*/
+        $file_content = file_get_contents($uploaded_file_name);
+
+        /*Check if SCS is enabled for the customer*/
+        if ((int)$customer->getTanMethod() === _TAN_METHOD_SCS) {
+            $scs_pin = $this->get("scs")->getPin($customer_id);
+
+            /*Generate the TAN for the transaction based on the uploaded file and the customer's SCS pin*/
+            $scs_transaction_code = $this->get("scs")->generateTan(strval($scs_pin) . trim($file_content));
+
+            $is_valid_transaction_code = ($scs_transaction_code === $transaction_code) ? $transaction_code : false;
+
+            /*Return if the SCS pin or transaction code is invalid*/
+            if (!$is_valid_transaction_code) {
+                $this->get("flash_bag")->add(_OPERATION_FAILURE, "Incorrect SCS pin or TAN (transaction code).", "error");
+                $this->get("routing")->redirect("make_transfer_get", array("form" => $helper, "form2" => $helper2));
+                return;
+            }
+
+            $code_exists = $this->get("transaction_code")->isCodeExists($transaction_code);
+
+            /*Return if the transaction code is already used*/
+            if ($code_exists) {
+                $this->get("flash_bag")->add(_OPERATION_FAILURE, "Incorrect TAN (transaction code).", "error");
+                $this->get("routing")->redirect("make_transfer_get", array("form" => $helper, "form2" => $helper2));
+                return;
+            }
+        } else {
+            $is_valid_transaction_code = $this->get("transaction_code")->isCodePristine($customer_id, $transaction_code);
+
+            /*Return if the transaction code is invalid*/
+            if (!$is_valid_transaction_code) {
+                $this->get("flash_bag")->add(_OPERATION_FAILURE, "Incorrect TAN (transaction code).", "error");
+                $this->get("routing")->redirect("make_transfer_get", array("form" => $helper, "form2" => $helper2));
+                return;
+            }
+        }
+
+        $customer_account_id = $this->get('account_repository')->findOne(array("customer_id" => $customer_id))->getAccountId();
+
+        $shell_command = $_SERVER['DOCUMENT_ROOT'] .
+            "/../textparser/textparser " .
+            escapeshellarg($uploaded_file_name) . " " .
+            escapeshellarg($customer_id) . " " .
+            escapeshellarg($customer_name) . " " .
+            escapeshellarg($customer_account_id) . " " .
+            escapeshellarg($transaction_code) . " " .
+            escapeshellarg(_MYSQL_HOST) . " " .
+            escapeshellarg(_MYSQL_USER) . " " .
+            escapeshellarg(_MYSQL_PASSWORD) . " " .
+            escapeshellarg(_MYSQL_DATABASE);
+        exec($shell_command, $output, $return_var);
+        if ($return_var == 0) {
+            $this->get("flash_bag")->add(_OPERATION_SUCCESS, "Your transaction has been processed.", "success_notification");
+        } else {
+            $flash_message = "One or more transactions failed due to these errors. <br/>";
+            foreach ($output as $key => $message) {
+                if (strpos($message, "success") === false) {
+                    $flash_message .= "Transaction " . ($key + 1) . " failed with error - " . $message . "<br/>";
+                } else {
+                    $flash_message .= "Transaction " . ($key + 1) . " was processed successfully.<br/>";
+                }
+            }
+            $this->get("flash_bag")->add(_OPERATION_FAILURE, $flash_message, "error");
+        }
+        unlink($uploaded_file_name);
+        $this->get("routing")->redirect("make_transfer_get", array("form" => $helper, "form2" => $helper2));
+        return;
+    }
+
+    private function getTransactionFormHelper () {
+        $helper =  $this->get("form")->getCSRFFormHelper("approve_transaction");
+
+        $helper->addField("transaction_id", "text", array(
+            array("required", "Recipient Account No. is required"),
+            array("number", "Only numbers are allowed"),
+        ), array("ltrim", "rtrim", "stripTags"), "");
+
+        return $helper;
+    }
+
+    public function loadPendingTransactions ($request) {
+        $employee = $this->get("auth")->check(_GROUP_EMPLOYEE);
+        // create the FormHelper
+        $helper =  $this->getTransactionFormHelper();
+        /*Fetch all transactions that are on-hold.*/
+        $transactionList = $this->get('transaction_repository')->find(array("is_on_hold"=>1));
+        $completedtransactionList = $this->get('transaction_repository')->find(array("is_on_hold"=>0));
+        // render the form
+        $this->get("templating")->render("Employee/approve_transactions.html.php", array(
+            "form" => $helper,
+            "transactionList" => $transactionList,
+            "completedtransactionList" => $completedtransactionList
+        ));
+    }
+
+    public function approveTransaction ($request) {
+        $employee = $this->get("auth")->check(_GROUP_EMPLOYEE);
+
+        $helper = $this->getTransactionFormHelper();
+
+        if ($helper->processRequest($request)) {
+            //try to validate
+            if ($helper->validate()) {
+                $transaction_id = $helper->getValue("transaction_id");
+                $transaction_model = $this->get('transaction_repository')->findOne(array("id" => (int)$transaction_id));
+                if ($transaction_model !== false) {
+                    $account_repo = $this->get('account_repository');
+                    $from_account_id = $transaction_model->getFromAccountId();
+                    $to_account_id = $transaction_model->getToAccountId();
+                    $from_account = $account_repo->findOne(array("account_id"=>$from_account_id));
+                    $to_account = $account_repo->findOne(array("account_id"=>$to_account_id));
+                    $from_account_balance = $from_account->getBalance();
+
+                    /*Return if customer account does not have sufficient funds*/
+                    if ($transaction_model->getAmount() > $from_account_balance) {
+                        $this->get("flash_bag")->add(_OPERATION_FAILURE, "Insufficient funds for the transfer.", "error");
+                        return $this->get('routing')->redirect('transactions_get',array());
+                    } else {
+                        if($this->get('transaction_repository')->actOnTransaction($transaction_model, _ACTION_APPROVE, $account_repo, $from_account, $to_account) != false) {
+                            $this->get("flash_bag")->add(_OPERATION_SUCCESS, "Transaction was approved successfully.", "success_notification");
+                            return $this->get('routing')->redirect('transactions_get',array());
+                        }
+                    }
+                }
+            }
+        }
+        
+        $this->get("flash_bag")->add(_OPERATION_FAILURE, "The Transaction could not be approved", "error");
+        return $this->get('routing')->redirect('transactions_get',array());
+    }
+
+    public function rejectTransaction ($request) {
+        $employee = $this->get("auth")->check(_GROUP_EMPLOYEE);
+
+        $helper = $this->getTransactionFormHelper();
+
+        if ($helper->processRequest($request)) {
+            //try to validate
+            if ($helper->validate()) {
+                $transaction_id = $helper->getValue("transaction_id");
+                $transaction_model = $this->get('transaction_repository')->findOne(array("id" => (int)$transaction_id));
+                if ($transaction_model !== false) {
+                    if($this->get('transaction_repository')->actOnTransaction($transaction_model, _ACTION_REJECT) != false) {
+                        $this->get("flash_bag")->add(_OPERATION_SUCCESS, "Transaction was rejected successfully.", "success_notification");
+                        return $this->get('routing')->redirect('transactions_get',array());
+                    }
+                } 
+            }
+        }
+        
+        $this->get("flash_bag")->add(_OPERATION_FAILURE, "The Transaction could not be rejected", "error");
+        
+        return $this->get('routing')->redirect('transactions_get',array());
+    }
 }
\ No newline at end of file
diff --git a/src/Exception/RegistrationIsClosedException.php b/src/Exception/RegistrationIsClosedException.php
new file mode 100644
index 0000000..6206fb0
--- /dev/null
+++ b/src/Exception/RegistrationIsClosedException.php
@@ -0,0 +1,4 @@
+<?php
+class RegistrationIsClosedException extends Exception {
+	
+}
\ No newline at end of file
diff --git a/src/Helper/FormHelper.php b/src/Helper/FormHelper.php
index c760eef..ac7b3cb 100644
--- a/src/Helper/FormHelper.php
+++ b/src/Helper/FormHelper.php
@@ -15,12 +15,21 @@ class FormHelper {
 	private $method;
 	private $uniq_name;
 	private $error_messages = array();
+	private $csrf_service;
+	private $use_csrf;
 	/**
 	 * Constructor
 	 */
-	function __construct($uniq_name, $method="POST") {
+	function __construct($uniq_name, $method="POST", $csrf_service = null) {
 		$this->method = $method;
 		$this->uniq_name = $uniq_name;
+		if($csrf_service != null) {
+			$this->csrf_service = $csrf_service;
+			$this->use_csrf = true;
+		} else {
+			$this->use_csrf = false;
+		}
+		
 	}
 	/**
 	 * Adds a form field to the FormHelper
@@ -76,6 +85,8 @@ class FormHelper {
 
 		$error_messages = array();
 
+
+
 		// loop through all field configs
 		foreach ($this->field_configs as $name=>$config) {
 
@@ -105,9 +116,50 @@ class FormHelper {
 			// save the field value
 			$this->field_values[$name] = $field_raw;
 		}
+
+		if($this->use_csrf == true) {
+			$key = $this->csrf_service->getContextKey("form_default");
+			if($key !== false) {
+				if(array_key_exists($key, $data)) {
+					$this->field_values[$key] = $data[$key];
+				}
+			}
+		}
+
 		return true;
 	}
 	/**
+	 * Checks the current form for the CSRF Token field
+	 *
+	 * @return boolean
+	 */
+	public function checkCSRF() {
+		if($this->use_csrf == true) {
+			$key = $this->csrf_service->getContextKey("form_default");
+			if(!$key) {
+				return false;
+			}
+			if(!array_key_exists($key, $this->field_values)) {
+				return false;
+			}
+			if(!$this->csrf_service->checkCSRFToken("form_default", $this->field_values[$key])) {
+				return false;
+			}
+		}
+		return true;
+	}
+	/**
+	 * Create a CSRF Token
+	 *
+	 * @return array | boolean
+	 */
+	public function createCSRF() {
+		if($this->use_csrf == true) {
+			return $this->csrf_service->createCSRFToken("form_default");
+		}
+		return false;
+	}
+	/**
 	 * Runs all validations on the Request
 	 *
 	 * @return boolean
@@ -118,6 +170,13 @@ class FormHelper {
 
 		$error_messages = array();
 
+		// check the csrf token
+		if(!$this->checkCSRF()) {
+			echo "NOOO";
+			$this->error_messages[] = "The CSRF token could not be verified!";
+			return false;
+		}
+
 		// loop through all field configs
 		foreach ($this->field_configs as $name=>$config) {
 			$error_messages_field = array();
@@ -230,6 +289,14 @@ class FormHelper {
 		return $this->method;
 	}
 	/**
+	 * Returns true if the Helper uses CSRF tokens
+	 *
+	 * @return string
+	 */
+	public function useCSRF() {
+		return $this->use_csrf;
+	}
+	/**
 	 * Returns all form errors
 	 *
 	 * @return string
diff --git a/src/Helper/SanitizationHelper.php b/src/Helper/SanitizationHelper.php
index 5cfd9d0..c57ada4 100644
--- a/src/Helper/SanitizationHelper.php
+++ b/src/Helper/SanitizationHelper.php
@@ -4,6 +4,7 @@ namespace Helper;
  * SanitizationHelper is a collection of static functions that can be used by the FormHelper to sanatize form fields
  *
  * @author Korbinian Würl <korbinianwuerl@googlemail.com>
+ * @author Mai Ton Nu Cam <maitonnucam@googlemail.com>
  */
 class SanitizationHelper {
 	//TODO
@@ -14,4 +15,8 @@ class SanitizationHelper {
 	public static function ltrim($input) {
 		return ltrim($input);
 	}
+
+	public static function stripTags($input) {
+		return filter_var($input, FILTER_SANITIZE_STRING);
+	}
 }
\ No newline at end of file
diff --git a/src/Helper/TemplatingFormExtension.php b/src/Helper/TemplatingFormExtension.php
index 64c5b1d..bc9db0a 100644
--- a/src/Helper/TemplatingFormExtension.php
+++ b/src/Helper/TemplatingFormExtension.php
@@ -58,6 +58,11 @@ class TemplatingFormExtension extends TemplatingHelperExtension {
 			echo " ".$name."=\"".$option."\"";
 		}
 		echo ">";
+		if($helper->useCSRF() == true) {
+			
+			$token = $helper->createCSRF();
+			echo '<input type="hidden" name="'.$helper->getName().'['.$token["key"].']" value="'.$token["token"].'" />';
+		}
 		$closure($t);
 		// TODO: CSRF things
 		echo "</form>";
diff --git a/src/Helper/TemplatingHelper.php b/src/Helper/TemplatingHelper.php
index 50c741f..4f35356 100644
--- a/src/Helper/TemplatingHelper.php
+++ b/src/Helper/TemplatingHelper.php
@@ -133,6 +133,6 @@ class TemplatingHelper {
      */
     public function s($input) {
     	// TODO: sanitize input for use in template
-    	return $input;
+    	return htmlspecialchars($input);
     }
 }
\ No newline at end of file
diff --git a/src/Helper/ValidationHelper.php b/src/Helper/ValidationHelper.php
index d7c9790..eea8deb 100644
--- a/src/Helper/ValidationHelper.php
+++ b/src/Helper/ValidationHelper.php
@@ -41,7 +41,7 @@ class ValidationHelper {
 		return preg_match("/^[a-zA-ZäöüÄÖÜ][a-zA-ZäöüÄÖÜ\-\s]+$/u", $input);
 	}
 	/**
-	 * Checks if $input is a valid password
+	 * Checks if $input is a valid password. It has to be at least 6 characters, has at least one lower- and uppercase character and at least one digit.
 	 *
 	 * @param FormHelper $helper
 	 * @param string $input
@@ -49,7 +49,7 @@ class ValidationHelper {
 	 * @return boolean
 	 */
 	public static function password(FormHelper $helper, $input) {
-		return preg_match("/^[a-zA-Z0-9\\\+\?\^\$#\-_]+$/", $input);
+		return preg_match("/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?!.*[\säöüÄÖÜ%\/<>]).+$/u", $input);
 	}
 	/**
 	 * Checks if $input has the same value as the fields defined in $fields
@@ -96,4 +96,32 @@ class ValidationHelper {
 		}
 		return false;
 	}
+	/**
+	 * Checks if $input length >= $minLength
+	 *
+	 * @param FormHelper $helper
+	 * @param string $input
+	 * @param int $minLength
+	 *
+	 * @return boolean
+	 */
+	public static function minLength(FormHelper $helper, $input, $minLength=0) {
+		if ($minLength > 0) {
+			if (strlen($input) >= $minLength) {
+				return true;
+			}
+		}
+		return false;
+	}
+	/**
+	 * Checks if $input is a valid address
+	 *
+	 * @param FormHelper $helper
+	 * @param string $input
+	 *
+	 * @return boolean
+	 */
+	public static function address(FormHelper $helper, $input) {
+		return preg_match("/^[a-zA-ZäöüÄÖÜ][a-zA-ZäöüÄÖÜ\-\s.]+[0-9\-]+[a-zA-Z]*$/u", $input);
+	}
 }
\ No newline at end of file
diff --git a/src/Model/Customer.php b/src/Model/Customer.php
index 69ebe90..d602c94 100644
--- a/src/Model/Customer.php
+++ b/src/Model/Customer.php
@@ -4,11 +4,14 @@ namespace Model;
  * The Customer model class
  *
  * @author Swathi Shyam Sunder<swathi.ssunder@tum.de>
+ * @author Vivek Sethia<vivek.sethia@tum.de>
  */
 class Customer extends User {
 	private $address;
 	private $city;
 	private $postal_code;
+	private $is_account_balance_initialized = 0;
+	private $tan_method;
 
 	/**
 	 * Gets the customer address
@@ -58,4 +61,37 @@ class Customer extends User {
 	public function setPostalCode($postalCode) {
 		$this->postal_code = $postalCode;
 	}
+	/**
+	 * Gets the balance initialized status of the User account
+	 *
+	 * @return integer
+	 */
+	public function getIsAccountBalanceInitialized () {
+		return $this->is_account_balance_initialized;
+	}
+	/**
+	 * Sets the balance initialized status of the User account
+	 *
+	 * @param integer $isBalanceInitialized
+	 */
+	public function setIsAccountBalanceInitialized($isAccountBalanceInitialized) {
+		$this->is_account_balance_initialized = $isAccountBalanceInitialized;
+	}
+
+	/**
+	 * Gets tan method for the User account
+	 *
+	 * @return integer
+	 */
+	public function getTanMethod () {
+		return $this->tan_method;
+	}
+	/**
+	 * Sets the tan method for the User account
+	 *
+	 * @param integer $tanMethod
+	 */
+	public function setTanMethod($tanMethod) {
+		$this->tan_method = $tanMethod;
+	}
 }
\ No newline at end of file
diff --git a/src/Model/SCS.php b/src/Model/SCS.php
new file mode 100644
index 0000000..c387f9d
--- /dev/null
+++ b/src/Model/SCS.php
@@ -0,0 +1,60 @@
+<?php
+namespace Model;
+/**
+ * the SCS model class
+ *
+ * @author Swathi Shyam Sunder<swathi.ssunder@tum.de>
+ */
+class SCS {
+	private $id = 0;
+	private $customer_id = 0;
+	private $pin = "";
+	/**
+	 * Gets the id
+	 *
+	 * @return int
+	 */
+	public function getId() {
+		return $this->id;
+	}
+	/**
+	 * Sets the id
+	 *
+	 * @param int $id
+	 */
+	public function setId($id) {
+		$this->id = $id;
+	}
+	/**
+	 * Gets the customer id
+	 *
+	 * @return int
+	 */
+	public function getCustomerId() {
+		return $this->customer_id;
+	}
+	/**
+	 * Sets the customer id
+	 *
+	 * @param int $customer_id
+	 */
+	public function setCustomerId($customer_id) {
+		$this->customer_id = $customer_id;
+	}
+	/**
+	 * Gets the pin
+	 *
+	 * @return string
+	 */
+	public function getPin() {
+		return $this->pin;
+	}
+	/**
+	 * Sets the pin
+	 *
+	 * @param string $pin
+	 */
+	public function setPin($pin) {
+		$this->pin = $pin;
+	}
+}
\ No newline at end of file
diff --git a/src/Model/SCSRepository.php b/src/Model/SCSRepository.php
new file mode 100644
index 0000000..5c81a4a
--- /dev/null
+++ b/src/Model/SCSRepository.php
@@ -0,0 +1,9 @@
+<?php
+namespace Model;
+/**
+ * Repository class for the SCS model
+ *
+ * @author Swathi Shyam Sunder <swathi.ssunder@tum.de>
+ */
+class SCSRepository extends Repository {
+}
\ No newline at end of file
diff --git a/src/Model/Transaction.php b/src/Model/Transaction.php
index 034281d..7941fb0 100644
--- a/src/Model/Transaction.php
+++ b/src/Model/Transaction.php
@@ -4,10 +4,12 @@ namespace Model;
  * the Transaction model class
  *
  * @author Swathi Shyam Sunder <swathi.ssunder@tum.de>
+ * @author Vivek Sethia <vivek.sethia@tum.de>
  */
 class Transaction {
 	private $id = 0;
 	private $from_account_id = 0;
+	private $from_account_name = "";
 	private $to_account_id = 0;
 	private $to_account_name = "";
 	private $amount = 0;
@@ -176,4 +178,21 @@ class Transaction {
 	public function setIsRejected($isRejected) {
 		$this->is_rejected = $isRejected;
 	}
+
+	/**
+	 * Gets the from account name  of the transaction
+	 *
+	 * @return integer
+	 */
+	public function getFromAccountName() {
+		return $this->from_account_name;
+	}
+	/**
+	 * Sets the from account name of the transaction
+	 *
+	 * @param integer $fromAccountName
+	 */
+	public function setFromAccountName($fromAccountName) {
+		$this->from_account_name = $fromAccountName;
+	}
 }
\ No newline at end of file
diff --git a/src/Model/TransactionRepository.php b/src/Model/TransactionRepository.php
index fef7751..9ee38fe 100644
--- a/src/Model/TransactionRepository.php
+++ b/src/Model/TransactionRepository.php
@@ -18,7 +18,7 @@ class TransactionRepository extends Repository {
 		$statement = "SELECT TBL_TRANSACTION.*
 		 				FROM TBL_ACCOUNT, TBL_TRANSACTION
 		 				WHERE TBL_ACCOUNT.ACCOUNT_ID = TBL_TRANSACTION.FROM_ACCOUNT_ID
-		 				AND TBL_ACCOUNT.CUSTOMER_ID = :customerId";
+		 				AND TBL_ACCOUNT.CUSTOMER_ID = :customerId ORDER BY TBL_TRANSACTION.TRANSACTION_DATE DESC";
 
 		/* create a prepared statement */
 		if ($query = $this->db_wrapper->get()->prepare($statement)) {
@@ -41,8 +41,8 @@ class TransactionRepository extends Repository {
         $statement = "SELECT TBL_TRANSACTION.*
                         FROM TBL_ACCOUNT, TBL_TRANSACTION
                         WHERE (TBL_ACCOUNT.ACCOUNT_ID = TBL_TRANSACTION.FROM_ACCOUNT_ID
-                        OR TBL_ACCOUNT.ACCOUNT_ID = TBL_TRANSACTION.TO_ACCOUNT_ID) AND TBL_TRANSACTION.IS_ON_HOLD = 0
-                        AND TBL_ACCOUNT.CUSTOMER_ID = :customerId";
+                        OR TBL_ACCOUNT.ACCOUNT_ID = TBL_TRANSACTION.TO_ACCOUNT_ID) AND TBL_TRANSACTION.IS_ON_HOLD = 0 AND TBL_TRANSACTION.IS_REJECTED = 0
+                        AND TBL_ACCOUNT.CUSTOMER_ID = :customerId ORDER BY TBL_TRANSACTION.TRANSACTION_DATE DESC";
                         if ($limit)
                             $statement .= " LIMIT $limit ;";
 
@@ -103,7 +103,7 @@ class TransactionRepository extends Repository {
 				$result = $this->update($model, array("is_on_hold", "is_rejected", "is_closed"), array("id" => $transaction_id));
 				break;
 		}
-		return ($result == 1) ? "" : $result;
+		return $result;
 	}
 
 	/**
@@ -133,13 +133,26 @@ class TransactionRepository extends Repository {
 				}
 			}
 			$customer_id = $fromAccount->getCustomerId();
-			$transaction_code_id = $transactionCode->getCode();
-			$transactionCode->setIsUsed(1);
-			$result = $transactionCodeRepo->update($transactionCode, array("is_used"), array("code" => $transaction_code_id, "customer_id" => $customer_id));
+
+			/*If the transaction code is a string i.e., _TAN_METHOD_SCS case, then create a new transaction code model and add it.*/
+			if (is_string($transactionCode)) {
+				$transaction_code_id = $transactionCode;
+				$transactionCode = new TransactionCode();
+				$transactionCode->setCustomerId($customer_id);
+				$transactionCode->setCode($transaction_code_id);
+				$transactionCode->setIsUsed(1);
+				$result = $transactionCodeRepo->add($transactionCode);
+			} else {/*Transaction code model already exists i.e., _TAN_METHOD_EMAIL case, then just update the model.*/
+				$transaction_code_id = $transactionCode->getCode();
+				$transactionCode->setIsUsed(1);
+				$result = $transactionCodeRepo->update($transactionCode, array("is_used"), array("code" => $transaction_code_id, "customer_id" => $customer_id));
+			}
+
 			if (!$result) {
 				$db->rollBack();
 				return $result;
 			}
+
 			$db->commit();
 		} else {
 			$db->rollBack();
@@ -178,4 +191,28 @@ class TransactionRepository extends Repository {
 		}
 		return true;
 	}
+	/**
+     * returns the users transaction by category
+     *
+     * @param int  $customerId    The customers id
+     *
+     * @return array
+     */
+    public function getUserTransactionsCategorized($customerId){
+        $transactionList = $this->getByCustomerId($customerId);
+        /*Separate the transactions into completed and on-hold transactions.*/
+        $onHoldTransactionList = array();
+        $approvedTransactionList = array();
+        foreach ($transactionList as $transaction) {
+            $onHold = $transaction->getIsOnHold();
+            if ($onHold)
+                $onHoldTransactionList[] = $transaction;
+            else
+                $approvedTransactionList[] = $transaction;
+        }
+        return array(
+            'onHoldTransactionList' => $onHoldTransactionList,
+            'approvedTransactionList' => $approvedTransactionList
+            );
+    }
 }
\ No newline at end of file
diff --git a/src/Model/User.php b/src/Model/User.php
index bd8ec08..99c550d 100644
--- a/src/Model/User.php
+++ b/src/Model/User.php
@@ -20,6 +20,10 @@ class User {
 	protected $is_closed = 0;
 	protected $is_rejected = 0;
 	protected $_provider;
+	protected $token = "";
+	protected $token_valid_time = "";
+	protected $login_attempts = 0;
+	protected $locked_until = "";
 	/**
 	 * Gets the user id
 	 *
@@ -244,4 +248,68 @@ class User {
 	public function setRegistrationDate($registrationDate) {
 		$this->registration_date = $registrationDate;
 	}
+	/**
+	 * Gets the token
+	 *
+	 * @return string
+	 */
+	public function getToken() {
+		return $this->token;
+	}
+	/**
+	 * Sets the token
+	 *
+	 * @param string
+	 */
+	public function setToken($token) {
+		$this->token = $token;
+	}
+	/**
+	 * Gets the token valid time
+	 *
+	 * @return timestamp
+	 */
+	public function getTokenValidTime() {
+		return $this->token_valid_time;
+	}
+	/**
+	 * Sets the token valid time
+	 *
+	 * @param timestamp $tokenValidTime
+	 */
+	public function setTokenValidTime($tokenValidTime) {
+		$this->token_valid_time = $tokenValidTime;
+	}
+	/**
+	 * Gets the number of login attempts
+	 *
+	 * @return integer
+	 */
+	public function getLoginAttempts() {
+		return $this->login_attempts;
+	}
+	/**
+	 * Sets the numer of login attempts
+	 *
+	 * @param integer
+	 */
+	public function setLoginAttempts($loginAttempts) {
+		$this->login_attempts = $loginAttempts;
+	}
+	/**
+	 * Gets the locked until time
+	 *
+	 * @return timestamp
+	 */
+	public function getLockedUntil() {
+		return $this->locked_until;
+	}
+	/**
+	 * Sets the locked until time
+	 *
+	 * @param timestamp $lockedUntil
+	 */
+	public function setLockedUntil($lockedUntil) {
+		$this->locked_until = $lockedUntil;
+	}
 }
\ No newline at end of file
diff --git a/src/Model/UserRepository.php b/src/Model/UserRepository.php
index 6077234..d68a593 100644
--- a/src/Model/UserRepository.php
+++ b/src/Model/UserRepository.php
@@ -1,5 +1,7 @@
 <?php
 namespace Model;
+
+use \Exception\RegistrationIsClosedException;
 /**
  * Repository class for the User model
  *
@@ -22,8 +24,7 @@ abstract class UserRepository extends Repository {
         $user_id = $model->getId();
 
         if ($model->getIsClosed() == 1) {
-            $error = _ERROR_REGISTRATION_CLOSED;
-            return $error;
+            throw new RegistrationIsClosedException();
         }
         switch($action) {
             case _ACTION_APPROVE:
@@ -59,6 +60,6 @@ abstract class UserRepository extends Repository {
                 $result = $this->update($model, array("is_active", "is_rejected", "is_closed"), array("id" => $user_id));
                 break;
         }
-        return ($result == 1) ? "" : $result;
+        return $result;
     }
 }
\ No newline at end of file
diff --git a/src/Script/app.js b/src/Script/app.js
index 23e15a0..a7c265b 100644
--- a/src/Script/app.js
+++ b/src/Script/app.js
@@ -8,31 +8,13 @@
 var secureBank = {
     init : function(){
         $(document).ready(function(){
-            // enabling click functionality on user name click ( for prfoile view or logout )
-           /* $('.dropdown-toggle').on('click', function(){
-                if( !$(".user-menu").hasClass('open'))
-                    $(".user-menu").parent().addClass('open');
-                else
-                    $(".user-menu").parent().removeClass('open');
-            });
-            $('.sidebar-menu li').each(function(){
-                $(this).on("click",function(event){
-                    console.log('hi');
-                    if( !$(this).hasClass('active'))
-                        $(this).addClass('active');
-                    else
-                        $(this).removeClass('active');
-
-                });
-            });*/
-
             // initializing all the data tables
             $('.app-data-table').each(function () {
                 // var source = $(this).attr("data-source");
                 $(this).dataTable({
                     "paging": true,
+                    "aaSorting": [],
                     "lengthChange": false,
-                    "searching": false,
                     "ordering": true,
                     "info": true,
                     "autoWidth": false,
@@ -40,14 +22,7 @@ var secureBank = {
                     'aoColumnDefs': [{
                         'bSortable': false,
                         'aTargets': [-1]
-                    }],
-                    /* to remove pagination text when no data is there in the table */
-                    "fnDrawCallback":function(){
-                        var paginate_id = $(this).attr('id')+"_paginate";
-                        if( $('#'+paginate_id+' > ul li').length == 2)  {
-                            $('#'+paginate_id).parent().parent().css('display',"none");
-                        }
-                    }
+                    }]
                 });
             });
 
@@ -56,8 +31,8 @@ var secureBank = {
                 // var source = $(this).attr("data-source");
                 $(this).dataTable({
                     "paging": true,
+                    "aaSorting": [],
                     "lengthChange": false,
-                    "searching": false,
                     "ordering": true,
                     "info": true,
                     "autoWidth": false,
@@ -65,14 +40,7 @@ var secureBank = {
                     'aoColumnDefs': [{
                         'bSortable': false,
                         'aTargets': [-1]
-                    }],
-                    /* to remove pagination text when no data is there in the table */
-                    "fnDrawCallback":function(){
-                        var paginate_id = $(this).attr('id')+"_paginate";
-                        if( $('#'+paginate_id+' > ul li').length == 2)  {
-                            $('#'+paginate_id).parent().parent().css('display',"none");
-                        }
-                    }
+                    }]
                 });
             });
             // for download of pdf
@@ -99,63 +67,55 @@ var secureBank = {
             $('.main-sidebar').css({'height':(($(document).height()))+'px'});
 
             // ==== Approve/ Reject Transaction operations =======//
-            $('#approve_trans_table').find('.btn-info').on('click',function(){
-                var transaction_id = $(this).parent().parent().find('td.app-transaction-id').html();
-                $('#selectedTransactionId').val(transaction_id);
-                $('#action_transaction').val(1);
-            });
-
-            $('#approve_trans_table').find('.btn-reject').on('click',function(){
-                var transaction_id = $(this).parent().parent().find('td.app-transaction-id').html();
-                $('#selectedTransactionId').val(transaction_id);
-                $('#action_transaction').val(2);
-            });
-
-            $('#approveTransModal').find('.btn-primary').on('click',function(){
-                var approval_form = document.forms['approve_transaction'];
-                approval_form.submit();
-            });
-
-            $('#rejectTransModal').find('.btn-primary').on('click',function(){
-                var approval_form = document.forms['approve_transaction'];
-                approval_form.submit();
-            });
-            // ==== Approve/ Reject Transaction operations ends =======//
-
-            // ==== Approve/ Reject Registration operations =======//
-            $('#employee_regsitrations_table .btn-info').on('click',function(){
-                var employee_id = $(this).parent().attr('id');
-                $('#selectedUserId').val(employee_id);
-                $('#action_registration').val(1);
-            });
-
-            $('#employee_regsitrations_table .btn-reject').on('click',function(){
-                var employee_id = $(this).parent().attr('id');
-                $('#selectedUserId').val(employee_id);
-                $('#action_registration').val(2);
-            });
+            $(document).on("submit", "form[data-confirm-modal]", function(event) {
+                var confirm_modal = $(' \
+                    <!-- Approve Transaction Modal --> \
+                    <div id="confirm-modal" class="modal fade" role="dialog" tabindex="-1"> \
+                        <div class="modal-dialog"> \
+                            <!-- Modal content--> \
+                            <div class="modal-content"> \
+                                <div class="modal-header"> \
+                                    <button type="button" class="close" data-dismiss="modal"><i class="fa fa-times"></i></button> \
+                                    <h4 class="modal-title">'+$(this).attr("data-modal-title")+'</h4> \
+                                </div> \
+                                <div class="modal-body"> \
+                                    '+$(this).attr("data-modal-body")+' \
+                                </div> \
+                                <!-- /.box-body --> \
+                                <div class="modal-footer"> \
+                                    <button type="submit" class="btn btn-primary">Yes</button> \
+                                    <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button> \
+                                </div> \
+                            </div> \
+                        </div> \
+                    </div>');
+                $("body").append(confirm_modal);
+                //$('#confirm-modal .hide').show();
+                $('#confirm-modal').on('hidden.bs.modal', function(){
+                    $('#confirm-modal').remove();
+                });
+                event.preventDefault();
+                var that = this;
+                $('#confirm-modal').modal("show");
+                $('#confirm-modal').find('.btn-primary').on('click', function() {
+                    $(this).unbind("click");
+                    that.submit();
 
-            $('#customer_reg_pending .btn-info').on('click',function(){
-                var employee_id = $(this).parent().attr('id');
-                $('#selectedUserId').val(employee_id);
-                $('#action_registration').val(1);
+                });
+                //console.log("Hi");
+                //this.submit();
             });
 
-            $('#customer_reg_pending .btn-reject').on('click',function(){
-                var employee_id = $(this).parent().attr('id');
-                $('#selectedUserId').val(employee_id);
-                $('#action_registration').val(2);
+            $(document).on("click", ".set-balance", function(event) {
+                $('#balance_customer_id').val($(this).attr("data-customer-id"));
+                $('#setBalanceModal').modal("show");
+                $('#setBalanceModal').find('.btn-primary').on('click', function() {
+                    $(this).unbind("click");
+                    $('#balance_form').submit();
+                });
             });
 
-            $('#approveRegModal').find('.btn-primary').on('click',function(){
-                var action_registration_form = document.forms['action_registration_form'];
-                action_registration_form.submit();
-            });
 
-            $('#rejectRegModal').find('.btn-primary').on('click',function(){
-                var action_registration_form = document.forms['action_registration_form'];
-                action_registration_form.submit();
-            });
         });
     }
 };
diff --git a/src/Service/AccountService.php b/src/Service/AccountService.php
index 1fc0512..450ad8f 100644
--- a/src/Service/AccountService.php
+++ b/src/Service/AccountService.php
@@ -24,7 +24,7 @@ class AccountService {
 	 */
 	public function generateAccount($customer_id) {
         do {
-            $account_id = rand(1234567890, 2147483647);
+            $account_id = ACCOUNT_ID_PREFIX + $customer_id;
         } while ($this->repository->findOne(array("account_id" => $account_id)));
         return $account_id;
 	}
diff --git a/src/Service/AuthService.php b/src/Service/AuthService.php
index 4a5bf32..d28c024 100644
--- a/src/Service/AuthService.php
+++ b/src/Service/AuthService.php
@@ -8,10 +8,12 @@ use Auth\AuthProvider;
  * AuthService is used to manage logins and sessions
  *
  * @author Korbinian Würl <korbinianwuerl@googlemail.com>
+ * @author Mai Ton Nu Cam <maitonnucam@googlemail.com>
  */
 class AuthService {
 	private $session_service;
 	private $routing_service;
+	private $random_service;
 	private $user_providers = array();
 	private $current_user;
 	private $login_route_name;
@@ -19,9 +21,10 @@ class AuthService {
 	/**
 	 * Constructor
 	 */
-	function __construct(SessionService $session_service, RoutingService $routing_service, $login_route_name) {
+	function __construct(SessionService $session_service, RoutingService $routing_service, RandomSequenceGeneratorService $random_service, $login_route_name) {
 		$this->session_service = $session_service;
 		$this->routing_service = $routing_service;
+		$this->random_service = $random_service;
 		$this->login_route_name = $login_route_name;
 	}
 	/**
@@ -123,8 +126,9 @@ class AuthService {
 	 *
 	 * @return boolean
 	 *
-	 * @throws UserNotFoundException
 	 * @throws UserNotEnabledException
+	 * @throws UserLockedException
+	 * @throws LoginFailedException
 	 */
 	private function verify(User $user) {
 		foreach($this->user_providers as $provider) {
@@ -143,10 +147,16 @@ class AuthService {
 	 * @return boolean
 	 *
 	 * @throws UserNotFoundException
-	 * @throws UserNotEnabledException
 	 */
 	public function login(User $user) {
 		if ($user = $this->verify($user)) {
+			// unlock user after successful login
+			$user->setLoginAttempts(0);
+			$user->setLockedUntil("");
+			if (method_exists($user->getProvider(), "getRepository")) {
+				$user->getProvider()->getRepository()->update($user, array("login_attempts", "locked_until"), array("email" => $user->getEmail()));
+			}
+
 			if ($this->session_service->has("redirect_after_login")) {
 				$redirect_after_login = $this->session_service->get("redirect_after_login");
 				$redirect_name = $redirect_after_login[0];
@@ -170,6 +180,7 @@ class AuthService {
 			if ($this->session_service->has("redirect_after_login")) {
 				$this->session_service->del("redirect_after_login");
 			}
+			throw new \Exception("UserNotFoundException");
 			return false;
 		}
 	}
@@ -217,7 +228,81 @@ class AuthService {
 	 * @return boolean
 	 */
 	public function logout() {
-			$this->session_service->reset();
-			$this->routing_service->redirect($this->login_route_name, array());
+		$this->session_service->reset();
+		$this->routing_service->redirect($this->login_route_name, array());
+	}
+	/**
+	 * Creates a token for password recovery and sets the valid time for it.
+	 *
+	 * @param User $user
+	 *
+	 * @return User | boolean
+	 */
+	public function createToken(User $user) {
+		$token = str_replace(array("+", "&", "/"), "", $this->random_service->getString(16));
+		// set token valid time to _TOKEN_VALID_TIME minutes
+		$token_valid_time = date("Y-m-d H:i:s", time()+(_TOKEN_VALID_TIME*60));
+		$user->setToken($token);
+		$user->setTokenValidTime($token_valid_time);
+		foreach ($this->user_providers as $provider) {
+			if (method_exists($provider, 'getRepository')) {
+				if ($provider->getRepository()->update(
+											$user,
+											array("token", "token_valid_time"),
+											array("email" => $user->getEmail())
+										)) {
+					return $user;
+				}
+			}
+		}
+		return false;
+	}
+	/**
+	 * Gets the User for a token.
+	 *
+	 * @param string $token
+	 *
+	 * @return User | boolean
+	 */
+	public function getUserFromToken($token) {
+		foreach ($this->user_providers as $provider) {
+			if (method_exists($provider, 'getRepository')) {
+				if ($user = $provider->getRepository()->findOne(array("token" => $token))) {
+					if (date("Y-m-d H:i:s") <= $user->getTokenValidTime()) {
+						return $user;
+					}
+				}
+			}
+		}
+		return false;
+	}
+	/**
+	 * Sets a new password for a User and resets token.
+	 *
+	 * @param string $token
+	 * @param string $password
+	 *
+	 * @return User | boolean
+	 */
+	public function setNewPassword($token, $password) {
+		$model = $this->getUserFromToken($token);
+		if ($model !== false) {
+			$salt = $this->random_service->getString(16);
+			$model->setSalt($salt);
+			$model->setPassword(crypt($password, $salt));
+
+			// reset token
+			$model->setToken("");
+			$model->setTokenValidTime("");
+
+			foreach ($this->user_providers as $provider) {
+				if (method_exists($provider, 'getRepository')) {
+					if ($provider->getRepository()->update($model, array("salt", "password", "token", "token_valid_time"), array("token" => $token))) {
+						return $model;
+					}
+				}
+			}
+		}
+		return false;
 	}
 }
\ No newline at end of file
diff --git a/src/Service/CSRFService.php b/src/Service/CSRFService.php
index 20e455e..5b413ae 100644
--- a/src/Service/CSRFService.php
+++ b/src/Service/CSRFService.php
@@ -7,14 +7,15 @@ namespace Service;
  */
 class CSRFService {
 	private $session_service;
+	private $random_service;
 	private $lifetime;
 	/**
 	 * Constructor
 	 */
-	function __construct (SessionService $session_service, $lifetime=0) {
+	function __construct (SessionService $session_service, RandomSequenceGeneratorService $random_service,  $lifetime=0) {
 		$this->session_service = $session_service;
 		$this->lifetime = $lifetime;
-
+		$this->random_service = $random_service;
 		// Validate all CSRF tokens and throw out the expired ones
 		$this->validateCSRF();
 	}
@@ -26,14 +27,36 @@ class CSRFService {
 	 * @return string
 	 */
 	public function createCSRFToken($context) {
-		$token = $this->random_service->getHash();
 		$tokens = $this->session_service->get("csrf_tokens");
-		$tokens[$context] = array("token"=>$token, "expires"=>time()+$this->lifetime);
+		if(array_key_exists($context, $tokens)) {
+			$tokens[$context]["expires"] = time()+$this->lifetime;
+			$this->session_service->set("csrf_tokens", $tokens);
+			return $tokens[$context];
+		}
+		$token_hash = $this->random_service->getHash();
+		$key = $this->random_service->getHash();
+		$token = array("key"=>$key,"token"=>$token_hash, "expires"=>time()+$this->lifetime);
+		$tokens[$context] = $token;
 		$this->session_service->set("csrf_tokens", $tokens);
 		return $token;
 	}
 	/**
-	 * Checks a CSRF Token and deletes it out of the session
+	 * Creates a new CSRF Token which is saved within the Session
+	 *
+	 * @param string $context		Name of the Token
+	 *
+	 * @return string
+	 */
+	public function getContextKey($context) {
+		$tokens = $this->session_service->get("csrf_tokens");
+		if(array_key_exists($context, $tokens)) {
+			$token = $tokens[$context];
+			return $token["key"];
+		}
+		return false;
+	}
+	/**
+	 * Checks a CSRF Token
 	 *
 	 * @param string $context		Name of the Token
 	 * @param string $token	 The CSRF Token
@@ -42,10 +65,9 @@ class CSRFService {
 	 */
 	public function checkCSRFToken($context, $token) {
 		$tokens = $this->session_service->get("csrf_tokens");
-		if(in_array($context, $tokens)) {
-			$token = $tokens[$context];
-			if($token["token"] == $token) {
-				unset($tokens[$context]);
+		if(array_key_exists($context, $tokens)) {
+			$token_n = $tokens[$context];
+			if($token_n["token"] == $token) {
 				return true;
 			}
 		}
@@ -60,7 +82,7 @@ class CSRFService {
 		$tokens = $this->session_service->get("csrf_tokens");
 		$tokens_new = array();
 		foreach ($tokens as $token_name=>$token) {
-			if($token["expires"] >= time()) {
+			if($token["expires"] >= time() || $token["expires"] == 0) {
 				$tokens_new[$token_name] = $token;
 			}
 		}
diff --git a/src/Service/CustomerService.php b/src/Service/CustomerService.php
new file mode 100644
index 0000000..593ffe9
--- /dev/null
+++ b/src/Service/CustomerService.php
@@ -0,0 +1,142 @@
+<?php
+namespace Service;
+
+use \Model\AccountRepository;
+use \Model\CustomerRepository;
+
+/**
+ * This Service is used for anything which has to do with Customer
+ */
+
+class CustomerService {
+	private $account_repository;
+    private $customer_repository;
+	private $account;
+	private $transaction_code;
+	private $pdf;
+	private $email;
+	private $scs;
+	/**
+	 * Constructor
+	 */
+	function __construct(
+		AccountRepository $account_repository, 
+        CustomerRepository $customer_repository,
+		AccountService $account, 
+		TransactionCodeService $transaction_code,
+		PdfService $pdf,
+		EmailService $email,
+		SCSService $scs
+    ) {
+		$this->account_repository = $account_repository;
+        $this->customer_repository = $customer_repository;
+		$this->account = $account;
+		$this->transaction_code = $transaction_code;
+		$this->pdf = $pdf;
+		$this->email = $email;
+		$this->scs = $scs;
+	}
+	/**
+	 * Initializes a customer Account
+	 *
+	 * @param Customer $user_model    The customer to initialize
+	 *
+	 * @throws Exception
+	 */
+	public function initialize($user_model) {
+
+        // fill the model
+        $account_model = new \Model\Account();
+        $account_id = $this->account->generateAccount($user_model->getId());
+
+        $account_model->setAccountId($account_id);
+        $account_model->setCustomerId($user_model->getId());
+        $account_model->setType("SAVINGS");
+        $account_model->setIsActive(1);
+        $tan_method = $user_model->getTanMethod();
+
+        if($this->customer_repository->actOnRegistration($user_model, _ACTION_APPROVE, $this->account_repository, $account_model) == false) {
+        	throw new \Exception("Customer could not be approved");
+        }
+
+        if($tan_method == _TAN_METHOD_EMAIL) {
+            // send email with transaction codes
+            $tans = $this->transaction_code->generateTransactionCodeSet($user_model->getId());
+
+            if ($tans) {
+                $pdf_password = trim(substr($user_model->getLastName(), 0, 2)) . trim(substr($account_id, -4)) . trim(substr($user_model->getFirstName(), 0, 2));
+                $pdf_password_length = strlen($pdf_password);
+                if ($pdf_password_length < 8) {
+                    $pdf_password .= str_repeat('x', (8 - $pdf_password_length));
+                }
+
+                $this->sendTanEmail($user_model, $tans, $pdf_password);
+                
+            } else {
+                // TODO: rollback of customer approval and account generation if transaction code generation failed
+                throw new \Exception("There was an error with generating the transaction codes.");
+            }
+        } else {
+
+            $scs_pin = $this->scs->generateSCSPin($user_model->getId());
+            // sends email after SCS Pin generation
+            if($scs_pin) {
+            	$this->sendScsEmail($user_model, $scs_pin);
+            } else {
+                throw new \Exception("There was an error in generating SCS pin.");
+            }
+        }
+	}
+	/**
+	 * Sends the tan email
+	 *
+	 * @param Customer $user_model    The customer
+	 * @param array $tans    The tan array
+	 * @param string $pdf_password    The pdf password
+	 *
+	 * @throws Exception
+	 */
+	private function sendTanEmail($user_model, $tans, $pdf_password) {
+		$attachment = $this->pdf->generatePdfWithTans($tans, $pdf_password);
+        $subject = "Your registration at SecureBank was successful";
+        $email_msg = "Dear ".$user_model->getFirstName()."&nbsp;".$user_model->getLastName().",<br/><br/>".
+                      "Your registration was approved.<br/>".
+                      "Kindly find the attachment with the TANs. Note that the document is password protected.<br/><br/>".
+                      "The password is formed by the first two characters of your last name, last four characters of your account number and the first two characters of your first name.<br/>".
+                      "If your first name is John, last name is Doe and account number is xxxxxx1234, your password will be <b>Do1234Jo</b>.<br>".
+                      "Please do not share TANs with anyone.<br/><br/>Have a nice day.<br/><br/> Your SecureBank";
+        $attachmentName = time() . "_TAN.pdf";
+        $this->email->sendMailWithAttachment(
+            $user_model->getEmail(),
+            $subject,
+            $email_msg,
+            $attachment,
+            $attachmentName
+        );
+	}
+	/**
+	 * sends the scs email
+	 *
+	 * @param Customer $user_model    The customer
+	 * @param string $scs_pin    The scs pin
+	 *
+	 * @throws Exception
+	 */
+	private function sendScsEmail($user_model, $scs_pin) {
+		$subject = "Your registration at SecureBank was successful";
+        $email_msg = "Dear ".$user_model->getFirstName()."&nbsp;".$user_model->getLastName().",<br/><br/>".
+                      "Your registration was approved.<br/>".
+                      "The 6-digit pin for your Smart Card Simulator is <b>".$scs_pin."</b>.<br/><br/>".
+                      "To use the Smart Card Simulator, follow the below steps.<br/>".
+                      "1. Login to the bank and download the \"SCS\".<br/>".
+                      "2. Extract the downloaded file to get SecureBank-SCS.jar.<br/>".
+                      "3. If you are a Windows user, double click on the .jar file to run the application. If you are a Linux user, use the command \"java -jar SecureBank-SCS.jar\".<br/>".
+                      "The SCS is now ready to be used.<br/><br/>".
+                      "Please do not share the SCS pin with anyone.<br/><br/>Have a nice day.<br/><br/> Your SecureBank";
+        $this->email->sendMail(
+            $user_model->getEmail(),
+            $subject,
+            $email_msg
+        );
+	}
+}
\ No newline at end of file
diff --git a/src/Service/EmailService.php b/src/Service/EmailService.php
index bd62b05..bfe8dcc 100644
--- a/src/Service/EmailService.php
+++ b/src/Service/EmailService.php
@@ -5,6 +5,7 @@ namespace Service;
  * This Service can be used to send e-mails
  *
  * @author Mai Ton Nu Cam <maitonnucam@googlemail.com>
+ * @author Vivek Sethia<vivek.sethia@tum.de>
  */
 class EmailService {
 	private $sender_email = "";
@@ -39,4 +40,50 @@ class EmailService {
 		}
 		return false;
 	}
+	
+    /**
+	 * Sends an e-mail to $recipient with subject, msg and an attachment
+	 *
+	 * @param string $recipient
+	 * @param string $subject
+	 * @param string $msg
+	 * @param $attachment
+	 * @param string $attachmentName
+	 *
+	 * @return boolean
+	 */
+	public function sendMailWithAttachment($recipient, $subject, $msg, $attachment, $attachmentName) {
+		if (\Helper\ValidationHelper::email(new \Helper\FormHelper("helper"), $recipient)) {
+		     // a random hash will be necessary to send mixed content
+			$separator = md5(time());
+			// carriage return type (we use a PHP end of line constant)
+			$eol = PHP_EOL;
+		    
+		    // main header (multipart mandatory)
+			$headers = "From: Secure Bank < ".$this->sender_email.">".$eol;
+			$headers .= "MIME-Version: 1.0".$eol;
+			$headers .= "Content-Type: multipart/mixed; boundary=\"".$separator."\"".$eol.$eol;
+			$headers .= "Content-Transfer-Encoding: 7bit".$eol;
+			$headers .= "This is a MIME encoded message.".$eol.$eol;
+			// message
+			$headers .= "--".$separator.$eol;
+			$headers .= "Content-Type: text/html; charset=\"iso-8859-1\"".$eol;
+			$headers .= "Content-Transfer-Encoding: 8bit".$eol.$eol;
+			$headers .= $msg.$eol.$eol;
+			// attachment
+			$headers .= "--".$separator.$eol;
+			$headers .= "Content-Type: application/octet-stream; name=\"".$attachmentName."\"".$eol;
+			$headers .= "Content-Transfer-Encoding: base64".$eol;
+			$headers .= "Content-Disposition: attachment".$eol.$eol;
+			$headers .= $attachment.$eol.$eol;
+			$headers .= "--".$separator."--";
+
+			if (mail($recipient, $subject, $msg, $headers)) {
+				return true;
+			}
+		} else {
+			throw new \Exception("'$recipient' is not a valid e-mail address!");
+		}
+		return false;
+	}
 }
\ No newline at end of file
diff --git a/src/Service/FormService.php b/src/Service/FormService.php
new file mode 100644
index 0000000..0be7d77
--- /dev/null
+++ b/src/Service/FormService.php
@@ -0,0 +1,28 @@
+<?php
+namespace Service;
+use \Helper\FormHelper;
+
+/**
+ * This Service is used to spawn form helpers
+ */
+class FormService {
+	protected $csrf_service;
+	/**
+	 * Constructor
+	 */
+	function __construct(CSRFService $csrf_service) {
+		$this->csrf_service = $csrf_service;
+	}
+	/**
+	 * Returns a Form Helpeer
+	 *
+	 * @param string $form_name   The Forms name
+	 * @param string $method    The form method
+	 *
+	 * @return FormHelper
+	 */
+	public function getCSRFFormHelper($form_name, $method="POST") {
+        $helper = new FormHelper($form_name, $method, $this->csrf_service);
+        return $helper;
+	}
+}
\ No newline at end of file
diff --git a/src/Service/PdfService.php b/src/Service/PdfService.php
new file mode 100644
index 0000000..aeb55c8
--- /dev/null
+++ b/src/Service/PdfService.php
@@ -0,0 +1,47 @@
+<?php
+namespace Service;
+
+/**
+ * This Service can be used to provide PDF related services
+ *
+ * @author Vivek Sethia <vivek.sethia@tum.de>
+ */
+class PdfService {
+	/**
+	 * Constructor
+	 */
+	function __construct() {
+		
+	}
+	/**
+	 * Creates pdf containing TANS for newly registered customers
+	 *
+	 * @param array $tans
+	 * @param string $pdfPassword
+	 *
+	 * @return boolean
+	 */
+	public function generatePdfWithTans($tans, $pdfPassword) {
+		$pdf=new \FPDF_Protection();
+		$pdf->SetProtection(array('print'), $pdfPassword);
+		$pdf->AddPage();
+		$pdf->SetFont('Arial');
+		$pdf->SetFont('Arial','',12);
+		$pdf->SetFillColor(224,224,224);
+		$pdf->Cell(10,12,"No.",1,0,'C',true);
+		$pdf->Cell(50,12,"TAN Codes",1,0,'C',true);
+		$pdf->Ln();
+		$i = 1;
+		foreach ($tans as $key => $tan) {
+		   $pdf->Cell(10,8,$i++,1,0,'C',false);
+		   $pdf->Cell(50,8,$tan->getCode(),1,0,'C',false);
+		   $pdf->Ln();
+		}
+
+		$pdfdoc = $pdf->Output("", "S");
+		ob_end_clean();
+	    // encode data (puts attachment in proper format)
+		$attachment = chunk_split(base64_encode($pdfdoc));
+		return $attachment;
+	}
+}
\ No newline at end of file
diff --git a/src/Service/RandomSequenceGeneratorService.php b/src/Service/RandomSequenceGeneratorService.php
index e86694a..886c3ec 100644
--- a/src/Service/RandomSequenceGeneratorService.php
+++ b/src/Service/RandomSequenceGeneratorService.php
@@ -13,7 +13,7 @@ class RandomSequenceGeneratorService {
 	 *
 	 * @return string
 	 */
-	public static function getString($length) {
+	public function getString($length) {
 	    /*Use random_bytes() if it is defined. Else, use openssl_random_pseudo_bytes*/
 	    if (function_exists('random_bytes'))
 			$bytes = random_bytes($length);
@@ -28,7 +28,7 @@ class RandomSequenceGeneratorService {
 	 *
 	 * @return string
 	 */
-	public static function getHash() {
+	public function getHash() {
 		return sha1($this->getString(40));
 	}
 }
\ No newline at end of file
diff --git a/src/Service/RoutingService.php b/src/Service/RoutingService.php
index 1a54293..272a52e 100644
--- a/src/Service/RoutingService.php
+++ b/src/Service/RoutingService.php
@@ -20,7 +20,7 @@ class RoutingService {
         ':num' => '[0-9]+',
         ':all' => '.*'
     );
-    private $error_callback;
+    private $error_callbacks = array();
     private $current_request;
     /**
 	 * Constructor
@@ -56,9 +56,9 @@ class RoutingService {
 	 *
 	 * @param function $callback	Anonymous function to call if a route is not found
 	 */
-    public function error($callback)
+    public function error($nr, $callback)
     {
-        $this->error_callback = $callback;
+        $this->error_callbacks[$nr] = $callback;
     }
     
     /**
@@ -75,89 +75,101 @@ class RoutingService {
 	 */
     public function dispatch()
     {
-    	$request = new \Helper\Request();
-        $this->current_request = $request;
-        $uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);
-        $method = $_SERVER['REQUEST_METHOD'];  
-        $searches = array_keys($this->patterns);
-        $replaces = array_values($this->patterns);
-        $found_route = false;
-        
-        $this->routes = str_replace('//', '/', $this->routes);
-        // check if route is defined without regex
-        if (in_array($uri, $this->routes)) {
-            $route_pos = array_keys($this->routes, $uri);
-            foreach ($route_pos as $route) {
-                if ($this->methods[$route] == $method) {
-                    $found_route = true;
-                    //if route is not an object 
-                    if(!is_object($this->callbacks[$route])){
-
-                    	$rout_conf = explode(":", $this->callbacks[$route]);
+        try {
+        	$request = new \Helper\Request();
+            $this->current_request = $request;
+            $uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);
+            $method = $_SERVER['REQUEST_METHOD'];  
+            $searches = array_keys($this->patterns);
+            $replaces = array_values($this->patterns);
+            $found_route = false;
+            
+            $this->routes = str_replace('//', '/', $this->routes);
+            // check if route is defined without regex
+            if (in_array($uri, $this->routes)) {
+                $route_pos = array_keys($this->routes, $uri);
+                foreach ($route_pos as $route) {
+                    if ($this->methods[$route] == $method) {
+                        $found_route = true;
+                        //if route is not an object 
+                        if(!is_object($this->callbacks[$route])){
 
-                    	$controller_service = $this->service_container->get($rout_conf[0]);
+                        	$rout_conf = explode(":", $this->callbacks[$route]);
 
-                    	if(!method_exists($controller_service, $rout_conf[1])) throw new \Exception("Controller ".$rout_conf[0]." does not have method ".$rout_conf[1]."!");
+                        	$controller_service = $this->service_container->get($rout_conf[0]);
 
-                        $this->current_request->setRouteName($this->names[$route]);
+                        	if(!method_exists($controller_service, $rout_conf[1])) throw new \Exception("Controller ".$rout_conf[0]." does not have method ".$rout_conf[1]."!");
 
-                    	call_user_func_array(array($controller_service, $rout_conf[1]), array($this->current_request));
-                        
-                        if ($this->halts) return;
-                        
-                    } else {
-                        //call closure
-                        call_user_func($this->callbacks[$route]);
-                        if ($this->halts) return;
+                            $this->current_request->setRouteName($this->names[$route]);
+                        	   
+                            call_user_func_array(array($controller_service, $rout_conf[1]), array($this->current_request));
+                            
+                            if ($this->halts) return;
+                            
+                        } else {
+                            //call closure
+                            call_user_func($this->callbacks[$route]);
+                            if ($this->halts) return;
+                        }
                     }
                 }
-            }
-        } else {
-            // check if defined with regex
-            $pos = 0;
-            foreach ($this->routes as $route_id=>$route) {
-                if (strpos($route, ':') !== false) {
-                    $route = str_replace($searches, $replaces, $route);
-                }
-                if (preg_match('#^' . $route . '$#', $uri, $matched)) {
-                    if ($this->methods[$pos] == $method) {
-                        $found_route = true;
-                        array_shift($matched); //remove $matched[0] as [1] is the first parameter.
-                        if(!is_object($this->callbacks[$pos])){
+            } else {
+                // check if defined with regex
+                $pos = 0;
+                foreach ($this->routes as $route_id=>$route) {
+                    if (strpos($route, ':') !== false) {
+                        $route = str_replace($searches, $replaces, $route);
+                    }
+                    if (preg_match('#^' . $route . '$#', $uri, $matched)) {
+                        if ($this->methods[$pos] == $method) {
+                            $found_route = true;
+                            array_shift($matched); //remove $matched[0] as [1] is the first parameter.
+                            if(!is_object($this->callbacks[$pos])){
 
-                           $rout_conf = explode(":", $this->callbacks[$pos]);
+                               $rout_conf = explode(":", $this->callbacks[$pos]);
 
-	                    	$controller_service = $this->service_container->get($rout_conf[0]);
+    	                    	$controller_service = $this->service_container->get($rout_conf[0]);
 
-	                    	if(!method_exists($controller_service, $rout_conf[1])) throw new \Exception("Controller ".$rout_conf[0]." does not have method ".$rout_conf[1]."!");
+    	                    	if(!method_exists($controller_service, $rout_conf[1])) throw new \Exception("Controller ".$rout_conf[0]." does not have method ".$rout_conf[1]."!");
 
-                            $this->current_request->setRouteName($this->names[$route_id]);
-                            $this->current_request->setRouteParams($matched);
+                                $this->current_request->setRouteName($this->names[$route_id]);
+                                $this->current_request->setRouteParams($matched);
 
-	                    	call_user_func_array(array($controller_service, $rout_conf[1]), array_merge(array($request), $matched));
-    
-                            if ($this->halts) return;
-                        } else {
-                            call_user_func_array($this->callbacks[$pos], $matched);
+    	                    	call_user_func_array(array($controller_service, $rout_conf[1]), array_merge(array($request), $matched));
+        
+                                if ($this->halts) return;
+                            } else {
+                                call_user_func_array($this->callbacks[$pos], $matched);
+                                
+                                if ($this->halts) return;
+                            }
                             
-                            if ($this->halts) return;
                         }
-                        
                     }
+                $pos++;
                 }
-            $pos++;
             }
+        } catch (\Exception $e) {
+            if(_DEBUG === true) throw $e;
+            if (!array_key_exists("503", $this->error_callbacks)) {
+                $this->error_callbacks["503"] = function() {
+                    header($_SERVER['SERVER_PROTOCOL']." 503 Fail...");
+                    echo '503';
+                };
+            }
+            call_user_func($this->error_callbacks["503"]);
+            return;
         }
  
         // run the error callback if the route was not found
         if ($found_route == false) {
-            if (!$this->error_callback) {
-                $this->error_callback = function() {
+            if (!array_key_exists("404", $this->error_callbacks)) {
+                $this->error_callbacks["404"] = function() {
                     header($_SERVER['SERVER_PROTOCOL']." 404 Not Found");
                     echo '404';
                 };
             }
-            call_user_func($this->error_callback);
+            call_user_func($this->error_callbacks["404"]);
         }
     }
 
diff --git a/src/Service/SCSService.php b/src/Service/SCSService.php
new file mode 100644
index 0000000..c90b4be
--- /dev/null
+++ b/src/Service/SCSService.php
@@ -0,0 +1,71 @@
+<?php
+namespace Service;
+
+use Model\SCS;
+use Model\SCSRepository;
+/**
+ * This Service is used to provide SCS-related services
+ *
+ * @author Swathi Shyam Sunder <swathi.ssunder@tum.de>
+ *
+ */
+class SCSService {
+	private $repository;
+	private $random;
+	/**
+	 * Constructor
+	 */
+	function __construct(SCSRepository $repository, RandomSequenceGeneratorService $random) {
+		$this->repository = $repository;
+		$this->random = $random;
+	}
+	/**
+	 * Returns the unique SCS pin
+	 *
+	 * @param id $customer_id    The customer id to generate the SCS pin for
+	 *
+	 * @return string|boolean    Returns SCS pin or false if there was an error
+	 */
+	public function generateSCSPin($customer_id) {
+        do {
+            $scs_pin = $this->random->getString(6);
+        } while ($this->repository->findOne(array("pin" => $scs_pin)));
+
+        $success = false;
+
+        $scs_instance = new SCS();
+        $scs_instance->setCustomerId($customer_id);
+        $scs_instance->setPin($scs_pin);
+        if ($this->repository->add($scs_instance)) {
+            return $scs_pin;
+        }
+        return false;
+	}
+	/**
+     * Returns the scs pin for the specified customer
+     *
+     * @param int $customer_id    The customer id
+     *
+     * @return string|boolean    Returns the pin for the specified customer, if found and false otherwise
+     */
+    public function getPin($customer_id) {
+        $db_result = $this->repository->findOne(array("customer_id" => $customer_id));
+        if ($db_result) {
+            return $db_result->getPin();
+        }
+        return false;
+    }
+    /**
+     * Generates a TAN code based on the input string provided
+     *
+     * @param string $input            Input string
+     *
+     * @return string  Returns the generated TAN code
+     */
+    public function generateTan($input) {
+        $input = preg_replace('/\s+/', '', $input);
+        $utf = utf8_encode($input.strval(floor(time()/100)));
+        $hash = hash("sha512", $utf);
+        return substr($hash, 0, 15);
+    }
+}
\ No newline at end of file
diff --git a/src/Service/SessionService.php b/src/Service/SessionService.php
index f0a1efc..3c4a30f 100644
--- a/src/Service/SessionService.php
+++ b/src/Service/SessionService.php
@@ -130,6 +130,7 @@ class SessionService {
 		$_SESSION = array();
 		session_destroy();
 		session_start();
+		session_regenerate_id();
 		$this->init();
 	}
 	/**
diff --git a/src/Service/TransactionCodeService.php b/src/Service/TransactionCodeService.php
new file mode 100644
index 0000000..7e549e0
--- /dev/null
+++ b/src/Service/TransactionCodeService.php
@@ -0,0 +1,87 @@
+<?php
+namespace Service;
+
+use Model\TransactionCode;
+use Model\TransactionCodeRepository;
+/**
+ * This Service is used for anything which has to do with Transaction
+ *
+ * @author Mai Ton Nu Cam <maitonnucam@googlemail.com>
+ * @author Swathi Shyam Sunder<swathi.ssunder@tum.de>
+ *
+ */
+class TransactionCodeService {
+	private $repository;
+	private $random;
+	/**
+	 * Constructor
+	 */
+	function __construct(TransactionCodeRepository $repository, RandomSequenceGeneratorService $random) {
+		$this->repository = $repository;
+		$this->random = $random;
+	}
+	/**
+	 * Returns an array with 100 unique transaction codes
+	 *
+	 * @param id $customer_id    The customer id to generate the set for
+	 *
+	 * @return array|boolean    Returns array with TransactionCode models or false if there was an error
+	 */
+	public function generateTransactionCodeSet($customer_id) {
+		$set = array();
+		$this->repository->beginDBTransaction();
+		$success = false;
+		for ($i = 0; $i < 100; $i++) {
+			do {
+				$code = $this->random->getString(15);
+			} while (in_array($code, $set) && $this->repository->findOne(array("code" => $code)));
+			$code_instance = new TransactionCode();
+			$code_instance->setCustomerId($customer_id);
+			$code_instance->setCode($code);
+			$code_instance->setIsUsed(false);
+			if ($this->repository->add($code_instance)) {
+				$success = true;
+			} else {
+				$success = false;
+			}
+			$set[] = $code_instance;
+		}
+		if ($success == true && sizeof($set) == 100) {
+			$this->repository->commitDB();
+			return $set;
+		} else {
+			$this->repository->rollBackDB();
+			throw new \Exception("There was an error with generating a set of transaction codes.");
+			return false;
+		}
+	}
+	/**
+	 * Checks if the transaction code $code is pristine i.e., unused
+	 *
+	 * @param int $customer_id    The customer id
+	 * @param string $code    The code to check
+	 *
+	 * @return boolean    Returns the transaction code model, if code is unused for that customer, otherwise returns false
+	 */
+	public function isCodePristine($customer_id, $code) {
+		$db_result = $this->repository->findOne(array("customer_id" => $customer_id, "code" => $code, "is_used" => 0));
+		if ($db_result) {
+			return $db_result;
+		}
+		return false;
+	}
+	/**
+	 * Checks if the transaction code $code exists
+	 *
+	 * @param string $code    The code to check
+	 *
+	 * @return boolean    Returns the transaction code model, if code exists, otherwise returns false
+	 */
+	public function isCodeExists($code) {
+		$db_result = $this->repository->findOne(array("code" => $code));
+		if ($db_result) {
+			return $db_result;
+		}
+		return false;
+	}
+}
\ No newline at end of file
diff --git a/src/Service/TransactionService.php b/src/Service/TransactionService.php
deleted file mode 100644
index fe27dc0..0000000
--- a/src/Service/TransactionService.php
+++ /dev/null
@@ -1,71 +0,0 @@
-<?php
-namespace Service;
-
-use Model\TransactionCode;
-use Model\TransactionCodeRepository;
-/**
- * This Service is used for anything which has to do with Transaction
- */
-class TransactionService {
-	private $repository;
-	private $random;
-	/**
-	 * Constructor
-	 */
-	function __construct(TransactionCodeRepository $repository, RandomSequenceGeneratorService $random) {
-		$this->repository = $repository;
-		$this->random = $random;
-	}
-	/**
-	 * Returns an array with 100 unique transaction codes
-	 *
-	 * @param id $customer_id    The customer id to generate the set for
-	 *
-	 * @return array|boolean    Returns array with TransactionCode models or false if there was an error
-	 */
-	public function generateTransactionCodeSet($customer_id) {
-		$set = array();
-		$this->repository->beginDBTransaction();
-		$success = false;
-		for ($i = 0; $i < 100; $i++) {
-			do {
-				$code = $this->random->getString(15);
-			} while (in_array($code, $set) && $this->repository->findOne(array("code" => $code)));
-			$code_instance = new TransactionCode();
-			$code_instance->setCustomerId($customer_id);
-			$code_instance->setCode($code);
-			$code_instance->setIsUsed(false);
-			if ($this->repository->add($code_instance)) {
-				$success = true;
-			} else {
-				$success = false;
-			}
-			$set[] = $code_instance;
-		}
-		if ($success == true && sizeof($set) == 100) {
-			$this->repository->commitDB();
-			return $set;
-		} else {
-			$this->repository->rollBackDB();
-			throw new \Exception("There was an error with generating a set of transaction codes.");
-			return false;
-		}
-	}
-	/**
-	 * Checks if the transaction code $code is valid
-	 *
-	 * @param int $customer_id    The customer id
-	 * @param string $code    The code to check
-	 *
-	 * @return boolean    Returns true, if code is valid and not used for that customer, otherwise returns false
-	 */
-	public function checkCode($customer_id, $code) {
-		$db_result = $this->repository->findOne(array("customer_id" => $customer_id, "code" => $code));
-		if ($db_result) {
-			if (!$db_result->getIsUsed()) {
-				return true;
-			}
-		}
-		return false;
-	}
-}
\ No newline at end of file
diff --git a/src/Style/app.css b/src/Style/app.css
index f2638f2..0ab1d2f 100644
--- a/src/Style/app.css
+++ b/src/Style/app.css
@@ -22,6 +22,10 @@ th {
     background-image: url("/Vendor/img/login_bg.jpg");
     background-size: cover;
 }
+
+.registration-form{
+    width : 600px;
+}
 .login-page .login-logo a {
     color:white;
 }
@@ -30,7 +34,7 @@ th {
 }
 
 form[name='approve_transaction']{
-    display: none;
+    /*display: none;*/
 }
 
 .app-section-min-height{
@@ -41,6 +45,9 @@ form[name='approve_transaction']{
     /*border-top-color :#86a0bf;*/
 }
 
+.form-control-feedback{
+    text-align: inherit;
+}
 .content-header > .breadcrumb{
   padding-top : 4px;
   padding-bottom: 4px;
@@ -74,7 +81,7 @@ form[name='approve_transaction']{
     font-weight:bold;
 }
 
-#customer_reg_pending .btn, #employee_regsitrations_table .btn,#cust_details_table1 .btn, #approve_trans_table .btn{
+#customer_reg_pending .btn, #employee_regsitrations_table .btn,#cust_details_table1 .btn, #approve_trans_table .btn, #tbl_registered_customers .btn{
     padding :1px 6px;
 }
 
@@ -118,17 +125,21 @@ form[name='approve_transaction']{
     text-align : center;
 }
 
+#transaction_history_table .text-center{
+    text-align: center;
+}
+
 .trans-history-transaction-id{
-    width : 12%;
+    width : 5%;
 }
 
 
 .trans-history-transaction-date{
-    width : 15%;
+    width : 10%;
 }
 
 .trans-history-amount{
-    width : 13%;
+    width : 21%;
 }
 
 .trans-history-beneficiary-account-id{
@@ -144,7 +155,7 @@ form[name='approve_transaction']{
 }
 
 .trans-history-remarks{
-    width : 19%;
+    width : 23%;
 }
 
 .content-header > h1{
@@ -204,4 +215,33 @@ div >h1{
 .small-box .icon{
     font-size : 40px;
     top : 4px;
+}
+
+#tbl_registered_customers .actions {
+    text-align:center;
+}
+
+
+#approve_trans_table .width_5, #cust_details_table2 .width_5, #tbl_completed_transactions .width_5{
+    width : 5%;
+}
+
+#cust_details_table2 .text-center, #cust_details_table1 .text-center{
+    text-align: center;
+}
+#approve_trans_table .width_10, #tbl_registered_customers .width_10{
+    width : 12%;
+}
+
+#tbl_completed_transactions .status{
+	text-align : center;
+	width : 5%;
+}
+
+#tbl_completed_transactions .text-center, #approve_trans_table .text-center, #statement_table .text-center, #customer_transactions_table .text-center{
+    text-align: center;
+}
+
+form[name ='action_customer_registration'], form[name='action_employee_registration'], form[name='approve_transaction']{
+    display : inline;
 }
\ No newline at end of file
diff --git a/src/Template/Customer/account_overview.html.php b/src/Template/Customer/account_overview.html.php
index c843058..7f6112d 100644
--- a/src/Template/Customer/account_overview.html.php
+++ b/src/Template/Customer/account_overview.html.php
@@ -78,10 +78,10 @@
                         <table id="customer_transactions_table" class="table table-bordered table-striped app-data-table">
                             <thead>
                                 <tr>
-                                    <th class='trans-history-transaction-id' rowspan='2'>Transaction ID</th>
-                                    <th class='trans-history-transaction-date' rowspan='2'>Transaction Date</th>
-                                    <th class='trans-history-amount' colspan='2' >Amount</th>
+                                    <th class='trans-history-transaction-id' rowspan='2'>ID</th>
                                     <th class='trans-history-beneficiary-account-id' rowspan='2'>To/From Account ID</th>
+                                    <th class='trans-history-transaction-date' rowspan='2'>Date</th>
+                                    <th class='trans-history-amount' colspan='2' >Amount</th>
                                     <th class='trans-history-remarks' rowspan='2'>Remarks</th>
                                 </tr>
                                 <tr>
@@ -105,7 +105,10 @@
                                     <td>
                                         <?= $t->s($transaction->getId()); ?>
                                     </td>
-                                    <td>
+                                    <td class='text-center'>
+                                        <?= $t->s($accountId); ?>
+                                    </td>
+                                    <td class='text-center'>
                                         <?= date('d-m-Y',strtotime($t->s($transaction->getTransactionDate()))); ?>
                                     </td>
                                     <td class="text-right">
@@ -115,9 +118,6 @@
                                         <?= $t->s($credit_amount); ?>
                                     </td>
                                     <td>
-                                        <?= $t->s($accountId); ?>
-                                    </td>
-                                    <td>
                                         <?= $t->s($transaction->getRemarks()); ?>
                                     </td>
                                 </tr>
diff --git a/src/Template/Customer/customer_base.html.php b/src/Template/Customer/customer_base.html.php
index 0ae2a42..660e4a5 100644
--- a/src/Template/Customer/customer_base.html.php
+++ b/src/Template/Customer/customer_base.html.php
@@ -1,6 +1,8 @@
 <?php $t->extend("app_base.html.php"); ?>
 <?php $t->set("profile_href", "/profile"); ?>
-<?php $t->block("sidebar", function ($t) { ?>
+<?php $t->block("sidebar", function ($t) {
+    $currentUser = $t->current_user();
+?>
 	<ul class="sidebar-menu">
 	    <li class="treeview<?= $t->get('menu_active')=="home"?" active":""; ?>">
             <a href="/overview">
@@ -32,5 +34,13 @@
                 <span>Statement</span>
             </a>
         </li>
+        <?php if ((int)$currentUser->getTanMethod() === _TAN_METHOD_SCS) { ?>
+            <li class="treeview">
+                <a href="/downloadscs">
+                    <i class="fa fa-download"></i>
+                    <span>Download SCS</span>
+                </a>
+            </li>
+        <?php }?>
 	</ul>
 <?php }); ?>
\ No newline at end of file
diff --git a/src/Template/Customer/make_transfer.html.php b/src/Template/Customer/make_transfer.html.php
index 39222a1..ef53ee2 100644
--- a/src/Template/Customer/make_transfer.html.php
+++ b/src/Template/Customer/make_transfer.html.php
@@ -31,23 +31,23 @@
                     <div class="tab-pane active" id="html-form">
                         <div class="box box-primary">
                             <div class="box-body">
-                                <?php $t->formh($t->get("form"), array("action"=>"/make_transfer", "method"=>"post"), function ($t) { ?>
+                                <?php $t->formh($t->get("form"), array("action"=>"/make_transfer/form", "method"=>"post"), function ($t) { ?>
                                 <?php
                                     $to_account_id_errors = $t->get("form")->getError("to_account_id");
                                     $to_account_name_errors= $t->get("form")->getError("to_account_name");
                                     $amount_errors = $t->get("form")->getError("amount");
                                     $transaction_code_errors = $t->get("form")->getError("transaction_code");
                                     $remarks_errors = $t->get("form")->getError("remarks");
-                                    ?>
+                                ?>
                                 <div class="form-group has-feedback <?php if (sizeof($to_account_id_errors) > 0) echo "has-error"; ?>">
-                                    <label for="make_transfer[to_account_id]">Beneficiary Account No.</label>
+                                    <label for="make_transfer[to_account_id]">Recipient Account No.</label>
                                     <input type="text" class="form-control" name="make_transfer[to_account_id]" value="<?= $t->s($t->get('form')->getValue('to_account_id')); ?>" required maxlength='10'>
                                     <?php if (sizeof($to_account_id_errors) > 0) { ?>
                                     <p class="text-red"><span class="glyphicon glyphicon-remove-circle"></span> <?= $to_account_id_errors[0] ?><br></p>
                                     <?php } ?>
                                 </div>
                                 <div class="form-group has-feedback <?php if (sizeof($to_account_name_errors) > 0) echo "has-error"; ?>">
-                                    <label for="make_transfer[to_account_name]">Account Holder Name</label>
+                                    <label for="make_transfer[to_account_name]">Recipient Name</label>
                                     <input type="text" class="form-control" name="make_transfer[to_account_name]" value="<?= $t->s($t->get('form')->getValue('to_account_name')); ?>" required maxlength='45'>
                                     <?php if (sizeof($to_account_name_errors) > 0) { ?>
                                     <p class="text-red"><span class="glyphicon glyphicon-remove-circle"></span> <?= $to_account_name_errors[0] ?><br></p>
@@ -85,9 +85,19 @@
 
                     <div class="tab-pane" id="upload-form">
                         <div class="box box-primary">
-                            <?php $t->formh($t->get("form2"), array("action"=>"/make_transfer", "method"=>"post", "enctype"=>"multipart/form-data"), function ($t) { ?>
+                            <?php $t->formh($t->get("form2"), array("action"=>"/make_transfer/file", "method"=>"post", "enctype"=>"multipart/form-data"), function ($t) { ?>
+                            <?php
+                                $transaction_code_errors = $t->get("form2")->getError("transaction_code");
+                            ?>
                             <div class="box-body">
                                 <input type="hidden" name="MAX_FILE_SIZE" value="1024" />
+                                <div class="form-group has-feedback <?php if (sizeof($transaction_code_errors) > 0) echo "has-error"; ?>">
+                                    <label for="make_transfer_via_file_upload[transaction_code]">Transaction Code</label>
+                                    <input type="text" class="form-control" name="make_transfer_via_file_upload[transaction_code]" value="<?= $t->s($t->get('form2')->getValue('transaction_code')); ?>" required maxlength='15'>
+                                    <?php if (sizeof($transaction_code_errors) > 0) { ?>
+                                    <p class="text-red"><span class="glyphicon glyphicon-remove-circle"></span> <?= $transaction_code_errors[0] ?><br></p>
+                                    <?php } ?>
+                                </div>
                                 <div class="form-group">
                                     <label>File input</label>
                                     <input type="file" id="transactionCodeFile" name="make_transfer_via_file_upload[file]" required>
diff --git a/src/Template/Customer/statement.html.php b/src/Template/Customer/statement.html.php
index f20b6e7..33e7b24 100644
--- a/src/Template/Customer/statement.html.php
+++ b/src/Template/Customer/statement.html.php
@@ -34,10 +34,10 @@
                         <table id="statement_table" class="table table-bordered table-striped app-data-table">
                             <thead>
                                 <tr>
-                                    <th class='trans-history-transaction-id' rowspan='2'>Transaction ID</th>
-                                    <th class='trans-history-transaction-date' rowspan='2'>Transaction Date</th>
+                                    <th class='trans-history-transaction-id' rowspan='2'>ID</th>
+                                    <th class='trans-history-beneficiary-account-id' rowspan='2'>To / From Account No.</th>
+                                    <th class='trans-history-transaction-date' rowspan='2'>Date</th>
                                     <th class='trans-history-amount' colspan='2' >Amount</th>
-                                    <th class='trans-history-beneficiary-account-id' rowspan='2'>To/From Account ID</th>
                                     <th class='trans-history-remarks' rowspan='2'>Remarks</th>
                                 </tr>
                                 <tr>
@@ -61,7 +61,10 @@
                                     <td>
                                         <?= $t->s($transaction->getId()); ?>
                                     </td>
-                                    <td>
+                                     <td class='text-center'>
+                                        <?= $t->s($accountId); ?>
+                                    </td>
+                                    <td class='text-center'>
                                         <?= date('d-m-Y',strtotime($t->s($transaction->getTransactionDate()))); ?>
                                     </td>
                                     <td class="text-right">
@@ -71,9 +74,6 @@
                                         <?= $t->s($credit_amount); ?>
                                     </td>
                                     <td>
-                                        <?= $t->s($accountId); ?>
-                                    </td>
-                                    <td>
                                         <?= $t->s($transaction->getRemarks()); ?>
                                     </td>
                                 </tr>
diff --git a/src/Template/Customer/transaction_history.html.php b/src/Template/Customer/transaction_history.html.php
index 35063fe..30e5d01 100644
--- a/src/Template/Customer/transaction_history.html.php
+++ b/src/Template/Customer/transaction_history.html.php
@@ -3,8 +3,8 @@
 <?php $t->block("content", function ($t) {
     $transactionList = $t->get("transactionList");
     $transactionStatus = array(
-        '0' => 'COMPLETED',
-        '1' => 'ON HOLD'
+        '0' => 'Approved',
+        '1' => 'On Hold'
      );
     ?>
 <!-- Content Wrapper. Contains page content -->
@@ -37,36 +37,42 @@
                         <table id="transaction_history_table" class="table table-bordered table-striped app-data-table">
                             <thead>
                                 <tr>
-                                    <th class='trans-history-transaction-id'>Transaction ID</th>
-                                    <th class='trans-history-transaction-date'>Transaction Date</th>
+                                    <th class='trans-history-transaction-id'>ID</th>
+                                    <th class='trans-history-beneficiary-account-id'>To Account No.</th>
+                                    <th class='trans-history-beneficiary-name'>To Account Name</th>
+                                    <th class='trans-history-transaction-date'>Date</th>
                                     <th class='trans-history-amount'>Amount</th>
-                                    <th class='trans-history-beneficiary-account-id'>Beneficiary Account ID</th>
-                                    <th class='trans-history-beneficiary-name'>Beneficiary Account Name</th>
                                     <th class='trans-history-status'>Status</th>
                                     <th class='trans-history-remarks'>Remarks</th>
                                 </tr>
                             </thead>
                             <tbody>
                                 <?php foreach($transactionList as $transaction) {
-                                    $class = ($transaction->getIsOnHold()) ? 'fa fa-retweet' :  'fa fa-check-circle';
                                     $title = $transactionStatus[$transaction->getIsOnHold()];
+                                    if($transaction->getIsOnHold())
+                                        $class = 'fa fa-retweet';
+                                    else if($transaction->getIsRejected()) {
+                                        $class = 'fa fa-times';
+                                        $title = "Rejected";
+                                    } else
+                                        $class ='fa fa-check-circle';
                                     ?>
                                 <tr>
                                     <td>
                                         <?= $t->s($transaction->getId()); ?>
                                     </td>
+                                    <td class='text-center'>
+                                        <?= $t->s($transaction->getToAccountId()); ?>
+                                    </td>
                                     <td>
+                                        <?= $t->s($transaction->getToAccountName()); ?>
+                                    </td>
+                                    <td class='text-center'>
                                         <?= date('d-m-Y',strtotime($t->s($transaction->getTransactionDate()))); ?>
                                     </td>
                                     <td class="text-right">
                                         <?= $t->s($transaction->getAmount()); ?>
                                     </td>
-                                    <td>
-                                        <?= $t->s($transaction->getToAccountId()); ?>
-                                    </td>
-                                    <td>
-                                        <?= $t->s($transaction->getToAccountName()); ?>
-                                    </td>
                                     <td data-order="<?php echo $transaction->getIsOnHold() ?>" title=<?php echo "'".$title."'>" ?>
                                     <i class=<?php echo "'".$class."'></i>" ?>
                                     </td>
diff --git a/src/Template/Employee/approve_transactions.html.php b/src/Template/Employee/approve_transactions.html.php
index 5e51145..fdb582e 100644
--- a/src/Template/Employee/approve_transactions.html.php
+++ b/src/Template/Employee/approve_transactions.html.php
@@ -1,7 +1,13 @@
 <?php $t->extend("Employee/employee_base.html.php"); ?>
 <?php $t->set("menu_active", "approve_transactions"); ?>
 <?php $t->block("content", function ($t) {
-    $transactionList = $t->get("transactionList"); ?>
+    $transactionList = $t->get("transactionList"); 
+    $completedtransactionList = $t->get("completedtransactionList");
+     $transactionStatus = array(
+        '0' => 'Approved',
+        '1' => 'On Hold'
+     );
+    ?>
 <!-- Content Wrapper. Contains page content -->
 <div class="content-wrapper">
 <div class="flash-echo">
@@ -10,17 +16,13 @@
 <!-- Content Header (Page header) -->
 <section class="content-header">
     <h1>
-        Transactions pending for Approval
+        Transactions
     </h1>
     <ol class="breadcrumb">
         <li><a href="/overview"><i class="fa fa-home"></i> Home</a></li>
-        <li class='active'>Pending Transactions</a></li>
+        <li class='active'>Transactions</a></li>
     </ol>
 </section>
-<?php $t->formh($t->get("form"), array("action"=>"/transactions", "method"=>"post"), function ($t) { ?>
-<input id='selectedTransactionId' name='selectedTransactionId' type='hidden' value=''/>
-<input id='action_transaction' name='action_transaction' type='hidden' value=''/>
-<?php }) ?>
 <div class="row">
     <div class="col-xs-12">
         <?php if( count($transactionList) != 0 ) { ?>
@@ -36,15 +38,20 @@
     <div class="col-md-12">
     <!-- general form elements -->
     <div class="box box-primary">
+		<div class="box-header with-border">
+            <h3 class="box-title">Pending Transactions</h3>
+        </div>
         <div class="box-body">
-            <table id="approve_trans_table" class="table table-bordered table-striped app-data-table">
+            <table id="approve_trans_table" class="table table-bordered table-striped app-data-table-small">
                 <thead>
                     <tr>
-                        <th>Transaction Id</th>
-                        <th>Transaction Date</th>
-                        <th>Amount</th>
+                        <th class="width_5">ID</th>
+                        <th>From Account No.</th>
+                        <th>From Account Name</th>
                         <th>To Account No.</th>
                         <th>To Account Name</th>
+                        <th>Date</th>
+                        <th>Amount</th>
                         <th>Remarks</th>
                         <th>Actions</th>
                 </thead>
@@ -54,24 +61,48 @@
                         <td class='app-transaction-id'>
                             <?= $t->s($transaction->getId()); ?>
                         </td>
-                        <td>
-                            <?= date('d-m-Y',strtotime($t->s($transaction->getTransactionDate()))); ?>
-                        </td>
-                        <td class="text-right">
-                            <?= $t->s($transaction->getAmount()); ?>
+                        <td class='text-center'>
+                            <?= $t->s($transaction->getFromAccountId()); ?>
                         </td>
                         <td>
+                            <?= $t->s($transaction->getFromAccountName()); ?>
+                        </td>
+                        <td class='text-center'>
                             <?= $t->s($transaction->getToAccountId()); ?>
                         </td>
                         <td>
                             <?= $t->s($transaction->getToAccountName()); ?>
                         </td>
+                         <td class='text-center'>
+                            <?= date('d-m-Y',strtotime($t->s($transaction->getTransactionDate()))); ?>
+                        </td>
+                        <td class="text-right">
+                            <?= $t->s($transaction->getAmount()); ?>
+                        </td>
                         <td>
                             <?= $t->s($transaction->getRemarks()); ?>
                         </td>
                         <td>
-                            <button type="button" class="btn btn-info" data-toggle="modal" data-target="#approveTransModal">Approve</button>
-                            <button type="button" class="btn btn-reject" data-toggle="modal" data-target="#rejectTransModal">Reject</button>
+                            <?php $t->formh($t->get("form"), array(
+                                "action"=>"/transactions/approve", 
+                                "method"=>"post", 
+                                "data-confirm-modal"=>"", 
+                                "data-modal-title"=>"Approve Transaction", 
+                                "data-modal-body"=>"Are you sure you want to approve the transaction?"
+                            ), function ($t) use ($transaction) { ?>
+                                <input name='approve_transaction[transaction_id]' type='hidden' value='<?= $t->s($transaction->getId()); ?>'/>
+                                <button type="submit" name="approve_transaction[action]" value="approve" class="btn btn-info">Approve</button>
+                            <?php }); ?>
+                            <?php $t->formh($t->get("form"), array(
+                                "action"=>"/transactions/reject", 
+                                "method"=>"post", 
+                                "data-confirm-modal"=>"", 
+                                "data-modal-title"=>"Reject Transaction", 
+                                "data-modal-body"=>"Are you sure you want to reject the transaction?"
+                            ), function ($t) use ($transaction) { ?>
+                                <input name='approve_transaction[transaction_id]' type='hidden' value='<?= $t->s($transaction->getId()); ?>'/>
+                                <button type="submit" name="approve_transaction[action]" value="reject" class="btn btn-reject">Reject</button>
+                            <?php }); ?>
                         </td>
                     </tr>
                     <?php }?>
@@ -81,44 +112,83 @@
         <!-- /.box -->
     </div>
 </section>
-<!-- Approve Transaction Modal -->
-<div id="approveTransModal" class="modal fade" role="dialog" tabindex="-1">
-    <div class="modal-dialog">
-        <!-- Modal content-->
-        <div class="modal-content">
-            <div class="modal-header">
-                <button type="button" class="close" data-dismiss="modal"><i class='fa fa-times'></i></button>
-                <h4 class="modal-title">Approve Transaction</h4>
-            </div>
-            <div class="modal-body">
-                Are you sure you want to approve the transaction?
-            </div>
-            <!-- /.box-body -->
-            <div class="modal-footer">
-                <button type="submit" class="btn btn-primary">Yes</button>
-                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
-            </div>
-        </div>
+<div class="row">
+    <div class="col-xs-12">
+        <?php if( count($completedtransactionList) != 0 ) { ?>
+        <a href='/transactions_completed_download' id='downloadPDF' target='_blank' class="pull-right"><i class="fa fa-download"></i> Download as PDF
+        </a>
+        <?php } ?>
     </div>
 </div>
-<!-- Reject Transaction Modal -->
-<div id="rejectTransModal" class="modal fade" role="dialog" tabindex="-1">
-    <div class="modal-dialog">
-        <!-- Modal content-->
-        <div class="modal-content">
-            <div class="modal-header">
-                <button type="button" class="close" data-dismiss="modal"><i class='fa fa-times'></i></button>
-                <h4 class="modal-title">Reject Transaction</h4>
-            </div>
-            <div class="modal-body">
-                Are you sure you want to reject the transaction?
-            </div>
-            <!-- /.box-body -->
-            <div class="modal-footer">
-                <button type="submit" class="btn btn-primary">Yes</button>
-                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
-            </div>
+<section class="content">
+    <div class="row">
+    <!-- left column -->
+    <div class="col-md-12">
+    <!-- general form elements -->
+    <div class="box box-primary">
+		<div class="box-header with-border">
+            <h3 class="box-title">Completed Transactions</h3>
+        </div>
+        <div class="box-body">
+            <table id="tbl_completed_transactions" class="table table-bordered table-striped app-data-table-small">
+                <thead>
+                    <tr>
+                        <th class="width_5">ID</th>
+                        <th>From Account No.</th>
+                        <th>From Account Name</th>
+                        <th>To Account No.</th>
+                        <th>To Account Name</th>
+                        <th>Date</th>
+                        <th>Amount</th>
+                        <th>Status</th>
+                        <th>Remarks</th>
+                </thead>
+                <tbody>
+                    <?php foreach ($completedtransactionList as $transaction) {
+					 $title = $transactionStatus[$transaction->getIsOnHold()];
+						if($transaction->getIsOnHold())
+							$class = 'fa fa-retweet';
+						else if($transaction->getIsRejected()) {
+							$class = 'fa fa-times';
+							$title = "Rejected";
+						} else
+							$class ='fa fa-check-circle';
+								
+						?>
+                    <tr>
+                        <td class='app-transaction-id'>
+                            <?= $t->s($transaction->getId()); ?>
+                        </td>
+                        <td class='text-center'>
+                            <?= $t->s($transaction->getFromAccountId()); ?>
+                        </td>
+                        <td>
+                            <?= $t->s($transaction->getFromAccountName()); ?>
+                        </td>
+                        <td class='text-center'>
+                            <?= $t->s($transaction->getToAccountId()); ?>
+                        </td>
+                        <td>
+                            <?= $t->s($transaction->getToAccountName()); ?>
+                        </td>
+                         <td class='text-center'>
+                            <?= date('d-m-Y',strtotime($t->s($transaction->getTransactionDate()))); ?>
+                        </td>
+                        <td class="text-right">
+                            <?= $t->s($transaction->getAmount()); ?>
+                        </td>
+                        <td class='status' data-order="<?php echo $transaction->getIsOnHold() ?>" title=<?php echo "'".$title."'>" ?>
+							<i class=<?php echo "'".$class."'></i>" ?>
+						</td>
+                        <td>
+                            <?= $t->s($transaction->getRemarks()); ?>
+                        </td>
+                    </tr>
+                    <?php }?>
+                </tbody>
+            </table>
         </div>
+        <!-- /.box -->
     </div>
-</div>
+</section>
 <?php }); ?>
\ No newline at end of file
diff --git a/src/Template/Employee/customer_details.html.php b/src/Template/Employee/customer_details.html.php
index 4a8f78d..75dde73 100644
--- a/src/Template/Employee/customer_details.html.php
+++ b/src/Template/Employee/customer_details.html.php
@@ -62,6 +62,12 @@
                                 <?= $t->s($accountInfo->getAccountId()); ?>
                             </div>
                         </div>
+                        <div class="form-group">
+                            <label>Account Balance</label>
+                            <div>
+                                <?= $t->s($accountInfo->getBalance()); ?>
+                            </div>
+                        </div>
                     </div>
                     <!-- /.box-body -->
                 </form>
@@ -91,10 +97,10 @@
                                 <td>
                                     <?= $t->s($transaction->getId()); ?>
                                 </td>
-                                <td>
+                                <td class='text-center'>
                                     <?= $t->s($transaction->getToAccountId()); ?>
                                 </td>
-                                <td>
+                                <td class='text-center'>
                                     <?= date('d-m-Y',strtotime($t->s($transaction->getTransactionDate()))); ?>
                                 </td>
                                 <td class="text-right">
@@ -133,11 +139,15 @@
                 <table id="cust_details_table2" class="table table-bordered table-striped app-data-table-small">
                     <thead>
                         <tr>
-                            <th>Transaction Id</th>
-                            <th>To Account Number</th>
-                            <th>Transaction Date</th>
+                            <th class="width_5">ID</th>
+                            <th>From Account No.</th>
+                            <th>From Account Name</th>
+                            <th>To Account No.</th>
+                            <th>To Account Name</th>
+                            <th >Date</th>
                             <th>Amount</th>
                             <th>Remarks</th>
+                        </tr>
                     </thead>
                     <tbody>
                         <?php foreach($approvedTransactionList as $transaction) {?>
@@ -145,10 +155,19 @@
                             <td>
                                 <?= $t->s($transaction->getId()); ?>
                             </td>
+                            <td class='text-center'>
+                                <?= $t->s($transaction->getFromAccountId()); ?>
+                            </td>
                             <td>
+                                <?= $t->s($transaction->getFromAccountName()); ?>
+                            </td>
+                            <td class='text-center'>
                                 <?= $t->s($transaction->getToAccountId()); ?>
                             </td>
                             <td>
+                                <?= $t->s($transaction->getToAccountName()); ?>
+                            </td>
+                            <td class='text-center'>
                                 <?= date('d-m-Y',strtotime($t->s($transaction->getTransactionDate()))); ?>
                             </td>
                             <td class="text-right">
diff --git a/src/Template/Employee/customers_list.html.php b/src/Template/Employee/customers_list.html.php
index b5f5261..4e6155e 100644
--- a/src/Template/Employee/customers_list.html.php
+++ b/src/Template/Employee/customers_list.html.php
@@ -19,10 +19,6 @@
             <li class="active">Customers</li>
         </ol>
     </section>
-    <?php $t->formh($t->get("form"), array("action"=>"/customers", "method"=>"post"), function ($t) { ?>
-    <input id='selectedUserId' name='selectedUserId' type='hidden' value=''/>
-    <input id='action_registration' name='action_registration' type='hidden' value=''/>
-    <?php }) ?>
     <!-- Registration Pending Customers -->
     <section class="content">
         <div class="row">
@@ -32,6 +28,7 @@
                         <table id="customer_reg_pending" class="table table-bordered table-striped app-data-table-small">
                             <thead>
                                 <tr>
+                                    <th>ID</th>
                                     <th>First Name</th>
                                     <th>Last Name</th>
                                     <th>Email Id</th>
@@ -42,6 +39,9 @@
                                 <?php foreach($customerRegistrationList as $customer) {?>
                                 <tr>
                                     <td>
+                                        <?= $t->s($customer->getId()); ?>
+                                    </td>
+                                    <td>
                                         <?= $t->s($customer->getFirstName()); ?>
                                     </td>
                                     <td>
@@ -51,8 +51,26 @@
                                         <?= $t->s($customer->getEmail()); ?>
                                     </td>
                                     <td id=<?= "'".$customer->getId()."'>" ?>
-                                    <button type="button" class="btn btn-info" data-toggle="modal" data-target="#approveRegModal">Approve</button>
-                                    <button type="button" class="btn btn-reject" data-toggle="modal" data-target="#rejectRegModal">Reject</button>
+                                        <?php $t->formh($t->get("form"), array(
+                                            "action"=>"/customers/approve", 
+                                            "method"=>"post", 
+                                            "data-confirm-modal"=>"", 
+                                            "data-modal-title"=>"Approve Registration", 
+                                            "data-modal-body"=>"Are you sure you want to approve the registration?"
+                                        ), function ($t) use ($customer) { ?>
+                                            <input name='action_customer_registration[customer_id]' type='hidden' value='<?= $t->s($customer->getId()); ?>'/>
+                                            <button type="submit" name="action_customer_registration[action]" value="approve" class="btn btn-info">Approve</button>
+                                        <?php }); ?>
+                                        <?php $t->formh($t->get("form"), array(
+                                            "action"=>"/customers/reject", 
+                                            "method"=>"post", 
+                                            "data-confirm-modal"=>"", 
+                                            "data-modal-title"=>"Reject Registration", 
+                                            "data-modal-body"=>"Are you sure you want to reject the registration?"
+                                        ), function ($t) use ($customer) { ?>
+                                            <input name='action_customer_registration[customer_id]' type='hidden' value='<?= $t->s($customer->getId()); ?>'/>
+                                            <button type="submit" name="action_customer_registration[action]" value="reject" class="btn btn-reject">Reject</button>
+                                        <?php }); ?>
                                     </td>
                                 </tr>
                                 <?php }?>
@@ -78,18 +96,23 @@
             <div class="col-xs-12">
                 <div class="box box-primary">
                     <div class="box-body">
-                        <table id="cust_list_table" class="table table-bordered table-striped app-data-table-small">
+                        <table id="tbl_registered_customers" class="table table-bordered table-striped app-data-table-small">
                             <thead>
                                 <tr>
+                                    <th>ID</th>
                                     <th>First Name</th>
                                     <th>Last Name</th>
                                     <th>Email Id</th>
+                                    <th class="width_10">Actions</th>
                                 </tr>
                             </thead>
                             <tbody>
                                 <?php foreach($customerList as $customer) {?>
                                 <tr>
                                     <td>
+                                        <?= $t->s($customer->getId()); ?>
+                                    </td>
+                                    <td>
                                         <a href=
                                             '<?= $t->s("/customer_details/" . $customer->getId() . ""); ?>'>
                                         <?= $t->s($customer->getFirstName()); ?>
@@ -101,6 +124,11 @@
                                     <td>
                                         <?= $t->s($customer->getEmail()); ?>
                                     </td>
+                                    <td class="actions" id=<?= "'".$customer->getId()."'>" ?>
+                                    <?php if (!$customer->getIsAccountBalanceInitialized()) {?>
+                                        <button type="button" class="btn btn-info set-balance" data-customer-id="<?= $t->s($customer->getId()); ?>">Set Balance</button>
+                                    <?php }?>
+                                    </td>
                                 </tr>
                                 <?php }?>
                             </tbody>
@@ -117,41 +145,26 @@
     <!-- /.content -->
 </div>
 <!-- /.content-wrapper -->
-<!-- Approve Registration Modal -->
-<div id="approveRegModal" class="modal fade" role="dialog" tabindex="-1">
+<!-- Set Balance Modal -->
+<div id="setBalanceModal" class="modal fade" role="dialog" tabindex="-1">
     <div class="modal-dialog">
         <!-- Modal content-->
         <div class="modal-content">
             <div class="modal-header">
                 <button type="button" class="close" data-dismiss="modal"><i class='fa fa-times'></i></button>
-                <h4 class="modal-title">Approve Registration</h4>
+                <h4 class="modal-title">Set Balance</h4>
             </div>
             <div class="modal-body">
-                Are you sure you want to approve the registration?
-            </div>
-            <!-- /.box-body -->
-            <div class="modal-footer">
-                <button type="submit" class="btn btn-primary">Approve</button>
-                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
-            </div>
-        </div>
-    </div>
-</div>
-<!-- Reject Registration Modal -->
-<div id="rejectRegModal" class="modal fade" role="dialog" tabindex="-1">
-    <div class="modal-dialog">
-        <!-- Modal content-->
-        <div class="modal-content">
-            <div class="modal-header">
-                <button type="button" class="close" data-dismiss="modal"><i class='fa fa-times'></i></button>
-                <h4 class="modal-title">Reject Registration</h4>
-            </div>
-            <div class="modal-body">
-                Are you sure you want to reject the registration?
+                <?php $t->formh($t->get("balance_form"), array("action"=>"/customers/balance", "method"=>"post", "id"=>"balance_form"), function ($t) { ?>
+                <div class="form-group has-feedback <?php if (sizeof($balance_errors) > 0) echo "has-error"; ?>">
+                    <input id="balance_customer_id" name='action_customer_balance[customer_id]' type='hidden' value=''/>
+                    <input type="number" class="form-control" placeholder="Balance" name="action_customer_balance[balance]" value="" required>
+                </div>
+                <?php }); ?>
             </div>
             <!-- /.box-body -->
             <div class="modal-footer">
-                <button type="submit" class="btn btn-primary">Reject</button>
+                <button type="submit" class="btn btn-primary">Confirm</button>
                 <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
             </div>
         </div>
diff --git a/src/Template/Employee/employee_base.html.php b/src/Template/Employee/employee_base.html.php
index 34c214e..07362d0 100644
--- a/src/Template/Employee/employee_base.html.php
+++ b/src/Template/Employee/employee_base.html.php
@@ -31,7 +31,7 @@
         <li class="treeview<?= $t->get('menu_active')=="approve_transactions"?" active":""; ?>">
             <a href="/transactions">
             <i class="fa fa-tasks"></i>
-            <span>Pending Transactions</span>
+            <span>Transactions</span>
             </a>
         </li>
     </ul>
diff --git a/src/Template/Employee/employee_overview.html.php b/src/Template/Employee/employee_overview.html.php
index 8614b73..0cf2ce1 100644
--- a/src/Template/Employee/employee_overview.html.php
+++ b/src/Template/Employee/employee_overview.html.php
@@ -86,25 +86,19 @@
                 <table id="recent_transactions" class="table table-bordered table-striped app-data-table">
                     <thead>
                         <tr>
-                            <th>Transaction Date</th>
-                            <th>Transaction Id</th>
-                            <th>Amount</th>
+                            <th>ID</th>
                             <th>From Account No.</th>
                             <th>To Account No.</th>
+                            <th>Date</th>
+                            <th>Amount</th>
                             <th>Remarks</th>
                     </thead>
                     <tbody>
                         <?php foreach ($latestTransactionList as $transaction) {?>
                         <tr>
-                            <td>
-                                <?= date('d-m-Y',strtotime($t->s($transaction->getTransactionDate()))); ?>
-                            </td>
                             <td class='app-transaction-id'>
                                 <?= $t->s($transaction->getId()); ?>
                             </td>
-                            <td class="text-right">
-                                <?= $t->s($transaction->getAmount()); ?>
-                            </td>
                             <td>
                                 <?= $t->s($transaction->getFromAccountId()); ?>
                             </td>
@@ -112,6 +106,12 @@
                                 <?= $t->s($transaction->getToAccountId()); ?>
                             </td>
                             <td>
+                                <?= date('d-m-Y',strtotime($t->s($transaction->getTransactionDate()))); ?>
+                            </td>
+                            <td class="text-right">
+                                <?= $t->s($transaction->getAmount()); ?>
+                            </td>
+                            <td>
                                 <?= $t->s($transaction->getRemarks()); ?>
                             </td>
                         </tr>
diff --git a/src/Template/Employee/employees_list.html.php b/src/Template/Employee/employees_list.html.php
index 62ba146..f6cee16 100644
--- a/src/Template/Employee/employees_list.html.php
+++ b/src/Template/Employee/employees_list.html.php
@@ -19,10 +19,6 @@
             <li class="active">Employees</li>
         </ol>
     </section>
-    <?php $t->formh($t->get("form"), array("action"=>"/employees", "method"=>"post"), function ($t) { ?>
-    <input id='selectedUserId' name='selectedUserId' type='hidden' value=''/>
-    <input id='action_registration' name='action_registration' type='hidden' value=''/>
-    <?php }) ?>
     <!-- Main content -->
     <section class="content">
         <div class="row">
@@ -32,6 +28,7 @@
                         <table id="employee_regsitrations_table" class="table table-bordered table-striped app-data-table-small">
                             <thead>
                                 <tr>
+                                    <th>ID</th>
                                     <th>First Name</th>
                                     <th>Last Name</th>
                                     <th>Email Id</th>
@@ -42,6 +39,9 @@
                                 <?php foreach($employeeRegistrationList as $employee) {?>
                                 <tr>
                                     <td>
+                                        <?= $t->s($employee->getId()); ?>
+                                    </td>
+                                    <td>
                                         <?= $t->s($employee->getFirstName()); ?>
                                     </td>
                                     <td>
@@ -51,8 +51,26 @@
                                         <?= $t->s($employee->getEmail()); ?>
                                     </td>
                                     <td id=<?= "'".$employee->getId()."'>" ?>
-                                    <button type="button" class="btn btn-info" data-toggle="modal" data-target="#approveRegModal">Approve</button>
-                                    <button type="button" class="btn btn-reject" data-toggle="modal" data-target="#rejectRegModal">Reject</button>
+                                    <?php $t->formh($t->get("form"), array(
+                                        "action"=>"/employees/approve", 
+                                        "method"=>"post", 
+                                        "data-confirm-modal"=>"", 
+                                        "data-modal-title"=>"Approve Registration", 
+                                        "data-modal-body"=>"Are you sure you want to approve the registration?"
+                                    ), function ($t) use ($employee) { ?>
+                                        <input name='action_employee_registration[employee_id]' type='hidden' value='<?= $t->s($employee->getId()); ?>'/>
+                                        <button type="submit" name="action_employee_registration[action]" value="approve" class="btn btn-info">Approve</button>
+                                    <?php }); ?>
+                                    <?php $t->formh($t->get("form"), array(
+                                        "action"=>"/employees/reject", 
+                                        "method"=>"post", 
+                                        "data-confirm-modal"=>"", 
+                                        "data-modal-title"=>"Reject Registration", 
+                                        "data-modal-body"=>"Are you sure you want to reject the registration?"
+                                    ), function ($t) use ($employee) { ?>
+                                        <input name='action_employee_registration[employee_id]' type='hidden' value='<?= $t->s($employee->getId()); ?>'/>
+                                        <button type="submit" name="action_employee_registration[action]" value="reject" class="btn btn-reject">Reject</button>
+                                    <?php }); ?>
                                     </td>
                                 </tr>
                                 <?php }?>
@@ -81,6 +99,7 @@
                         <table id="emp_list_table" class="table table-bordered table-striped app-data-table-small">
                             <thead>
                                 <tr>
+                                    <th>ID</th>
                                     <th>First Name</th>
                                     <th>Last Name</th>
                                     <th>Email Id</th>
@@ -90,6 +109,9 @@
                                 <?php foreach($employeeList as $employee) {?>
                                 <tr>
                                     <td>
+                                        <?= $t->s($employee->getId()); ?>
+                                    </td>
+                                    <td>
                                         <?= $t->s($employee->getFirstName()); ?>
                                     </td>
                                     <td>
@@ -112,45 +134,5 @@
         <!-- /.row -->
     </section>
 </div>
-<!-- Approve Registration Modal -->
-<div id="approveRegModal" class="modal fade" role="dialog" tabindex="-1">
-    <div class="modal-dialog">
-        <!-- Modal content-->
-        <div class="modal-content">
-            <div class="modal-header">
-                <button type="button" class="close" data-dismiss="modal"><i class='fa fa-times'></i></button>
-                <h4 class="modal-title">Approve Registration</h4>
-            </div>
-            <div class="modal-body">
-                Are you sure you want to approve the registration?
-            </div>
-            <!-- /.box-body -->
-            <div class="modal-footer">
-                <button type="submit" class="btn btn-primary">Approve</button>
-                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
-            </div>
-        </div>
-    </div>
-</div>
-<!-- Reject Registration Modal -->
-<div id="rejectRegModal" class="modal fade" role="dialog" tabindex="-1">
-    <div class="modal-dialog">
-        <!-- Modal content-->
-        <div class="modal-content">
-            <div class="modal-header">
-                <button type="button" class="close" data-dismiss="modal"><i class='fa fa-times'></i></button>
-                <h4 class="modal-title">Reject Registration</h4>
-            </div>
-            <div class="modal-body">
-                Are you sure you want to reject the registration?
-            </div>
-            <!-- /.box-body -->
-            <div class="modal-footer">
-                <button type="submit" class="btn btn-primary">Reject</button>
-                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
-            </div>
-        </div>
-    </div>
-</div>
 <!-- /.content-wrapper -->
 <?php });
\ No newline at end of file
diff --git a/src/Template/Employee/transaction_history.html.php b/src/Template/Employee/transaction_history.html.php
index 701385b..d84267f 100644
--- a/src/Template/Employee/transaction_history.html.php
+++ b/src/Template/Employee/transaction_history.html.php
@@ -3,8 +3,8 @@
 <?php $t->block("content", function ($t) {
     $transactionList = $t->get("transactionList");
     $transactionStatus = array(
-        '0' => 'COMPLETED',
-        '1' => 'ON HOLD'
+        '0' => 'Completed',
+        '1' => 'On Hold'
      );
     ?>
 <!-- Content Wrapper. Contains page content -->
diff --git a/src/Template/form_login.html.php b/src/Template/form_login.html.php
index c2a1a76..47943eb 100644
--- a/src/Template/form_login.html.php
+++ b/src/Template/form_login.html.php
@@ -35,6 +35,7 @@
             <!-- /.col -->
         </div>
         <?php }); ?>
+        <a href="recover_password" class="text-center row">Forgot password?</a>
         <a href="register" class="text-center row">Register for a new account</a>
         <a href="register_employee" class="text-center row">Register as an employee</a>
     </div>
diff --git a/src/Template/form_recover_password.html.php b/src/Template/form_recover_password.html.php
new file mode 100644
index 0000000..fb0cecb
--- /dev/null
+++ b/src/Template/form_recover_password.html.php
@@ -0,0 +1,39 @@
+<?php $t->extend("base.html.php"); ?>
+<?php $t->set("is_login", true); ?>
+<?php $t->block("body", function ($t) { ?>
+<div class="login-box">
+    <div class="login-logo">
+        <a><b>Secure</b>Bank</a>
+    </div>
+    <!-- /.login-logo -->
+    <div class="login-box-body">
+        <p class="login-box-msg">Password recovery</p>
+        <?php $t->flash_echo(); ?>
+        <?php $t->formh($t->get("form"), array("action"=>"/recover_password", "method"=>"post"), function ($t) { ?>
+        <?php
+            $email_errors = $t->get("form")->getError("email");
+            ?>
+        <div class="form-group has-feedback <?php if (sizeof($email_errors) > 0) echo "has-error"; ?>">
+            <?php if (sizeof($email_errors) > 0) { ?>
+            <label for="recover_password[email]" class="control-label"><span class="glyphicon glyphicon-remove-circle"></span> <?= $email_errors[0] ?></label>
+            <?php } ?>
+            <input type="email" class="form-control" placeholder="E-Mail" name="recover_password[email]" value="<?= $t->s($t->get('form')->getValue('email')); ?>" required>
+            <span class="glyphicon glyphicon-envelope form-control-feedback"></span>
+        </div>
+        <div class="form-group has-feedback">
+            <label for="recover_password[employee]" class="control-label">Are you an employee?</label>
+            <input type="checkbox" name="recover_password[employee]">
+        </div>
+        <div class="row">
+            <div class="col-xs-12">
+                <button type="submit" class="btn btn-primary btn-block btn-flat">Reset password</button>
+            </div>
+            <!-- /.col -->
+        </div>
+        <?php }); ?>
+        <a href="login" class="text-center row">Back to login</a>
+    </div>
+    <!-- /.login-box-body -->
+</div>
+<!-- /.login-box -->
+<?php });
\ No newline at end of file
diff --git a/src/Template/form_registration.html.php b/src/Template/form_registration.html.php
index 7b804d9..c9afaae 100644
--- a/src/Template/form_registration.html.php
+++ b/src/Template/form_registration.html.php
@@ -1,7 +1,7 @@
 <?php $t->extend("base.html.php"); ?>
 <?php $t->set("is_login", true); ?>
 <?php $t->block("body", function ($t) { ?>
-<div class="login-box">
+<div class="login-box registration-form">
     <div class="login-logo">
         <a><b>Secure</b>Bank</a>
     </div>
@@ -17,67 +17,87 @@
             $postal_code_errors = $t->get("form")->getError("postal_code");
             $city_errors = $t->get("form")->getError("city");
             $email_errors = $t->get("form")->getError("email");
-            $password_errors = $t->get("form")->getError("password");
+            $password_errors = $t->get("form")->getError("_password_plain");
             $password_repeat_errors = $t->get("form")->getError("password_repeat");
+            $tan_method_errors = $t->get("form")->getError("tan_method");
             ?>
-        <div class="form-group has-feedback <?php if (sizeof($first_name_errors) > 0) echo "has-error"; ?>">
-            <label for="form_registration[first_name]">First name</label>
-            <input type="text" class="form-control" name="form_registration[first_name]" value="<?= $t->s($t->get('form')->getValue('first_name')); ?>" required>
-            <?php if (sizeof($first_name_errors) > 0) { ?>
-            <p class="text-red"><span class="glyphicon glyphicon-remove-circle"></span> <?= $first_name_errors[0] ?><br></p>
-            <?php } ?>
-        </div>
-        <div class="form-group has-feedback <?php if (sizeof($last_name_errors) > 0) echo "has-error"; ?>">
-            <label for="form_registration[last_name]">Last name</label>
-            <input type="text" class="form-control" name="form_registration[last_name]" value="<?= $t->s($t->get('form')->getValue('last_name')); ?>" required>
-            <?php if (sizeof($last_name_errors) > 0) { ?>
-            <p class="text-red"><span class="glyphicon glyphicon-remove-circle"></span> <?= $last_name_errors[0] ?><br></p>
-            <?php } ?>
-        </div>
-        <div class="form-group has-feedback <?php if (sizeof($address_errors) > 0) echo "has-error"; ?>">
-            <label for="form_registration[address]">Address</label>
-            <input type="text" class="form-control" name="form_registration[address]" value="<?= $t->s($t->get('form')->getValue('address')); ?>" required>
-            <?php if (sizeof($address_errors) > 0) { ?>
-            <p class="text-red"><span class="glyphicon glyphicon-remove-circle"></span> <?= $address_errors[0] ?><br></p>
-            <?php } ?>
-        </div>
-        <div class="form-group has-feedback <?php if (sizeof($postal_code_errors) > 0) echo "has-error"; ?>">
-            <label for="form_registration[postal_code]">Postal code</label>
-            <input type="text" class="form-control" name="form_registration[postal_code]" value="<?= $t->s($t->get('form')->getValue('postal_code')); ?>" required>
-            <?php if (sizeof($postal_code_errors) > 0) { ?>
-            <p class="text-red"><span class="glyphicon glyphicon-remove-circle"></span> <?= $postal_code_errors[0] ?><br></p>
-            <?php } ?>
+        <div class="row">
+            <div class="col-xs-6 form-group has-feedback <?php if (sizeof($first_name_errors) > 0) echo "has-error"; ?>">
+                <label for="form_registration[first_name]">First name</label>
+                <input type="text" class="form-control" name="form_registration[first_name]" value="<?= $t->s($t->get('form')->getValue('first_name')); ?>" required>
+                <?php if (sizeof($first_name_errors) > 0) { ?>
+                <p class="text-red"><span class="glyphicon glyphicon-remove-circle"></span> <?= $first_name_errors[0] ?><br></p>
+                <?php } ?>
+            </div>
+            <div class="col-xs-6 form-group has-feedback <?php if (sizeof($last_name_errors) > 0) echo "has-error"; ?>">
+                <label for="form_registration[last_name]">Last name</label>
+                <input type="text" class="form-control" name="form_registration[last_name]" value="<?= $t->s($t->get('form')->getValue('last_name')); ?>" required>
+                <?php if (sizeof($last_name_errors) > 0) { ?>
+                <p class="text-red"><span class="glyphicon glyphicon-remove-circle"></span> <?= $last_name_errors[0] ?><br></p>
+                <?php } ?>
+            </div>
         </div>
-        <div class="form-group has-feedback <?php if (sizeof($city_errors) > 0) echo "has-error"; ?>">
-            <label for="form_registration[city]">City</label>
-            <input type="text" class="form-control" name="form_registration[city]" value="<?= $t->s($t->get('form')->getValue('city')); ?>" required>
-            <?php if (sizeof($city_errors) > 0) { ?>
-            <p class="text-red"><span class="glyphicon glyphicon-remove-circle"></span> <?= $city_errors[0] ?><br></p>
-            <?php } ?>
+        <div class="row">
+            <div class="col-xs-6 form-group has-feedback <?php if (sizeof($address_errors) > 0) echo "has-error"; ?>">
+                <label for="form_registration[address]">Address</label>
+                <input type="text" class="form-control" name="form_registration[address]" value="<?= $t->s($t->get('form')->getValue('address')); ?>" required>
+                <?php if (sizeof($address_errors) > 0) { ?>
+                <p class="text-red"><span class="glyphicon glyphicon-remove-circle"></span> <?= $address_errors[0] ?><br></p>
+                <?php } ?>
+            </div>
+             <div class="col-xs-6 form-group has-feedback <?php if (sizeof($city_errors) > 0) echo "has-error"; ?>">
+                <label for="form_registration[city]">City</label>
+                <input type="text" class="form-control" name="form_registration[city]" value="<?= $t->s($t->get('form')->getValue('city')); ?>" required>
+                <?php if (sizeof($city_errors) > 0) { ?>
+                <p class="text-red"><span class="glyphicon glyphicon-remove-circle"></span> <?= $city_errors[0] ?><br></p>
+                <?php } ?>
+            </div>
         </div>
-        <div class="form-group has-feedback <?php if (sizeof($email_errors) > 0) echo "has-error"; ?>">
-            <label for="form_registration[email]">E-Mail</label>
-            <input type="email" class="form-control" name="form_registration[email]" value="<?= $t->s($t->get('form')->getValue('email')); ?>" required>
-            <span class="glyphicon glyphicon-envelope form-control-feedback"></span>
-            <?php if (sizeof($email_errors) > 0) { ?>
-            <p class="text-red"><span class="glyphicon glyphicon-remove-circle"></span> <?= $email_errors[0] ?><br></p>
-            <?php } ?>
+        <div class="row">
+            <div class="col-xs-6 form-group has-feedback <?php if (sizeof($postal_code_errors) > 0) echo "has-error"; ?>">
+                <label for="form_registration[postal_code]">Postal code</label>
+                <input type="text" class="form-control" name="form_registration[postal_code]" value="<?= $t->s($t->get('form')->getValue('postal_code')); ?>" required>
+                <?php if (sizeof($postal_code_errors) > 0) { ?>
+                <p class="text-red"><span class="glyphicon glyphicon-remove-circle"></span> <?= $postal_code_errors[0] ?><br></p>
+                <?php } ?>
+             </div>
+             <div class="col-xs-6 form-group has-feedback <?php if (sizeof($email_errors) > 0) echo "has-error"; ?>">
+                 <label for="form_registration[email]">E-Mail</label>
+                 <input type="email" class="form-control" name="form_registration[email]" value="<?= $t->s($t->get('form')->getValue('email')); ?>" required>
+                 <span class="glyphicon glyphicon-envelope form-control-feedback"></span>
+                 <?php if (sizeof($email_errors) > 0) { ?>
+                 <p class="text-red"><span class="glyphicon glyphicon-remove-circle"></span> <?= $email_errors[0] ?><br></p>
+                 <?php } ?>
+             </div>
         </div>
-        <div class="form-group has-feedback <?php if (sizeof($password_errors) > 0) echo "has-error"; ?>">
-            <label for="form_registration[_password_plain]">Password</label>
-            <input type="password" class="form-control" name="form_registration[_password_plain]" value="<?= $t->s($t->get('form')->getValue('_password_plain')); ?>" required>
-            <span class="glyphicon glyphicon-lock form-control-feedback"></span>
-            <?php if (sizeof($password_errors) > 0) { ?>
-            <p class="text-red"><span class="glyphicon glyphicon-remove-circle"></span> <?= $password_errors[0] ?><br></p>
-            <?php } ?>
+        <div class="row">
+            <div class="col-xs-6 form-group has-feedback <?php if (sizeof($password_errors) > 0) echo "has-error"; ?>">
+                <label for="form_registration[_password_plain]">Password</label>
+                <input type="password" class="form-control" name="form_registration[_password_plain]" pattern="(?!.*[äöüÄÖÜ\s%&/~§<>]).+" title="Only letters, numbers and '-_$^?\+#*' allowed" value="<?= $t->s($t->get('form')->getValue('_password_plain')); ?>" required>
+                <span class="glyphicon glyphicon-lock form-control-feedback"></span>
+                <?php if (sizeof($password_errors) > 0) { ?>
+                <p class="text-red"><span class="glyphicon glyphicon-remove-circle"></span> <?= $password_errors[0] ?><br></p>
+                <?php } ?>
+            </div>
+            <div class="col-xs-6 form-group has-feedback <?php if (sizeof($password_repeat_errors) > 0) echo "has-error"; ?>">
+                <label for="form_registration[password_repeat]">Repeat your password</label>
+                <input type="password" class="form-control" name="form_registration[password_repeat]" value="<?= $t->s($t->get('form')->getValue('password_repeat')); ?>" required>
+                <span class="glyphicon glyphicon-lock form-control-feedback"></span>
+                <?php if (sizeof($password_repeat_errors) > 0) { ?>
+                <p class="text-red"><span class="glyphicon glyphicon-remove-circle"></span> <?= $password_repeat_errors[0] ?><br></p>
+                <?php } ?>
+            </div>
         </div>
-        <div class="form-group has-feedback <?php if (sizeof($password_repeat_errors) > 0) echo "has-error"; ?>">
-            <label for="form_registration[password_repeat]">Repeat your password</label>
-            <input type="password" class="form-control" name="form_registration[password_repeat]" value="<?= $t->s($t->get('form')->getValue('password_repeat')); ?>" required>
-            <span class="glyphicon glyphicon-lock form-control-feedback"></span>
-            <?php if (sizeof($password_repeat_errors) > 0) { ?>
-            <p class="text-red"><span class="glyphicon glyphicon-remove-circle"></span> <?= $password_repeat_errors[0] ?><br></p>
-            <?php } ?>
+         <div class="row">
+             <div class="col-xs-12 form-group has-feedback <?php if (sizeof($tan_method_errors) > 0) echo "has-error"; ?>">
+                <label for="tan_by_email">
+                <input type="radio"  id='tan_by_email' name="form_registration[tan_method]" value="1" checked>&nbsp;&nbsp;I would like to receive TANs by Email.</label>
+                <label for="tan_by_scs">
+                <input type="radio" id="tan_by_scs" name="form_registration[tan_method]" value="2" >&nbsp;&nbsp;I would like to use the TANs generated by the secure Smart Card Simulator.</label>
+                <?php if (sizeof($tan_method_errors) > 0) { ?>
+                    <p class="text-red"><span class="glyphicon glyphicon-remove-circle"></span> <?= $tan_method_errors[0] ?><br></p>
+                <?php } ?>
+            </div>
         </div>
         <div class="row">
             <div class="col-xs-12">
diff --git a/src/Template/form_registration_employee.html.php b/src/Template/form_registration_employee.html.php
index 278e6ac..fc0b2e3 100644
--- a/src/Template/form_registration_employee.html.php
+++ b/src/Template/form_registration_employee.html.php
@@ -15,7 +15,7 @@
             $first_name_errors = $t->get("form")->getError("first_name");
             $last_name_errors = $t->get("form")->getError("last_name");
             $email_errors = $t->get("form")->getError("email");
-            $password_errors = $t->get("form")->getError("password");
+            $password_errors = $t->get("form")->getError("_password_plain");
             $password_repeat_errors = $t->get("form")->getError("password_repeat");
             ?>
         <div class="form-group has-feedback <?php if (sizeof($first_name_errors) > 0) echo "has-error"; ?>">
@@ -42,7 +42,7 @@
         </div>
         <div class="form-group has-feedback <?php if (sizeof($password_errors) > 0) echo "has-error"; ?>">
             <label for="form_registration[_password_plain]">Password</label>
-            <input type="password" class="form-control" name="form_registration[_password_plain]" value="<?= $t->s($t->get('form')->getValue('_password_plain')); ?>" required>
+            <input type="password" class="form-control" name="form_registration[_password_plain]" pattern="(?!.*[äöüÄÖÜ\s%&/~§<>]).+" title="Only letters, numbers and '-_$^?\+#*' allowed" value="<?= $t->s($t->get('form')->getValue('_password_plain')); ?>" required>
             <span class="glyphicon glyphicon-lock form-control-feedback"></span>
             <?php if (sizeof($password_errors) > 0) { ?>
             <p class="text-red"><span class="glyphicon glyphicon-remove-circle"></span> <?= $password_errors[0] ?><br></p>
diff --git a/src/Template/form_reset_password.html.php b/src/Template/form_reset_password.html.php
new file mode 100644
index 0000000..69ec5f2
--- /dev/null
+++ b/src/Template/form_reset_password.html.php
@@ -0,0 +1,46 @@
+<?php $t->extend("base.html.php"); ?>
+<?php $t->set("is_login", true); ?>
+<?php $t->block("body", function ($t) { ?>
+<div class="login-box">
+    <div class="login-logo">
+        <a><b>Secure</b>Bank</a>
+    </div>
+    <!-- /.login-logo -->
+    <div class="login-box-body">
+        <p class="login-box-msg">Set new password</p>
+        <?php $t->flash_echo(); ?>
+        <?php $t->formh($t->get("form"), array("action"=>"/reset_password", "method"=>"post"), function ($t) { ?>
+        <?php
+            $pw_errors = $t->get("form")->getError("_password_plain");
+            $password_repeat_errors = $t->get("form")->getError("password_repeat");
+            ?>
+        <div class="form-group has-feedback <?php if (sizeof($pw_errors) > 0) echo "has-error"; ?>">
+            <label for="reset_password[_password_plain]">Password</label>
+            <input type="password" class="form-control" name="reset_password[_password_plain]" pattern="(?!.*[äöüÄÖÜ\s%&/~§<>]).+" title="Only letters, numbers and '-_$^?\+#*' allowed" value="<?= $t->s($t->get('form')->getValue('_password_plain')); ?>" required>
+            <span class="glyphicon glyphicon-lock form-control-feedback"></span>
+            <?php if (sizeof($pw_errors) > 0) { ?>
+            <p class="text-red"><span class="glyphicon glyphicon-remove-circle"></span> <?= $pw_errors[0] ?><br></p>
+            <?php } ?>
+        </div>
+        <div class="form-group has-feedback <?php if (sizeof($password_repeat_errors) > 0) echo "has-error"; ?>">
+            <label for="reset_password[password_repeat]">Repeat your password</label>
+            <input type="password" class="form-control" name="reset_password[password_repeat]" value="<?= $t->s($t->get('form')->getValue('password_repeat')); ?>" required>
+            <span class="glyphicon glyphicon-lock form-control-feedback"></span>
+            <?php if (sizeof($password_repeat_errors) > 0) { ?>
+            <p class="text-red"><span class="glyphicon glyphicon-remove-circle"></span> <?= $password_repeat_errors[0] ?><br></p>
+            <?php } ?>
+        </div>
+        <input type="hidden" name="reset_password[token]" value="<?= $t->get('token'); ?>">
+        <div class="row">
+            <div class="col-xs-12">
+                <button type="submit" class="btn btn-primary btn-block btn-flat">Reset password</button>
+            </div>
+            <!-- /.col -->
+        </div>
+        <?php }); ?>
+        <a href="login" class="text-center row">Back to login</a>
+    </div>
+    <!-- /.login-box-body -->
+</div>
+<!-- /.login-box -->
+<?php });
\ No newline at end of file
diff --git a/src/Template/transaction_history_download.php b/src/Template/transaction_history_download.php
index 6e043bd..134fdb7 100644
--- a/src/Template/transaction_history_download.php
+++ b/src/Template/transaction_history_download.php
@@ -1,283 +1,208 @@
 <?php
-    $outfilename = "";
-    $tbl=0;
-    $total_amount = 0;
-    $llx= 50; $lly=50; $urx=550; $ury=800;
-    $invokedFrom = $t->get("invokedFrom");
 
-    switch( $invokedFrom) {
-        case _STATEMENT            :     $accountInfo = $t->get("accountInfo");
-                                         $customer = $t->get("customer");
-                                         $transactionList = $t->get("transactionList");
-                                         $headers = array('Transaction ID', 'Transaction Date','Debit Amount','Credit Amount',
-                                               'To/From Account ID');
-                                         $pdfTitle ='Statement';
-                                         $filename = 'Statement_'.time().'.pdf';
-                                          break;
-        case _TRANSACTION_HISTORY :       $accountInfo = $t->get("accountInfo");
-                                          $customer = $t->get("customer");
-                                          $transactionList = $t->get("transactionList");
-                                          $headers = array('Transaction ID', 'Transaction Date','Amount','Beneficiary Account ID',
-                                                      'Beneficiary Account Name', 'Status');
-                                          $pdfTitle ='Transaction History';
-                                          $filename = 'Transaction_History_'.time().'.pdf';
-                                          $transactionStatus = array(
-                                                                        '0' => 'COMPLETED',
-                                                                        '1' => 'ON HOLD'
-                                                                );
-                                          break;
-        case _CUSTOMER_DETAILS_PENDING_TRANSACTION :      $accountInfo = $t->get("accountInfo");
-                                                          $customer = $t->get("customer");
-                                                          $transactionList = $t->get("onHoldTransactionList");
-                                                          $headers = array('Transaction ID', 'To Account Number',
-                                                          'Transaction Date','Amount');
-                                                          $pdfTitle ="Customer's Pending Transaction";
-                                                          $filename ='Customer_Pending_transaction'.time().'.pdf';
-                                                          break;
-        case _CUSTOMER_DETAILS_COMPLETED_TRANSACTION :    $accountInfo = $t->get("accountInfo");
-                                                          $customer = $t->get("customer");
-                                                          $transactionList = $t->get("approvedTransactionList");
-                                                          $headers = array('Transaction ID', 'To Account Number',
-                                                          'Transaction Date','Amount');
-                                                          $pdfTitle ="Customer's Completed Transaction";
-                                                          $filename = 'Customer_Completed_transaction'.time().'.pdf';
-                                                          break;
-        case _PENDING_TRANSACTIONS                   :    $transactionList = $t->get("transactionList");
-                                                          $headers = array('Transaction ID', 'Transaction Date','Amount','Beneficiary Account ID',
-                                                                        'Beneficiary Account Name');
-                                                          $pdfTitle ='Pending Transactions';
-                                                          $filename = 'Pending_Transactions_'.time().'.pdf';
-                                                          break;
-
-    }
-
-    $colspan = count($headers)+1;
-    try {
-        $p = new PDFlib();
-    
-        $p->set_option("errorpolicy=return");
-        $p->set_option("stringformat=utf8");
-    
-        if ($p->begin_document($outfilename, "") == 0) {
-            die("Error: " . $p->get_errmsg());
-        }
-    
-        $p->set_info("Creator", "SecureBank");
-        $p->set_info("Title", $pdfTitle);
-    
-        /* -------------------- Add table cells -------------------- */
-    
-        /* ---------- row 1: table header (spans all columns) */
-        $row = 1; $col = 1;
-        $font = $p->load_font("Times-Bold", "unicode", "");
-        if ($font == 0) {
-            die("Error: " . $p->get_errmsg());
-        }
-    
-        $optlist = "fittextline={position=center font=" . $font . " fontsize=14} " .
-                "colspan=".$colspan;
-    
-        $date = 'Date: '.date('d-m-Y');
-        $headertext = $pdfTitle;
-    
-        $tbl = $p->add_table_cell($tbl, $col, $row, $headertext, $optlist);
-        if ($tbl == 0) {
-            die("Error: " . $p->get_errmsg());
-        }
-        $row++;
-
-        if( $invokedFrom != _PENDING_TRANSACTIONS ){
-            $optlist = "fittextline={position={left center} font=" . $font . " fontsize=12} " .
-                    "colspan=".$colspan;
-
-            $accountNo = 'Account No.  '.$accountInfo->getAccountId();
-            $customer_name ='Customer Name : '.$customer->getFirstName().' '.$customer->getLastName();
-            $date = 'Date: '.date('d-m-Y');
-            $headertext = $accountNo.'             '.$customer_name.'               '.$date;
-
-            $tbl = $p->add_table_cell($tbl, $col, $row, $headertext, $optlist);
-            if ($tbl == 0) {
-                die("Error: " . $p->get_errmsg());
-            }
-            $row++;
-        }
-
-    
-        /* ---------- Table Headers -----------------*/
-            $col =1;
-            $font = $p->load_font("Times-Roman", "unicode", "");
-            if ($font == 0) {
-                die("Error: " . $p->get_errmsg());
-            }
-            foreach( $headers as $header ){
-                $optlist = "fontname=Times-Roman encoding=unicode fontsize=10 ";
-                $tf = $p->add_textflow(0,$header, $optlist);
-                if ($tf == 0) {
-                    die("Error: " . $p->get_errmsg());
-                }
-                $optlist = "margin=2 textflow=" . $tf;
-                $tbl = $p->add_table_cell($tbl, $col++, $row, "", $optlist);
-                if ($tbl == 0) {
-                    die("Error: " . $p->get_errmsg());
-                }
-            }
-
-          $optlist = "fittextline={position=center font=" . $font . " fontsize=10} ";
-          $tbl = $p->add_table_cell($tbl, $col++, $row, 'Remarks', $optlist);
-          $row++;
-
-
-        /* ---------- Table Data -----------------*/
-        foreach($transactionList as $transaction) {
-                $col=1;
-                $optlist = "colwidth=20% fittextline={font=" . $font . " fontsize=10}";
-                $amount_field_optlist = "colwidth=20%  fittextline={position={right center} font=" . $font . " fontsize=10} ";
-                switch ($invokedFrom){
-                     case _STATEMENT :      if ($accountInfo->getAccountId() != $transaction->getFromAccountId()) {
-                                                $credit_amount = $transaction->getAmount();
-                                                $debit_amount = '--';
-                                                $accountId = $transaction->getFromAccountId();
-                                            } else {
-                                                $debit_amount = $transaction->getAmount();
-                                                $credit_amount = '--';
-                                                $accountId = $transaction->getToAccountId();
-                                            }
-
-                                            $tbl = $p->add_table_cell($tbl, $col++, $row, $transaction->getId(), $optlist);
-                                            $tbl = $p->add_table_cell($tbl, $col++, $row, date('d.m.Y',strtotime($transaction->getTransactionDate() ) ), $optlist);
-
-                                            $tbl = $p->add_table_cell($tbl, $col++, $row, $debit_amount, $amount_field_optlist);
-                                            $tbl = $p->add_table_cell($tbl, $col++, $row, $credit_amount, $amount_field_optlist);
-                                            $tbl = $p->add_table_cell($tbl, $col++, $row, $accountId, $optlist);
-                                            $optlist = "fontname=Times-Roman encoding=unicode fontsize=10 ";
-                                            $tf = $p->add_textflow(0,$transaction->getRemarks(), $optlist);
-                                            if ($tf == 0) {
-                                                die("Error: " . $p->get_errmsg());
-                                            }
-                                            $optlist = "margin=2 textflow=" . $tf;
-                                            $tbl = $p->add_table_cell($tbl, $col++, $row, "", $optlist);
-                                            if ($tbl == 0) {
-                                                die("Error: " . $p->get_errmsg());
-                                            }
-                                            break;
-
-                     case _TRANSACTION_HISTORY :
-                                                  $tbl = $p->add_table_cell($tbl, $col++, $row, $transaction->getId(), $optlist);
-                                                  $tbl = $p->add_table_cell($tbl, $col++, $row, date('d.m.Y',strtotime($transaction->getTransactionDate() ) ), $optlist);
-
-                                                  $tbl = $p->add_table_cell($tbl, $col++, $row, $transaction->getAmount(), $amount_field_optlist);
-                                                  $tbl = $p->add_table_cell($tbl, $col++, $row, $transaction->getToAccountID(), $optlist);
-                                                  $tbl = $p->add_table_cell($tbl, $col++, $row, $transaction->getToAccountName(), $optlist);
-                                                  $status = $transactionStatus[$transaction->getIsOnHold()];
-                                                  $tbl = $p->add_table_cell($tbl, $col++, $row, $status, $optlist);
-                                                  $optlist = "fontname=Times-Roman encoding=unicode fontsize=10 ";
-                                                  $tf = $p->add_textflow(0,$transaction->getRemarks(), $optlist);
-                                                  if ($tf == 0) {
-                                                      die("Error: " . $p->get_errmsg());
-                                                  }
-                                                  $optlist = "margin=2 textflow=" . $tf;
-                                                  $tbl = $p->add_table_cell($tbl, $col++, $row, "", $optlist);
-                                                  if ($tbl == 0) {
-                                                      die("Error: " . $p->get_errmsg());
-                                                  }
-                                                  break;
-                     case _CUSTOMER_DETAILS_PENDING_TRANSACTION :
-                     case _CUSTOMER_DETAILS_COMPLETED_TRANSACTION :
-                                                    $tbl = $p->add_table_cell($tbl, $col++, $row, $transaction->getId(), $optlist);
-                                                    $tbl = $p->add_table_cell($tbl, $col++, $row, $transaction->getToAccountID(), $optlist);
-                                                    $tbl = $p->add_table_cell($tbl, $col++, $row, date('d.m.Y',strtotime($transaction->getTransactionDate() ) ), $optlist);
-                                                    $tbl = $p->add_table_cell($tbl, $col++, $row, $transaction->getAmount(), $amount_field_optlist);
-                                                    $optlist = "fontname=Times-Roman encoding=unicode fontsize=10 ";
-                                                     $tf = $p->add_textflow(0,$transaction->getRemarks(), $optlist);
-                                                      if ($tf == 0) {
-                                                          die("Error: " . $p->get_errmsg());
-                                                      }
-                                                      $optlist = "margin=2 textflow=" . $tf;
-                                                      $tbl = $p->add_table_cell($tbl, $col++, $row, "", $optlist);
-                                                      if ($tbl == 0) {
-                                                          die("Error: " . $p->get_errmsg());
-                                                      }
+$textColour = array(0, 0, 0);
+$headerColour = array(100, 100, 100);
+$tableHeaderTopTextColour = array(255, 255, 255);
+$tableHeaderTopFillColour = array(125, 152, 179);
+$tableBorderColour = array(50, 50, 50);
+$tableRowFillColour = array(213, 170, 170);
+
+$invokedFrom = $t->get("invokedFrom");
+
+switch( $invokedFrom) {
+    case _STATEMENT            :     $accountInfo = $t->get("accountInfo");
+                                     $customer = $t->get("customer");
+                                     $transactionList = $t->get("transactionList");
+                                     $headers = array(
+                                             "ID"                   => "10" ,
+                                             "To / From Account No." => "40" ,
+                                             "Date"                 => "25" ,
+                                             "Debit Amount"         => "40" ,
+                                             "Credit Amount"        => "40" ,
+                                             "Remarks"              => "40" ,
+
+                                     );
+                                     $pdfTitle ='Statement';
+                                     $filename = 'Statement_'.time().'.pdf';
+                                     break;
+    case _TRANSACTION_HISTORY :      $accountInfo = $t->get("accountInfo");
+                                     $customer = $t->get("customer");
+                                     $transactionList = $t->get("transactionList");
+                                     $headers = array(
+                                               "ID"                   => "10" ,
+                                               "To Account No."        => "35" ,
+                                               "To Account Name"      => "25" ,
+                                               "Date"                 => "35" ,
+                                               "Amount"               => "25" ,
+                                               "Status"               => "20" ,
+                                               "Remarks"              => "40" ,
+
+                                     );
+                                     $pdfTitle ='Transaction History';
+                                     $filename = 'Transaction_History_'.time().'.pdf';
+                                     $transactionStatus = array(
+                                                             '0' => 'Approved',
+                                                             '1' => 'On Hold',
+                                                             '2' => "Rejected"
+                                                             );
+                                     break;
+     case _CUSTOMER_DETAILS_PENDING_TRANSACTION :   $accountInfo = $t->get("accountInfo");
+                                                    $customer = $t->get("customer");
+                                                    $transactionList = $t->get("onHoldTransactionList");
+                                                    $headers = array(
+                                                           "ID"                   => "50" ,
+                                                           "To Account No."       => "50" ,
+                                                           "Date"                 => "40" ,
+                                                           "Amount"               => "50" ,
+
+                                                    );
+                                                    $pdfTitle ="Pending Transactions";
+                                                    $filename = 'Customer_Pending_Transactions'.time().'.pdf';
                                                     break;
-                     case _PENDING_TRANSACTIONS : $tbl = $p->add_table_cell($tbl, $col++, $row, $transaction->getId(), $optlist);
-                                                  $tbl = $p->add_table_cell($tbl, $col++, $row, date('d.m.Y',strtotime($transaction->getTransactionDate() ) ), $optlist);
-                                                  $tbl = $p->add_table_cell($tbl, $col++, $row, $transaction->getAmount(), $amount_field_optlist);
-                                                  $tbl = $p->add_table_cell($tbl, $col++, $row, $transaction->getToAccountID(), $optlist);
-                                                  $tbl = $p->add_table_cell($tbl, $col++, $row, $transaction->getToAccountName(), $optlist);
-
-                                                  $optlist = "fontname=Times-Roman encoding=unicode fontsize=10 ";
-                                                   $tf = $p->add_textflow(0,$transaction->getRemarks(), $optlist);
-                                                    if ($tf == 0) {
-                                                        die("Error: " . $p->get_errmsg());
-                                                    }
-                                                    $optlist = "margin=2 textflow=" . $tf;
-                                                    $tbl = $p->add_table_cell($tbl, $col++, $row, "", $optlist);
-                                                    if ($tbl == 0) {
-                                                        die("Error: " . $p->get_errmsg());
-                                                    }
-                                                  break;
-                }
-
-                $row++;
-        }
-        /* ---------- Place the table on one or more pages ---------- */
-    
-        /*
-         * Loop until all of the table is placed; create new pages
-         * as long as more table instances need to be placed.
-         */
-        do {
-            $p->begin_page_ext(0, 0, "width=a4.width height=a4.height");
-    
-            /* Shade every other $row; draw lines for all table cells.
-             * Add "showcells showborder" to visualize cell borders
-             */
-            $optlist = "header=1 rowheightdefault=auto " .
-            "fill={{area=rowodd fillcolor={gray 0.9}}} " .
-            "stroke={{line=other}} ";
-    
-            /* Place the table instance */
-            $result = $p->fit_table($tbl, $llx, $lly, $urx, $ury, $optlist);
-            if ($result ==  "_error") {
-                die("Couldn't place table: " . $p->get_errmsg());
-            }
-            $p->end_page_ext("");
-    
-        } while ($result == "_boxfull");
-    
-        /* Check the $result; "_stop" means all is ok. */
-        if ($result != "_stop") {
-            if ($result ==  "_error") {
-                die("Error when placing table: " . $p->get_errmsg());
-            }
-            else {
-                /* Any other return value is a user exit caused by
-                 * the "return" option; this requires dedicated code to
-                 * deal with.
-                 */
-                die("User return found in Table");
-            }
-        }
-    
-        /* This will also delete Textflow handles used in the table */
-        $p->delete_table($tbl, "");
-    
-        $p->end_document("");
-    
-        $buf = $p->get_buffer();
-        $len = strlen($buf);
-        header("Content-type: application/pdf");
-        header("Content-Length: $len");
-        header("Content-Disposition: inline; filename=$filename");
-        print $buf;
-    }
-    catch (PDFlibException $e) {
-        die("PDFlib exception occurred in starter_table sample:\n" .
-            "[" . $e->get_errnum() . "] " . $e->get_apiname() . ": " .
-            $e->get_errmsg() . "\n");
+    case _CUSTOMER_DETAILS_COMPLETED_TRANSACTION :    $accountInfo = $t->get("accountInfo");
+                                                      $customer = $t->get("customer");
+                                                      $transactionList = $t->get("approvedTransactionList");
+                                                      $headers = array(
+                                                             "ID"                   => "10" ,
+                                                             "From Account No."     => "28" ,
+                                                             "From Account Name"    => "32" ,
+                                                             "To Account No."       => "25" ,
+                                                             "To Account Name"      => "30" ,
+                                                             "Date"                 => "20" ,
+                                                             "Amount"               => "25" ,
+                                                             "Remarks"              => "25" ,
+
+                                                      );
+                                                      $pdfTitle ="Completed Transactions";
+                                                      $filename = 'Customer_Completed_Transactions'.time().'.pdf';
+                                                      break;
+    case _PENDING_TRANSACTIONS                   :    $transactionList = $t->get("transactionList");
+                                                      $headers = array(
+                                                           "ID"                   => "10" ,
+                                                           "From Account No."     => "30" ,
+                                                           "From Account Name"    => "30" ,
+                                                           "To Account No."       => "30" ,
+                                                           "To Account Name"      => "25" ,
+                                                           "Date"                 => "20" ,
+                                                           "Amount"               => "20" ,
+                                                           "Remarks"              => "30" ,
+
+                                                      );
+                                                      $pdfTitle ='Pending Transactions';
+                                                      $filename = 'Pending_Transactions_'.time().'.pdf';
+                                                      break;
+                                                      
+   case _COMPLETED_TRANSACTIONS                   :   $transactionList = $t->get("transactionList");
+                                                      $headers = array(
+                                                           "ID"                   => "10" ,
+                                                           "From Account No."     => "25" ,
+                                                           "From Account Name"    => "30" ,
+                                                           "To Account No."       => "25" ,
+                                                           "To Account Name"      => "25" ,
+                                                           "Date"                 => "17" ,
+                                                           "Amount"               => "20" ,
+                                                           "Status"               => "20",
+                                                           "Remarks"              => "25" ,
+
+                                                      );
+                                                      $transactionStatus = array(
+                                                             '0' => 'Approved',
+                                                             '1' => 'On Hold',
+                                                             '2' => "Rejected"
+                                                      );
+                                                      $pdfTitle ='Completed Transactions';
+                                                      $filename = 'Completed_Transactions_'.time().'.pdf';
+                                                      break;
+}
+
+$pdf = new \PDF_MC_Table( 'P', 'mm', 'A4' );
+$pdf->SetTextColor( $textColour[0], $textColour[1], $textColour[2] );
+
+$pdf->AddPage();
+$pdf->SetTextColor( $headerColour[0], $headerColour[1], $headerColour[2] );
+$pdf->SetFont( 'Arial', '', 16 );
+$pdf->Cell( 0, 15, 'Secure Bank', 0, 0, 'C' );
+$pdf->SetTextColor( $textColour[0], $textColour[1], $textColour[2] );
+$pdf->SetFont( 'Arial', '', 14 );
+$pdf->Ln( 10);
+$pdf->Cell( 0, 15, $pdfTitle , 0, 0, 'C' );
+$pdf->Ln( 15 );
+
+if(($invokedFrom !==_PENDING_TRANSACTIONS) && ($invokedFrom !==_COMPLETED_TRANSACTIONS)) {
+    $customer_name ='Customer Name : '.$customer->getFirstName().' '.$customer->getLastName();
+    $pdf->SetFont( 'Arial', 'B', 10 );
+    $pdf->Cell( 0, 6, 'Account Number : '.$accountInfo->getAccountId(), 0, 0, 'L' );
+    $pdf->Cell( 0, 6, "Date : ".date('d-m-Y'), 0, 0, 'R' );
+    $pdf->Ln( 6);
+    $pdf->Cell( 0, 6, $customer_name, 0, 0, 'L' );
+    $pdf->Ln( 8);
+}
+$col_height =6;
+$pdf->SetFont('Arial','B',8);
+$pdf->SetFillColor(224,224,224);
+$width = array();
+foreach($headers as $key=>$value){
+    $pdf->Cell($value,8,$key,1,0,'C',true);
+    array_push($width, $value);
+}
+$pdf->Ln();
+$pdf->SetFont('Arial','',8);
+foreach($transactionList as $transaction) {
+  $i=0;
+  switch ($invokedFrom){
+         case _STATEMENT :      if ($accountInfo->getAccountId() != $transaction->getFromAccountId()) {
+                                    $credit_amount = $transaction->getAmount();
+                                    $debit_amount = '--';
+                                    $accountId = $transaction->getFromAccountId();
+                                } else {
+                                    $debit_amount = $transaction->getAmount();
+                                    $credit_amount = '--';
+                                    $accountId = $transaction->getToAccountId();
+                               }
+                               $pdf->SetWidths($width);
+                               $pdf->SetAligns(array('L','C','C','R','R','L'));
+                               $pdf->Row(array($transaction->getId(),$accountId,date('d.m.Y',strtotime($transaction->getTransactionDate() ) ),
+                                               $debit_amount, $credit_amount, $transaction->getRemarks()));
+                               break;
+          case _TRANSACTION_HISTORY : $status = ($transaction->getIsRejected()) ? $transactionStatus[2] : $transactionStatus[$transaction->getIsOnHold()];
+                                      $pdf->SetWidths($width);
+                                      $pdf->SetAligns(array('L','C','L','C','R','L'));
+                                      $pdf->Row(array($transaction->getId(),$transaction->getToAccountId(),$transaction->getToAccountName(),
+                                                      date('d.m.Y',strtotime($transaction->getTransactionDate() ) ),$transaction->getAmount(),
+                                      $status, $transaction->getRemarks()));
+                                      break;
+          case _CUSTOMER_DETAILS_PENDING_TRANSACTION :
+                                       $pdf->SetWidths($width);
+                                       $pdf->SetAligns(array('L','C','C','R'));
+                                       $pdf->Row(array($transaction->getId(),$transaction->getToAccountId(),
+                                                       date('d.m.Y',strtotime($transaction->getTransactionDate() ) ),$transaction->getAmount()));
+                                       break;
+          case _CUSTOMER_DETAILS_COMPLETED_TRANSACTION :
+                                       $pdf->SetWidths($width);
+                                       $pdf->SetAligns(array('L','C','L','C','L','C','R','L'));
+                                       $pdf->Row(array($transaction->getId(),$transaction->getFromAccountId(),
+                                                       $transaction->getFromAccountName(),$transaction->getToAccountId(),$transaction->getToAccountName(),
+                                                       date('d.m.Y',strtotime($transaction->getTransactionDate() ) ),$transaction->getAmount(),
+                                                       $transaction->getRemarks()));
+                                       break;
+          case _PENDING_TRANSACTIONS : $pdf->SetWidths($width);
+                                       $pdf->SetAligns(array('L','C','L','C','L','C','R','L'));
+                                       $pdf->Row(array($transaction->getId(),$transaction->getFromAccountId(),
+                                                       $transaction->getFromAccountName(),$transaction->getToAccountId(),$transaction->getToAccountName(),
+                                                       date('d.m.Y',strtotime($transaction->getTransactionDate() ) ),$transaction->getAmount(),
+                                                       $transaction->getRemarks()));
+                                       break;
+                                          
+          case _COMPLETED_TRANSACTIONS : $status = ($transaction->getIsRejected()) ? $transactionStatus[2] : $transactionStatus[$transaction->getIsOnHold()];
+                                         $pdf->SetWidths($width);
+                                         $pdf->SetAligns(array('L','C','L','C','L','C','R','C','L'));
+                                         $pdf->Row(array($transaction->getId(),$transaction->getFromAccountId(),
+                                                         $transaction->getFromAccountName(),$transaction->getToAccountId(),$transaction->getToAccountName(),
+                                                         date('d.m.Y',strtotime($transaction->getTransactionDate() ) ),$transaction->getAmount(),
+                                                         $status,$transaction->getRemarks()));
+                                         break;
     }
-    catch (Exception $e) {
-        die($e);
-    }
-    
-    $p = 0;
-    ?>
\ No newline at end of file
+}
+$pdf->Output($filename, "I");
+
+?>
\ No newline at end of file

diff --git a/src/index.php b/src/index.php
index 98378ef..c5afc75 100644
--- a/src/index.php
+++ b/src/index.php
@@ -1,6 +1,8 @@
 <?php
 
 require_once("Vendor/Psr4ClassLoader.php");
+require_once('Vendor/fpdf18/protection/fpdf_protection.php');
+require_once('Vendor/fpdf18/mc_table.php');
 
 $loader = new Psr4ClassLoader();
 $loader->addPrefix("Service", "Service");
diff --git a/textparser/account_repo.c b/textparser/account_repo.c
index 453d27a..7538a0b 100644
--- a/textparser/account_repo.c
+++ b/textparser/account_repo.c
@@ -10,6 +10,135 @@
 
 #include "account_repo.h"
 
+my_bool isAccount(MYSQL* connection, int accountId) {
+	char* query;
+	MYSQL_STMT *statement;
+	MYSQL_BIND parameter[1], result[1];
+	int int_data, result_data;
+	unsigned long int_length, result_length;
+	my_bool is_exists;
+
+	query = "SELECT `ID` FROM `TBL_ACCOUNT` "
+				"WHERE `ACCOUNT_ID` = ?";
+
+	/*initialize the statement*/
+	statement = initializeStatement(connection);
+
+	/*prepare the statement*/
+	prepareStatement(statement, query, strlen(query));
+
+	/*parameter 1 - ACCOUNT_ID*/
+	parameter[0].buffer_type = MYSQL_TYPE_LONG;
+	parameter[0].buffer = (char *) &int_data;
+	parameter[0].buffer_length = 2;
+	parameter[0].is_null = 0;
+	parameter[0].length = &int_length;
+
+
+	/*assign appropriate values to the result properties*/
+	result[0].buffer_type = MYSQL_TYPE_LONG;
+	result[0].buffer = result_data;
+	result[0].buffer_length = 2;
+	result[0].is_null = 0;
+	result[0].length = &result_length;
+
+	/*bind the parameters and result*/
+	bindParameters(statement, parameter);
+	bindResult(statement, result);
+
+	/*assign values to the parameters*/
+	int_data = accountId;
+
+	/*execute the statement*/
+	executeStatement(statement);
+
+	storeResult(statement);
+
+	/*Check if the account exists*/
+	if (mysql_stmt_num_rows(statement) == 0) {
+		is_exists = 0;
+	} else {
+		is_exists = 1;
+	}
+
+	/*deallocate the result set*/
+	freeResult(statement);
+
+	/*close the statement*/
+	closeStatement(statement);
+
+	return is_exists;
+
+}
+my_bool isBalanceSufficient(MYSQL* connection, int accountId, float amount) {
+	char* query;
+	MYSQL_STMT *statement;
+	MYSQL_BIND parameter[2], result[1];
+	int int_data, result_data;
+	float float_data;
+	unsigned long parameter_length[2], result_length;
+	my_bool is_balance_sufficient;
+
+	query = "SELECT `ID` FROM `TBL_ACCOUNT` "
+				"WHERE `ACCOUNT_ID` = ? AND `BALANCE` >= ?";
+
+	/*initialize the statement*/
+	statement = initializeStatement(connection);
+
+	/*prepare the statement*/
+	prepareStatement(statement, query, strlen(query));
+
+	/*parameter 1 - ACCOUNT_ID*/
+	parameter[0].buffer_type = MYSQL_TYPE_LONG;
+	parameter[0].buffer = (char *) &int_data;
+	parameter[0].buffer_length = 2;
+	parameter[0].is_null = 0;
+	parameter[0].length = &parameter_length[0];
+
+	/*parameter 2 - AMOUNT*/
+	parameter[1].buffer_type = MYSQL_TYPE_FLOAT;
+	parameter[1].buffer = (char *) &float_data;
+	parameter[1].buffer_length = 2;
+	parameter[1].is_null = 0;
+	parameter[1].length = &parameter_length[1];
+
+	/*assign appropriate values to the result properties*/
+	result[0].buffer_type = MYSQL_TYPE_LONG;
+	result[0].buffer = (char *) &result_data;
+	result[0].buffer_length = 2;
+	result[0].is_null = 0;
+	result[0].length = &result_length;
+
+	/*bind the parameters and result*/
+	bindParameters(statement, parameter);
+	bindResult(statement, result);
+
+	/*assign values to the parameters*/
+	int_data = accountId;
+	float_data = amount;
+
+	/*execute the statement*/
+	executeStatement(statement);
+
+	/*store the statement result*/
+	storeResult(statement);
+
+	/*Check if sufficient balance for the account exists*/
+	if (mysql_stmt_num_rows(statement) == 0) {
+		is_balance_sufficient = 0;
+	} else {
+		is_balance_sufficient = 1;
+	}
+
+	/*deallocate the result set*/
+	freeResult(statement);
+
+	/*close the statement*/
+	closeStatement(statement);
+
+	return is_balance_sufficient;
+}
+
 my_bool updateAccountBalance(MYSQL* connection, int accountId, float amount,
 		char* operation) {
 
diff --git a/textparser/account_repo.h b/textparser/account_repo.h
index 9ec7315..a16dc20 100644
--- a/textparser/account_repo.h
+++ b/textparser/account_repo.h
@@ -1,3 +1,5 @@
 #include "repository.h"
 
+my_bool isAccount(MYSQL* connection, int accountId);
+my_bool isBalanceSufficient(MYSQL* connection, int accountId, float amount);
 my_bool updateAccountBalance(MYSQL* connection, int accountId, float amount, char* operation);
\ No newline at end of file
diff --git a/textparser/repository.c b/textparser/repository.c
index d883281..e1390bf 100644
--- a/textparser/repository.c
+++ b/textparser/repository.c
@@ -54,31 +54,6 @@ my_bool prepareStatement(MYSQL_STMT *statement, char* query, int queryLength) {
 	return 1;
 }
 
-/*TODO Not working as expected when invoked*/
-void initializeParameters(char** parameterTypes, MYSQL_BIND* parameter,
-		int parameterCount) {
-	int i;
-	unsigned long parameter_length[parameterCount];
-
-	/*printf("\nin init params");*/
-	for (i = 0; i < parameterCount; i++) {
-
-		if (strcmp(parameterTypes[i], "int") == 0) {
-			int data;
-			parameter[i].buffer_type = MYSQL_TYPE_LONG;
-			parameter[i].buffer_length = 2;
-			parameter[i].buffer = (char *) &data;
-		} else if (strcmp(parameterTypes[i], "string") == 0) {
-			char data[STRING_SIZE];
-			parameter[i].buffer_type = MYSQL_TYPE_STRING;
-			parameter[i].buffer_length = STRING_SIZE;
-			parameter[i].buffer = (char *) data;
-		}
-		parameter[i].is_null = 0;
-		parameter[i].length = &parameter_length[i];
-	}
-}
-
 my_bool bindParameters(MYSQL_STMT *statement, MYSQL_BIND *parameters) {
 	/* Bind the parameters buffer */
 	if (mysql_stmt_bind_param(statement, parameters)) {
@@ -104,7 +79,16 @@ my_bool executeStatement(MYSQL_STMT *statement) {
 	if (mysql_stmt_execute(statement)) {
 		fprintf(stderr, "Error in executing query.\n");
 		fprintf(stderr, " %s\n", mysql_stmt_error(statement));
-		fprintf(stderr, "Error in executing query.\n");
+		return 0;
+	}
+	return 1;
+}
+
+my_bool storeResult(MYSQL_STMT *statement) {
+	/* Store the result of the statement */
+	if (mysql_stmt_store_result(statement)) {
+		fprintf(stderr, "Error in storing statement result.\n");
+		fprintf(stderr, " %s\n", mysql_stmt_error(statement));
 		return 0;
 	}
 	return 1;
diff --git a/textparser/repository.h b/textparser/repository.h
index f2f8a93..3ce080c 100644
--- a/textparser/repository.h
+++ b/textparser/repository.h
@@ -13,6 +13,7 @@ my_bool prepareStatement(MYSQL_STMT *statement, char* query, int queryLength);
 my_bool bindParameters(MYSQL_STMT *statement, MYSQL_BIND *parameter);
 my_bool bindResult(MYSQL_STMT *statement, MYSQL_BIND *result);
 my_bool executeStatement(MYSQL_STMT *statement);
+my_bool storeResult(MYSQL_STMT *statement);
 my_bool freeResult(MYSQL_STMT *statement);
 my_bool closeStatement(MYSQL_STMT *statement);
 void getCurrentDateTime(int* year, int* month, int* day, int* hour, int* minute, int* second);
\ No newline at end of file
diff --git a/textparser/test.txt b/textparser/test.txt
index 6c7c1e5..3af811b 100644
--- a/textparser/test.txt
+++ b/textparser/test.txt
@@ -1,2 +1,2 @@
-1328725389;vorname nachname;12345.67;lMtZgBNgNI2BFPM;thank you for your purchase\; have a nice day.
-1328725389;vorname nachname2;432;8qe9Pu6MYdRC3ua;thank you for your purchase\; have a nice day.
+1328725389;vorname nachname;12345.67;thank you for your purchase\; have a nice day.
+1328725389;vorname nachname2;432;thank you for your purchase\; have a nice day.
\ No newline at end of file
diff --git a/textparser/textparser b/textparser/textparser
index bc051aa..6e936c8 100755
Binary files a/textparser/textparser and b/textparser/textparser differ
diff --git a/textparser/textparser.c b/textparser/textparser.c
index e4fc375..c296a33 100644
--- a/textparser/textparser.c
+++ b/textparser/textparser.c
@@ -10,14 +10,12 @@
 static short account_id_size = 10;
 static short account_name_size = 30;
 static short amount_size = 8;
-static short code_size = 15;
 static short remarks_size = 128;
 
 struct transaction_row {
 	char *account_id;
 	char *account_name;
 	char *amount;
-	char *code;
 	char *remarks;
 };
 
@@ -26,7 +24,6 @@ struct transaction_row construct_transaction_row() {
 	ret.account_id = malloc(sizeof(char)*(account_id_size+1));
 	ret.account_name = malloc(sizeof(char)*(account_name_size+1));
 	ret.amount = malloc(sizeof(char)*(amount_size+1));
-	ret.code = malloc(sizeof(char)*(code_size+1));
 	ret.remarks = malloc(sizeof(char)*(remarks_size+1));
 	return ret;
 }
@@ -35,7 +32,6 @@ void destruct_transaction_row(struct transaction_row row) {
 	free(row.account_id);
 	free(row.account_name);
 	free(row.amount);
-	free(row.code);
 	free(row.remarks);
 }
 
@@ -49,7 +45,7 @@ int main(int argc, char **argv) {
 	input_file = fopen(input, "r");
 
 	if (input_file == NULL) {
-		perror("Cannot open input file\n");
+		printf("Error in reading file.\n");
         return(-1);
 	} else {
 		int i = 0;
@@ -61,7 +57,7 @@ int main(int argc, char **argv) {
 		do {
 			if((c = fgetc(input_file)) == '\n') {
 				// close line
-				if (processTransfer(atoi(argv[2]), current_row.code, atoi(argv[3]), atoi(current_row.account_id), current_row.account_name, strtof(current_row.amount, NULL), current_row.remarks, argv[4], argv[5], argv[6], argv[7])) {
+				if (processTransfer(atoi(argv[2]), argv[3], argv[5], atoi(argv[4]), atoi(current_row.account_id), current_row.account_name, strtof(current_row.amount, NULL), current_row.remarks, argv[6], argv[7], argv[8], argv[9])) {
 					success = 1;
 				} else {
 					success = 0;
@@ -96,14 +92,6 @@ int main(int argc, char **argv) {
 	                        j++;
 	                    }
 					} else if (i == 3) {
-						if (j < code_size) {
-							current_row.code[j] = c;
-							j++;
-	                    } else if (j == code_size) {
-	                        current_row.code[j] = 0;
-	                        j++;
-	                    }
-					} else if (i == 4) {
 						if (j < remarks_size) {
 							current_row.remarks[j] = c;
 							j++;
@@ -113,6 +101,10 @@ int main(int argc, char **argv) {
 	                    }
 					}
 				}
+				/*Reset j when a newline is encountered*/
+				if (c == '\n') {
+					j = 0;
+				}
 			} else {
 				if (i == 0) {
 					if (j < account_id_size) {
@@ -127,10 +119,6 @@ int main(int argc, char **argv) {
 						current_row.amount[j] = 0;
 	                }
 				} else if (i == 3) {
-					if (j < code_size) {
-						current_row.code[j] = 0;
-	                }
-				} else if (i == 4) {
 					if (j < remarks_size) {
 						current_row.remarks[j] = 0;
 	                }
@@ -141,9 +129,9 @@ int main(int argc, char **argv) {
 			prev_c = c;
 
 	    } while (c != EOF);
-	    
+
 	    if(i != 0 && row_count != 0) {
-	    	if (processTransfer(atoi(argv[2]), current_row.code, atoi(argv[3]), atoi(current_row.account_id), current_row.account_name, strtof(current_row.amount, NULL), current_row.remarks, argv[4], argv[5], argv[6], argv[7])) {
+	    	if (processTransfer(atoi(argv[2]), argv[3], argv[5], atoi(argv[4]), atoi(current_row.account_id), current_row.account_name, strtof(current_row.amount, NULL), current_row.remarks, argv[6], argv[7], argv[8], argv[9])) {
 	    		success = 1;
 	    	} else {
 	    		success = 0;
diff --git a/textparser/transaction_controller.c b/textparser/transaction_controller.c
index 9b1b2ae..fba5350 100644
--- a/textparser/transaction_controller.c
+++ b/textparser/transaction_controller.c
@@ -15,8 +15,8 @@ static unsigned int opt_port_num = 3306; /*port number*/
 
 static MYSQL *db_connection; /*pointer to the database connection handler*/
 
-my_bool processTransfer(int customerId, char* code, int fromAccountId,
-		int toAccountId, char* toAccountName, float amount, char* remarks, char *opt_host_name, char *opt_user_name, char *opt_password, char *opt_db_name ) {
+my_bool processTransfer(int customerId, char* customerName, char* code, int fromAccountId,
+		int toAccountId, char* toAccountName, float amount, char* remarks, char *opt_host_name, char *opt_user_name, char *opt_password, char *opt_db_name) {
 
 	my_bool result;
 
@@ -27,7 +27,7 @@ my_bool processTransfer(int customerId, char* code, int fromAccountId,
 	connectToDB(db_connection, opt_host_name, opt_user_name, opt_password,
 			opt_db_name, opt_port_num);
 
-	result = makeTransfer(db_connection, customerId, code, fromAccountId, toAccountId, toAccountName, amount, remarks);
+	result = makeTransfer(db_connection, customerId, customerName, code, fromAccountId, toAccountId, toAccountName, amount, remarks);
 
 	/*close the database connection*/
 	closeDB(db_connection);
diff --git a/textparser/transaction_controller.h b/textparser/transaction_controller.h
index 8dc3683..2d1fa98 100644
--- a/textparser/transaction_controller.h
+++ b/textparser/transaction_controller.h
@@ -1,4 +1,4 @@
 #include <mysql/mysql.h>
 
-my_bool processTransfer(int customerId, char* code, int fromAccountId,
-		int toAccountId, char* toAccountName, float amount, char* remarks, char *opt_host_name, char *opt_user_name, char *opt_password, char *opt_db_name );
\ No newline at end of file
+my_bool processTransfer(int customerId, char* customerName, char* code, int fromAccountId,
+		int toAccountId, char* toAccountName, float amount, char* remarks, char *opt_host_name, char *opt_user_name, char *opt_password, char *opt_db_name);
\ No newline at end of file
diff --git a/textparser/transaction_repo.c b/textparser/transaction_repo.c
index 0ab26ba..961f17d 100644
--- a/textparser/transaction_repo.c
+++ b/textparser/transaction_repo.c
@@ -14,17 +14,17 @@
 
 #define STRING_SIZE 256
 
-MYSQL_BIND parameters[9], result[1]; /*input & output parameter buffers*/
+MYSQL_BIND parameters[10], result[1]; /*input & output parameter buffers*/
 
 int int_data[5]; /*input and output values*/
-char str_data[4][STRING_SIZE];
+char str_data[3][STRING_SIZE];
 float float_data[1];
 int result_data[1];
 MYSQL_TIME current_time;
 
-unsigned long int_length[9], result_length;
+unsigned long parameter_length[10], result_length;
 
-my_bool addTransaction(MYSQL *connection, int customerId, int fromAccountId,
+my_bool addTransaction(MYSQL *connection, int customerId, char* customerName, int fromAccountId,
 		int toAccountId, char* toAccountName, float amount, char* remarks) {
 
 	char* query;
@@ -33,13 +33,13 @@ my_bool addTransaction(MYSQL *connection, int customerId, int fromAccountId,
 
 	int is_on_hold = (amount > 10000) ? 1 : 0;
 	int is_rejected = 0;
-	int is_closed = 0;
+	int is_closed = (amount > 10000) ? 0 : 1;
 
 	query =
 			"INSERT INTO `TBL_TRANSACTION`("
-					"`TRANSACTION_DATE`, `FROM_ACCOUNT_ID`, `TO_ACCOUNT_ID`, `TO_ACCOUNT_NAME`,"
+					"`TRANSACTION_DATE`, `FROM_ACCOUNT_ID`, `FROM_ACCOUNT_NAME`, `TO_ACCOUNT_ID`, `TO_ACCOUNT_NAME`,"
 					"`AMOUNT`, `REMARKS`, `IS_ON_HOLD`, `IS_REJECTED`, `IS_CLOSED`) VALUES("
-					"?, ?, ?, ?, ?, ?, ?, ?, ?)";
+					"?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
 
 	/*initialize the statement*/
 	statement = initializeStatement(connection);
@@ -48,59 +48,75 @@ my_bool addTransaction(MYSQL *connection, int customerId, int fromAccountId,
 		result = prepareStatement(statement, query, strlen(query));
 
 		if (result) {
+			/*Parameter 1 - TRANSACTION_DATE*/
 			parameters[0].buffer_type = MYSQL_TYPE_DATETIME;
 			parameters[0].buffer = (char *) &current_time;
 			parameters[0].buffer_length = 2;
 			parameters[0].is_null = 0;
-			parameters[0].length = &int_length[1];
+			parameters[0].length = &parameter_length[0];
 
+			/*Parameter 2 - FROM_ACCOUNT_ID*/
 			parameters[1].buffer_type = MYSQL_TYPE_LONG;
 			parameters[1].buffer = (char *) &int_data[0];
 			parameters[1].buffer_length = 2;
 			parameters[1].is_null = 0;
-			parameters[1].length = &int_length[1];
+			parameters[1].length = &parameter_length[1];
 
-			parameters[2].buffer_type = MYSQL_TYPE_LONG;
-			parameters[2].buffer = (char *) &int_data[1];
-			parameters[2].buffer_length = 2;
+			/*Parameter 3 - FROM_ACCOUNT_NAME*/
+			parameters[2].buffer_type = MYSQL_TYPE_STRING;
+			parameters[2].buffer = (char *) str_data[0];
+			parameters[2].buffer_length = STRING_SIZE;
 			parameters[2].is_null = 0;
-			parameters[2].length = &int_length[2];
+			parameters[2].length = &parameter_length[2];
 
-			parameters[3].buffer_type = MYSQL_TYPE_STRING;
-			parameters[3].buffer = (char *) str_data[1];
-			parameters[3].buffer_length = STRING_SIZE;
+			/*Parameter 4 - TO_ACCOUNT_ID*/
+			parameters[3].buffer_type = MYSQL_TYPE_LONG;
+			parameters[3].buffer = (char *) &int_data[1];
+			parameters[3].buffer_length = 2;
 			parameters[3].is_null = 0;
-			parameters[3].length = &int_length[3];
+			parameters[3].length = &parameter_length[3];
 
-			parameters[4].buffer_type = MYSQL_TYPE_FLOAT;
-			parameters[4].buffer = (char *) &float_data[0];
-			parameters[4].buffer_length = 2;
+			/*Parameter 5 - TO_ACCOUNT_NAME*/
+			parameters[4].buffer_type = MYSQL_TYPE_STRING;
+			parameters[4].buffer = (char *) str_data[1];
+			parameters[4].buffer_length = STRING_SIZE;
 			parameters[4].is_null = 0;
-			parameters[4].length = &int_length[4];
+			parameters[4].length = &parameter_length[4];
 
-			parameters[5].buffer_type = MYSQL_TYPE_STRING;
-			parameters[5].buffer = (char *) str_data[3];
-			parameters[5].buffer_length = STRING_SIZE;
+			/*Parameter 6 - AMOUNT*/
+			parameters[5].buffer_type = MYSQL_TYPE_FLOAT;
+			parameters[5].buffer = (char *) &float_data[0];
+			parameters[5].buffer_length = 2;
 			parameters[5].is_null = 0;
-			parameters[5].length = &int_length[5];
+			parameters[5].length = &parameter_length[5];
 
-			parameters[6].buffer_type = MYSQL_TYPE_TINY;
-			parameters[6].buffer = (char *) &int_data[2];
-			parameters[6].buffer_length = 2;
+			/*Parameter 7 - REMARKS*/
+			parameters[6].buffer_type = MYSQL_TYPE_STRING;
+			parameters[6].buffer = (char *) str_data[2];
+			parameters[6].buffer_length = STRING_SIZE;
 			parameters[6].is_null = 0;
-			parameters[6].length = &int_length[6];
+			parameters[6].length = &parameter_length[6];
 
+			/*Parameter 8 - IS_ON_HOLD*/
 			parameters[7].buffer_type = MYSQL_TYPE_TINY;
-			parameters[7].buffer = (char *) &int_data[3];
+			parameters[7].buffer = (char *) &int_data[2];
 			parameters[7].buffer_length = 2;
 			parameters[7].is_null = 0;
-			parameters[7].length = &int_length[7];
+			parameters[7].length = &parameter_length[7];
 
+			/*Parameter 9 - IS_REJECTED*/
 			parameters[8].buffer_type = MYSQL_TYPE_TINY;
-			parameters[8].buffer = (char *) &int_data[4];
+			parameters[8].buffer = (char *) &int_data[3];
 			parameters[8].buffer_length = 2;
 			parameters[8].is_null = 0;
-			parameters[8].length = &int_length[8];
+			parameters[8].length = &parameter_length[8];
+
+			/*Parameter 10 - IS_CLOSED*/
+			parameters[9].buffer_type = MYSQL_TYPE_TINY;
+			parameters[9].buffer = (char *) &int_data[4];
+			parameters[9].buffer_length = 2;
+			parameters[9].is_null = 0;
+			parameters[9].length = &parameter_length[9];
 
 			/*bind the parameters and result*/
 			result = bindParameters(statement, parameters);
@@ -112,11 +128,13 @@ my_bool addTransaction(MYSQL *connection, int customerId, int fromAccountId,
 				int_data[3] = is_rejected;
 				int_data[4] = is_closed;
 
+				strcpy(str_data[0], customerName);
+				parameter_length[2] = strlen(str_data[0]);
 				strcpy(str_data[1], toAccountName);
-				int_length[3] = strlen(str_data[1]);
+				parameter_length[4] = strlen(str_data[1]);
+				strcpy(str_data[2], remarks);
+				parameter_length[6] = strlen(str_data[2]);
 				float_data[0] = amount;
-				strcpy(str_data[3], remarks);
-				int_length[5] = strlen(str_data[3]);
 
 				/*set the current date-time in the time-stamp structure*/
 				getCurrentDateTime(&current_time.year, &current_time.month,
@@ -171,27 +189,44 @@ my_bool addTransaction(MYSQL *connection, int customerId, int fromAccountId,
 	return 1;
 }
 
-my_bool makeTransfer(MYSQL* connection, int customerId, char* code, int fromAccountId,
+my_bool makeTransfer(MYSQL* connection, int customerId, char* customerName, char* code, int fromAccountId,
 		int toAccountId, char* toAccountName, float amount, char* remarks) {
+
+	/*Check for valid amount i.e., restrict 0 or negative amounts*/
+	if (amount <= 0) {
+		printf("Incorrect amount for the transfer.\n");
+		return 0;
+	}
+	/*Check if recipient account is same as own account*/
+	if (fromAccountId == toAccountId) {
+		printf("Recipient Account same as own account.\n");
+		return 0;
+	}
+	/*Check for non-existent recipient account*/
+	if (!isAccount(connection, toAccountId)) {
+		printf("Recipient Account does not exist.\n");
+		return 0;
+	}
+	/*Check for insufficient funds*/
+	if (!isBalanceSufficient(connection, fromAccountId, amount)) {
+		printf("Insufficient funds for the transfer.\n");
+		return 0;
+	}
+
 	mysql_autocommit(connection, 0);
-	if (isValidTransactionCode(connection, customerId, code)) {
-		if (setIsUsedTransactionCode(connection, customerId, code)) {
-			if (addTransaction(connection, customerId, fromAccountId, toAccountId, toAccountName, amount, remarks)) {
-				mysql_commit(connection);
-			} else {
-				printf("Error in adding transaction.\n");
-				mysql_rollback(connection);
-				return 0;
-			}
+	if (setIsUsedTransactionCode(connection, customerId, code)) {
+		if (addTransaction(connection, customerId, customerName, fromAccountId, toAccountId, toAccountName, amount, remarks)) {
+			mysql_commit(connection);
 		} else {
-			printf("Error in updating transaction code.\n");
+			printf("Error in adding transaction.\n");
 			mysql_rollback(connection);
 			return 0;
 		}
 	} else {
-		printf("Incorrect transaction code.\n");
+		printf("Error in updating TAN (transaction code).\n");
 		mysql_rollback(connection);
 		return 0;
 	}
+	printf("Transaction was processed successfully. \n");
 	return 1;
-}
+}
\ No newline at end of file
diff --git a/textparser/transaction_repo.h b/textparser/transaction_repo.h
index efab435..3b3268d 100644
--- a/textparser/transaction_repo.h
+++ b/textparser/transaction_repo.h
@@ -1,6 +1,6 @@
 #include "repository.h"
 
-my_bool addTransaction(MYSQL *connection, int customerId, int fromAccountId,
+my_bool addTransaction(MYSQL *connection, int customerId, char* customerName, int fromAccountId,
 		int toAccountId, char* toAccountName, float amount, char* remarks);
-my_bool makeTransfer(MYSQL* connection, int customerId, char* code, int fromAccountId,
+my_bool makeTransfer(MYSQL* connection, int customerId, char* customerName, char* code, int fromAccountId,
 		int toAccountId, char* toAccountName, float amount, char* remarks);
diff --git a/textparser/transactioncode_repo.c b/textparser/transactioncode_repo.c
index 5cba19b..fbfab62 100644
--- a/textparser/transactioncode_repo.c
+++ b/textparser/transactioncode_repo.c
@@ -77,7 +77,7 @@ my_bool isValidTransactionCode(MYSQL *connection, int customerId, char* code) {
 	/*execute the statement*/
 	executeStatement(statement);
 
-	/* Print our results */
+	/*Check if the Transaction code exists*/
 	if (mysql_stmt_fetch(statement) == 0) {
 		is_valid = 1;
 	} else {
@@ -93,6 +93,89 @@ my_bool isValidTransactionCode(MYSQL *connection, int customerId, char* code) {
 	return is_valid;
 }
 
+my_bool addTransactionCode(MYSQL *connection, int customerId, char* code) {
+	char* query;
+	MYSQL_STMT *statement;
+	my_bool result;
+
+	query = "INSERT INTO `TBL_TRANSACTION_CODE`("
+			"`CUSTOMER_ID`, `CODE`, `IS_USED`) VALUES("
+			"?, ?, ?)";
+
+	/*initialize the statement*/
+	statement = initializeStatement(connection);
+	if (statement) {
+		/*prepare the statement*/
+		result = prepareStatement(statement, query, strlen(query));
+
+		if (result) {
+			/*assign appropriate values to the parameter properties*/
+			/*parameter 1 - CUSTOMER_ID*/
+			parameters[0].buffer_type = MYSQL_TYPE_LONG;
+			parameters[0].buffer = (char *) &int_data[0];
+			parameters[0].buffer_length = 2;
+			parameters[0].is_null = 0;
+			parameters[0].length = &int_length[0];
+
+			/*parameter 2 - CODE*/
+			parameters[1].buffer_type = MYSQL_TYPE_STRING;
+			parameters[1].buffer = (char *) str_data;
+			parameters[1].buffer_length = STRING_SIZE;
+			parameters[1].is_null = 0;
+			parameters[1].length = &str_length;
+
+			/*parameter 3 - IS_USED*/
+			parameters[2].buffer_type = MYSQL_TYPE_LONG;
+			parameters[2].buffer = (char *) &int_data[1];
+			parameters[2].buffer_length = 2;
+			parameters[2].is_null = 0;
+			parameters[2].length = &int_length[1];
+
+			/*bind the parameters and result*/
+			result = bindParameters(statement, parameters);
+
+			if (result) {
+				/*assign values to the parameters*/
+				int_data[0] = customerId;
+				strncpy(str_data, code, STRING_SIZE);
+				str_length = strlen(str_data);
+				int_data[1] = 1;
+
+				/*execute the statement*/
+				result = executeStatement(statement);
+
+				if (result) {
+					/*deallocate the result set*/
+					result = freeResult(statement);
+					if (result) {
+						/*close the statement*/
+						result = closeStatement(statement);
+						if (!result) {
+							printf("Error in adding transaction code\n");
+						}
+						return result;
+					} else {
+						printf("Error in adding transaction code\n");
+						return result;
+					}
+				} else {
+					printf("Error in adding transaction code\n");
+					return result;
+				}
+			} else {
+				printf("Error in adding transaction code\n");
+				return result;
+			}
+		} else {
+			printf("Error in adding transaction code\n");
+			return result;
+		}
+	} else {
+		printf("Error in adding transaction code\n");
+		return 0;
+	}
+}
+
 my_bool setIsUsedTransactionCode(MYSQL *connection, int customerId, char* code) {
 	char* query;
 	MYSQL_STMT *statement;
@@ -146,15 +229,18 @@ my_bool setIsUsedTransactionCode(MYSQL *connection, int customerId, char* code)
 				result = executeStatement(statement);
 
 				if (result) {
-
 					/*deallocate the result set*/
 					result = freeResult(statement);
-
 					if (result) {
 						/*close the statement*/
 						result = closeStatement(statement);
 						if (!result) {
 							printf("Error in updating transaction code\n");
+							return result;
+						}
+						/*Check if no rows are affected and add the transaction code to the table.*/
+						if (mysql_stmt_affected_rows(statement) == 0) {
+							return addTransactionCode(connection, customerId, code);
 						}
 						return result;
 					} else {
diff --git a/textparser/transactioncode_repo.h b/textparser/transactioncode_repo.h
index 2008e49..83f8d5b 100644
--- a/textparser/transactioncode_repo.h
+++ b/textparser/transactioncode_repo.h
@@ -1,4 +1,5 @@
 #include "repository.h"
 
 my_bool isValidTransactionCode(MYSQL *connection, int customerId, char* code);
+my_bool addTransactionCode(MYSQL *connection, int customerId, char* code);
 my_bool setIsUsedTransactionCode(MYSQL *connection, int customerId, char* code);
\ No newline at end of file
